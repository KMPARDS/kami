/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import { BatchSendTokens } from "./BatchSendTokens";

export class BatchSendTokensFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<BatchSendTokens> {
    return super.deploy(overrides || {}) as Promise<BatchSendTokens>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BatchSendTokens {
    return super.attach(address) as BatchSendTokens;
  }
  connect(signer: Signer): BatchSendTokensFactory {
    return super.connect(signer) as BatchSendTokensFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchSendTokens {
    return new Contract(address, _abi, signerOrProvider) as BatchSendTokens;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address"
      },
      {
        internalType: "address[]",
        name: "addressArray",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "amountArray",
        type: "uint256[]"
      },
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256"
      }
    ],
    name: "sendErc20ByDifferentAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address"
      },
      {
        internalType: "address[]",
        name: "addressArray",
        type: "address[]"
      },
      {
        internalType: "uint256",
        name: "amountToEachAddress",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256"
      }
    ],
    name: "sendErc20BySameAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addressArray",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "amountArray",
        type: "uint256[]"
      }
    ],
    name: "sendNativeByDifferentAmount",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061088a806100206000396000f3fe6080604052600436106100345760003560e01c8063a87a7e0114610039578063ae2fda7b14610162578063c1e97df414610234575b600080fd5b6101606004803603604081101561004f57600080fd5b81019060208101813564010000000081111561006a57600080fd5b82018360208201111561007c57600080fd5b8035906020019184602083028401116401000000008311171561009e57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156100ee57600080fd5b82018360208201111561010057600080fd5b8035906020019184602083028401116401000000008311171561012257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610387945050505050565b005b34801561016e57600080fd5b506101606004803603608081101561018557600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156101bd57600080fd5b8201836020820111156101cf57600080fd5b803590602001918460208302840111640100000000831117156101f157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135610540565b34801561024057600080fd5b506101606004803603608081101561025757600080fd5b73ffffffffffffffffffffffffffffffffffffffff823516919081019060408101602082013564010000000081111561028f57600080fd5b8201836020820111156102a157600080fd5b803590602001918460208302840111640100000000831117156102c357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561031357600080fd5b82018360208201111561032557600080fd5b8035906020019184602083028401116401000000008311171561034757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506106b4915050565b815160005b818110156104915760008482815181106103a257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168483815181106103cc57fe5b6020908102919091010151604051600081818185875af1925050503d8060008114610413576040519150601f19603f3d011682016040523d82523d6000602084013e610418565b606091505b505090508061048857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4253543a204e6174697665207472616e73666572206661696c696e6700000000604482015290519081900360640190fd5b5060010161038c565b50471561053b57604051600090339047908381818185875af1925050503d80600081146104da576040519150601f19603f3d011682016040523d82523d6000602084013e6104df565b606091505b5050905080610539576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806108346021913960400191505060405180910390fd5b505b505050565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052905173ffffffffffffffffffffffffffffffffffffffff8616916323b872dd9160648083019260209291908290030181600087803b1580156105bb57600080fd5b505af11580156105cf573d6000803e3d6000fd5b505050506040513d60208110156105e557600080fd5b5050825160005b818110156106ac578573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86838151811061061c57fe5b6020026020010151866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561067857600080fd5b505af115801561068c573d6000803e3d6000fd5b505050506040513d60208110156106a257600080fd5b50506001016105ec565b505050505050565b604080517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052905173ffffffffffffffffffffffffffffffffffffffff8616916323b872dd9160648083019260209291908290030181600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050506040513d602081101561075957600080fd5b5050825160005b818110156106ac578573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86838151811061079057fe5b60200260200101518684815181106107a457fe5b60200260200101516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156107ff57600080fd5b505af1158015610813573d6000803e3d6000fd5b505050506040513d602081101561082957600080fd5b505060010161076056fe4253543a204e6174697665206368616e67652072657475726e206661696c696e67a2646970667358221220e9d162b841b06753bfc74aecdd2eaf8f4cb8c29813d9a2023bf203a7900f144064736f6c63430007010033";
