/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TimeAllyManagerInterface extends ethers.utils.Interface {
  functions: {
    "adminMode()": FunctionFragment;
    "dayswappers()": FunctionFragment;
    "deactivateAdminMode()": FunctionFragment;
    "decreaseActiveStaking(uint256,uint32,uint32)": FunctionFragment;
    "defaultMonths()": FunctionFragment;
    "deployer()": FunctionFragment;
    "emitStakingMerge(address)": FunctionFragment;
    "emitStakingTransfer(address,address)": FunctionFragment;
    "getMonthlyNRT(uint32)": FunctionFragment;
    "getTotalActiveStaking(uint32)": FunctionFragment;
    "increaseActiveStaking(uint256,uint32,uint32)": FunctionFragment;
    "isStakingContractValid(address)": FunctionFragment;
    "kycDapp()": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "prepaidFallback(address,uint256)": FunctionFragment;
    "processNrtReward(uint256,uint8)": FunctionFragment;
    "randomnessManager()": FunctionFragment;
    "receiveNrt(uint32)": FunctionFragment;
    "removeStaking(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolveAddress(bytes32)": FunctionFragment;
    "resolveUsername(address)": FunctionFragment;
    "resolveUsernameStrict(address)": FunctionFragment;
    "sendStake(address,uint256,bool[])": FunctionFragment;
    "setInitialValues()": FunctionFragment;
    "setKycDapp(address)": FunctionFragment;
    "setStakingTarget(address)": FunctionFragment;
    "splitStaking(address,uint256,uint32)": FunctionFragment;
    "stake()": FunctionFragment;
    "stakingTarget()": FunctionFragment;
    "timeallyClub()": FunctionFragment;
    "timeallyManager()": FunctionFragment;
    "timeallyPromotionalBucket()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validatorManager()": FunctionFragment;
    "withdrawClaimedNrt(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adminMode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dayswappers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAdminMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseActiveStaking",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMonths",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emitStakingMerge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitStakingTransfer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMonthlyNRT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalActiveStaking",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseActiveStaking",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isStakingContractValid",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "kycDapp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepaidFallback",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processNrtReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomnessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveNrt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStaking",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsernameStrict",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendStake",
    values: [string, BigNumberish, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialValues",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setKycDapp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setStakingTarget",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "splitStaking",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakingTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyClub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyPromotionalBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawClaimedNrt",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "adminMode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dayswappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAdminMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseActiveStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMonths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitStakingMerge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitStakingTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMonthlyNRT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalActiveStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseActiveStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakingContractValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycDapp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepaidFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processNrtReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomnessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receiveNrt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsernameStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInitialValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyClub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyPromotionalBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawClaimedNrt",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "StakingMerge(address,address)": EventFragment;
    "StakingSplit(address,address)": EventFragment;
    "StakingTransfer(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingMerge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingSplit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingTransfer"): EventFragment;
}

export class TimeAllyManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TimeAllyManagerInterface;

  functions: {
    /**
     * Admin mode status
     */
    adminMode(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Deactivates admin mode forever.
     */
    deactivateAdminMode(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Used by staking contracts when need to topup, split, merge, issTime and destroy.
     * Decreases active stakings for a range of months.
     * @param _amount : Amount to decrease.
     * @param _endMonth : Month upto which decreasing should be done
     * @param _startMonth : Month from which decreasing should be done
     */
    decreaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Default months for stakings.
     */
    defaultMonths(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    deployer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Called by any valid staking contract when it splits.
     * Emits a StakingMerge event.
     * @param _childStaking : Address of new staking contract created my master staking.
     */
    emitStakingMerge(
      _childStaking: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Called by any valid staking contract when it transfers ownership.
     * Emits a StakingTransfer event.
     * @param _newOwner : Address of receiver.
     * @param _oldOwner : Address of sender.
     */
    emitStakingTransfer(
      _oldOwner: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalActiveStaking(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Used by staking contracts when need to topup, split, merge, issTime and destroy.
     * Increases active stakings for a range of months.
     * @param _amount : Amount to increase.
     * @param _endMonth : Month upto which increasing should be done
     * @param _startMonth : Month from which increasing should be done
     */
    increaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * An address once a valid staking contract, is no longer a valid one if it is destroyed.
     * Checks if a given address is a valid and active staking contract.
     * @param _stakingContract : An address to check.
     */
    isStakingContractValid(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Used for creating a staking using prepaid ES
     * Called by Prepaid contract then transfer done to this contract.
     * @param _sender : The msg.sender in prepaid contract's transfer method.
     * @param _value : Amount of prepaid ES tokens transferred.
     */
    prepaidFallback(
      _sender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Called by staking contract when withdrawing monthly reward.
     * Processes NRT reward to the staker.
     * @param _reward : Amount of reward to be processed.
     * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
     */
    processNrtReward(
      _reward: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Removes the staking from valid staking.
     * @param _owner : Address of owner (for emiting the event).
     */
    removeStaking(
      _owner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Used in admin mode to send initial stakings.
     * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
     * @param _initialIssTime : IssTime Limit to be given initially.
     * @param _receiver : Address of receipent of the staking contract.
     */
    sendStake(
      _receiver: string,
      _initialIssTime: BigNumberish,
      _claimedMonths: boolean[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setInitialValues(overrides?: Overrides): Promise<ContractTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStakingTarget(
      _stakingTarget: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Creates the child contract when spliting a staking, updates active stakings and emits event
     * @param _initialIssTime : IssTime Limit that is being passed while split.
     * @param _masterEndMonth : Extension end month of master staking for adjusting the total active stakings.
     * @param _owner : Owner of the master staking, is set as owner of the new staking that is created.
     */
    splitStaking(
      _owner: string,
      _initialIssTime: BigNumberish,
      _masterEndMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Deploys a new staking contract with value sent.
     */
    stake(overrides?: PayableOverrides): Promise<ContractTransaction>;

    stakingTarget(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Withdraws the NRT rewards claimed by stakers (to process native token replacement).
     * @param _amount : Amount of claimed NRT rewards by stakers.
     */
    withdrawClaimedNrt(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Admin mode status
   */
  adminMode(overrides?: CallOverrides): Promise<boolean>;

  dayswappers(overrides?: CallOverrides): Promise<string>;

  /**
   * Deactivates admin mode forever.
   */
  deactivateAdminMode(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Used by staking contracts when need to topup, split, merge, issTime and destroy.
   * Decreases active stakings for a range of months.
   * @param _amount : Amount to decrease.
   * @param _endMonth : Month upto which decreasing should be done
   * @param _startMonth : Month from which decreasing should be done
   */
  decreaseActiveStaking(
    _amount: BigNumberish,
    _startMonth: BigNumberish,
    _endMonth: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Default months for stakings.
   */
  defaultMonths(overrides?: CallOverrides): Promise<number>;

  deployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Called by any valid staking contract when it splits.
   * Emits a StakingMerge event.
   * @param _childStaking : Address of new staking contract created my master staking.
   */
  emitStakingMerge(
    _childStaking: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Called by any valid staking contract when it transfers ownership.
   * Emits a StakingTransfer event.
   * @param _newOwner : Address of receiver.
   * @param _oldOwner : Address of sender.
   */
  emitStakingTransfer(
    _oldOwner: string,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMonthlyNRT(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalActiveStaking(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Used by staking contracts when need to topup, split, merge, issTime and destroy.
   * Increases active stakings for a range of months.
   * @param _amount : Amount to increase.
   * @param _endMonth : Month upto which increasing should be done
   * @param _startMonth : Month from which increasing should be done
   */
  increaseActiveStaking(
    _amount: BigNumberish,
    _startMonth: BigNumberish,
    _endMonth: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * An address once a valid staking contract, is no longer a valid one if it is destroyed.
   * Checks if a given address is a valid and active staking contract.
   * @param _stakingContract : An address to check.
   */
  isStakingContractValid(
    _stakingContract: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  /**
   * Used for creating a staking using prepaid ES
   * Called by Prepaid contract then transfer done to this contract.
   * @param _sender : The msg.sender in prepaid contract's transfer method.
   * @param _value : Amount of prepaid ES tokens transferred.
   */
  prepaidFallback(
    _sender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Called by staking contract when withdrawing monthly reward.
   * Processes NRT reward to the staker.
   * @param _reward : Amount of reward to be processed.
   * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
   */
  processNrtReward(
    _reward: BigNumberish,
    _rewardType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows NRT Manager contract to send NRT share for TimeAlly.
   */
  receiveNrt(
    _currentNrtMonth: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Removes the staking from valid staking.
   * @param _owner : Address of owner (for emiting the event).
   */
  removeStaking(
    _owner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  resolveAddress(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  resolveUsernameStrict(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Used in admin mode to send initial stakings.
   * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
   * @param _initialIssTime : IssTime Limit to be given initially.
   * @param _receiver : Address of receipent of the staking contract.
   */
  sendStake(
    _receiver: string,
    _initialIssTime: BigNumberish,
    _claimedMonths: boolean[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setInitialValues(overrides?: Overrides): Promise<ContractTransaction>;

  setKycDapp(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStakingTarget(
    _stakingTarget: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Creates the child contract when spliting a staking, updates active stakings and emits event
   * @param _initialIssTime : IssTime Limit that is being passed while split.
   * @param _masterEndMonth : Extension end month of master staking for adjusting the total active stakings.
   * @param _owner : Owner of the master staking, is set as owner of the new staking that is created.
   */
  splitStaking(
    _owner: string,
    _initialIssTime: BigNumberish,
    _masterEndMonth: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Deploys a new staking contract with value sent.
   */
  stake(overrides?: PayableOverrides): Promise<ContractTransaction>;

  stakingTarget(overrides?: CallOverrides): Promise<string>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Withdraws the NRT rewards claimed by stakers (to process native token replacement).
   * @param _amount : Amount of claimed NRT rewards by stakers.
   */
  withdrawClaimedNrt(
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Admin mode status
     */
    adminMode(overrides?: CallOverrides): Promise<boolean>;

    dayswappers(overrides?: CallOverrides): Promise<string>;

    /**
     * Deactivates admin mode forever.
     */
    deactivateAdminMode(overrides?: CallOverrides): Promise<void>;

    /**
     * Used by staking contracts when need to topup, split, merge, issTime and destroy.
     * Decreases active stakings for a range of months.
     * @param _amount : Amount to decrease.
     * @param _endMonth : Month upto which decreasing should be done
     * @param _startMonth : Month from which decreasing should be done
     */
    decreaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Default months for stakings.
     */
    defaultMonths(overrides?: CallOverrides): Promise<number>;

    deployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Called by any valid staking contract when it splits.
     * Emits a StakingMerge event.
     * @param _childStaking : Address of new staking contract created my master staking.
     */
    emitStakingMerge(
      _childStaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Called by any valid staking contract when it transfers ownership.
     * Emits a StakingTransfer event.
     * @param _newOwner : Address of receiver.
     * @param _oldOwner : Address of sender.
     */
    emitStakingTransfer(
      _oldOwner: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalActiveStaking(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Used by staking contracts when need to topup, split, merge, issTime and destroy.
     * Increases active stakings for a range of months.
     * @param _amount : Amount to increase.
     * @param _endMonth : Month upto which increasing should be done
     * @param _startMonth : Month from which increasing should be done
     */
    increaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * An address once a valid staking contract, is no longer a valid one if it is destroyed.
     * Checks if a given address is a valid and active staking contract.
     * @param _stakingContract : An address to check.
     */
    isStakingContractValid(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    /**
     * Used for creating a staking using prepaid ES
     * Called by Prepaid contract then transfer done to this contract.
     * @param _sender : The msg.sender in prepaid contract's transfer method.
     * @param _value : Amount of prepaid ES tokens transferred.
     */
    prepaidFallback(
      _sender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Called by staking contract when withdrawing monthly reward.
     * Processes NRT reward to the staker.
     * @param _reward : Amount of reward to be processed.
     * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
     */
    processNrtReward(
      _reward: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Removes the staking from valid staking.
     * @param _owner : Address of owner (for emiting the event).
     */
    removeStaking(_owner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Used in admin mode to send initial stakings.
     * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
     * @param _initialIssTime : IssTime Limit to be given initially.
     * @param _receiver : Address of receipent of the staking contract.
     */
    sendStake(
      _receiver: string,
      _initialIssTime: BigNumberish,
      _claimedMonths: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialValues(overrides?: CallOverrides): Promise<void>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    setStakingTarget(
      _stakingTarget: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Creates the child contract when spliting a staking, updates active stakings and emits event
     * @param _initialIssTime : IssTime Limit that is being passed while split.
     * @param _masterEndMonth : Extension end month of master staking for adjusting the total active stakings.
     * @param _owner : Owner of the master staking, is set as owner of the new staking that is created.
     */
    splitStaking(
      _owner: string,
      _initialIssTime: BigNumberish,
      _masterEndMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Deploys a new staking contract with value sent.
     */
    stake(overrides?: CallOverrides): Promise<void>;

    stakingTarget(overrides?: CallOverrides): Promise<string>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Withdraws the NRT rewards claimed by stakers (to process native token replacement).
     * @param _amount : Amount of claimed NRT rewards by stakers.
     */
    withdrawClaimedNrt(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    StakingMerge(master: string | null, child: string | null): EventFilter;

    StakingSplit(master: string | null, child: string | null): EventFilter;

    StakingTransfer(
      from: string | null,
      to: string | null,
      staking: string | null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Admin mode status
     */
    adminMode(overrides?: CallOverrides): Promise<BigNumber>;

    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Deactivates admin mode forever.
     */
    deactivateAdminMode(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Used by staking contracts when need to topup, split, merge, issTime and destroy.
     * Decreases active stakings for a range of months.
     * @param _amount : Amount to decrease.
     * @param _endMonth : Month upto which decreasing should be done
     * @param _startMonth : Month from which decreasing should be done
     */
    decreaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Default months for stakings.
     */
    defaultMonths(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Called by any valid staking contract when it splits.
     * Emits a StakingMerge event.
     * @param _childStaking : Address of new staking contract created my master staking.
     */
    emitStakingMerge(
      _childStaking: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Called by any valid staking contract when it transfers ownership.
     * Emits a StakingTransfer event.
     * @param _newOwner : Address of receiver.
     * @param _oldOwner : Address of sender.
     */
    emitStakingTransfer(
      _oldOwner: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalActiveStaking(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Used by staking contracts when need to topup, split, merge, issTime and destroy.
     * Increases active stakings for a range of months.
     * @param _amount : Amount to increase.
     * @param _endMonth : Month upto which increasing should be done
     * @param _startMonth : Month from which increasing should be done
     */
    increaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * An address once a valid staking contract, is no longer a valid one if it is destroyed.
     * Checks if a given address is a valid and active staking contract.
     * @param _stakingContract : An address to check.
     */
    isStakingContractValid(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Used for creating a staking using prepaid ES
     * Called by Prepaid contract then transfer done to this contract.
     * @param _sender : The msg.sender in prepaid contract's transfer method.
     * @param _value : Amount of prepaid ES tokens transferred.
     */
    prepaidFallback(
      _sender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Called by staking contract when withdrawing monthly reward.
     * Processes NRT reward to the staker.
     * @param _reward : Amount of reward to be processed.
     * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
     */
    processNrtReward(
      _reward: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Removes the staking from valid staking.
     * @param _owner : Address of owner (for emiting the event).
     */
    removeStaking(_owner: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Used in admin mode to send initial stakings.
     * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
     * @param _initialIssTime : IssTime Limit to be given initially.
     * @param _receiver : Address of receipent of the staking contract.
     */
    sendStake(
      _receiver: string,
      _initialIssTime: BigNumberish,
      _claimedMonths: boolean[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setInitialValues(overrides?: Overrides): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    setStakingTarget(
      _stakingTarget: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Creates the child contract when spliting a staking, updates active stakings and emits event
     * @param _initialIssTime : IssTime Limit that is being passed while split.
     * @param _masterEndMonth : Extension end month of master staking for adjusting the total active stakings.
     * @param _owner : Owner of the master staking, is set as owner of the new staking that is created.
     */
    splitStaking(
      _owner: string,
      _initialIssTime: BigNumberish,
      _masterEndMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Deploys a new staking contract with value sent.
     */
    stake(overrides?: PayableOverrides): Promise<BigNumber>;

    stakingTarget(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraws the NRT rewards claimed by stakers (to process native token replacement).
     * @param _amount : Amount of claimed NRT rewards by stakers.
     */
    withdrawClaimedNrt(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Admin mode status
     */
    adminMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Deactivates admin mode forever.
     */
    deactivateAdminMode(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Used by staking contracts when need to topup, split, merge, issTime and destroy.
     * Decreases active stakings for a range of months.
     * @param _amount : Amount to decrease.
     * @param _endMonth : Month upto which decreasing should be done
     * @param _startMonth : Month from which decreasing should be done
     */
    decreaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Default months for stakings.
     */
    defaultMonths(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Called by any valid staking contract when it splits.
     * Emits a StakingMerge event.
     * @param _childStaking : Address of new staking contract created my master staking.
     */
    emitStakingMerge(
      _childStaking: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Called by any valid staking contract when it transfers ownership.
     * Emits a StakingTransfer event.
     * @param _newOwner : Address of receiver.
     * @param _oldOwner : Address of sender.
     */
    emitStakingTransfer(
      _oldOwner: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalActiveStaking(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Used by staking contracts when need to topup, split, merge, issTime and destroy.
     * Increases active stakings for a range of months.
     * @param _amount : Amount to increase.
     * @param _endMonth : Month upto which increasing should be done
     * @param _startMonth : Month from which increasing should be done
     */
    increaseActiveStaking(
      _amount: BigNumberish,
      _startMonth: BigNumberish,
      _endMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * An address once a valid staking contract, is no longer a valid one if it is destroyed.
     * Checks if a given address is a valid and active staking contract.
     * @param _stakingContract : An address to check.
     */
    isStakingContractValid(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Used for creating a staking using prepaid ES
     * Called by Prepaid contract then transfer done to this contract.
     * @param _sender : The msg.sender in prepaid contract's transfer method.
     * @param _value : Amount of prepaid ES tokens transferred.
     */
    prepaidFallback(
      _sender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Called by staking contract when withdrawing monthly reward.
     * Processes NRT reward to the staker.
     * @param _reward : Amount of reward to be processed.
     * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
     */
    processNrtReward(
      _reward: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Removes the staking from valid staking.
     * @param _owner : Address of owner (for emiting the event).
     */
    removeStaking(
      _owner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Used in admin mode to send initial stakings.
     * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
     * @param _initialIssTime : IssTime Limit to be given initially.
     * @param _receiver : Address of receipent of the staking contract.
     */
    sendStake(
      _receiver: string,
      _initialIssTime: BigNumberish,
      _claimedMonths: boolean[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setInitialValues(overrides?: Overrides): Promise<PopulatedTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStakingTarget(
      _stakingTarget: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Creates the child contract when spliting a staking, updates active stakings and emits event
     * @param _initialIssTime : IssTime Limit that is being passed while split.
     * @param _masterEndMonth : Extension end month of master staking for adjusting the total active stakings.
     * @param _owner : Owner of the master staking, is set as owner of the new staking that is created.
     */
    splitStaking(
      _owner: string,
      _initialIssTime: BigNumberish,
      _masterEndMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Deploys a new staking contract with value sent.
     */
    stake(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    stakingTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Withdraws the NRT rewards claimed by stakers (to process native token replacement).
     * @param _amount : Amount of claimed NRT rewards by stakers.
     */
    withdrawClaimedNrt(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
