/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PetLiquidTimeAllyPetInterface extends ethers.utils.Interface {
  functions: {
    "appointeeVote(address,uint256)": FunctionFragment;
    "calculatePowerBoosterAmount(address,uint256)": FunctionFragment;
    "createPETPlan(uint256,uint256)": FunctionFragment;
    "deployer()": FunctionFragment;
    "fundsBucket()": FunctionFragment;
    "getDepositMonth(address,uint256)": FunctionFragment;
    "getMonthlyDepositedAmount(address,uint256,uint256)": FunctionFragment;
    "getNomineeAllowedTimestamp(address,uint256,uint256)": FunctionFragment;
    "getSumOfMonthlyAnnuity(address,uint256,uint256,uint256)": FunctionFragment;
    "isAdminMode()": FunctionFragment;
    "makeDeposit(address,uint256,uint256,bool)": FunctionFragment;
    "makeFrequencyModeDeposit(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "migrateDeposit(address,uint256,uint256,bool,uint256)": FunctionFragment;
    "migratePET(uint256,uint256,uint256)": FunctionFragment;
    "newPET(uint256,uint256)": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "petPlans(uint256)": FunctionFragment;
    "pets(address,uint256)": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "renounceAdminMode()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "toogleAppointee(uint256,address,bool)": FunctionFragment;
    "toogleNominee(uint256,address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePlanStatus(uint256,bool)": FunctionFragment;
    "viewAppointation(address,uint256,address)": FunctionFragment;
    "viewNomination(address,uint256,address)": FunctionFragment;
    "withdrawAnnuity(address,uint256,uint256)": FunctionFragment;
    "withdrawPowerBooster(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "appointeeVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePowerBoosterAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPETPlan",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundsBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositMonth",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMonthlyDepositedAmount",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNomineeAllowedTimestamp",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSumOfMonthlyAnnuity",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdminMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeDeposit",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "makeFrequencyModeDeposit",
    values: [string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateDeposit",
    values: [string, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migratePET",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newPET",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "petPlans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceAdminMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toogleAppointee",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toogleNominee",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAppointation",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewNomination",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAnnuity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPowerBooster",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "appointeeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePowerBoosterAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPETPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundsBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMonthlyDepositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNomineeAllowedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSumOfMonthlyAnnuity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAdminMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeFrequencyModeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migratePET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newPET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "petPlans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdminMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toogleAppointee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toogleNominee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAppointation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAnnuity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPowerBooster",
    data: BytesLike
  ): Result;

  events: {
    "AnnuityWithdrawl(address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "AppointeeUpdated(address,uint256,address,bool)": EventFragment;
    "AppointeeVoted(address,uint256,address)": EventFragment;
    "BoosterBurn(address,uint256,uint256)": EventFragment;
    "NewDeposit(address,uint256,uint256,uint256,address,bool)": EventFragment;
    "NewPET(address,uint256,uint256)": EventFragment;
    "NewPETPlan(uint256,uint256,uint256)": EventFragment;
    "NomineeUpdated(address,uint256,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PowerBoosterWithdrawl(address,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnnuityWithdrawl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppointeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppointeeVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoosterBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPET"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPETPlan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NomineeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowerBoosterWithdrawl"): EventFragment;
}

export class PetLiquidTimeAllyPet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PetLiquidTimeAllyPetInterface;

  functions: {
    /**
     * need to be appointee, set by staker themselves
     * this function is used by appointee to vote that nominees can withdraw early
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    appointeeVote(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * calculating power booster amount
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    calculatePowerBoosterAmount(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * this function is used by deployer to create plans for new PETs
     * @param _minimumMonthlyCommitmentAmount : minimum PET monthly amount in exaES
     * @param _monthlyBenefitFactorPerThousand : this is per 1000; i.e 200 for 20%
     */
    createPETPlan(
      _minimumMonthlyCommitmentAmount: BigNumberish,
      _monthlyBenefitFactorPerThousand: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * address storage of the deployer
     */
    deployer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * address storage of fundsBucket from which tokens to be pulled for giving benefits
     */
    fundsBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * this function is used to get the current month of a PET
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    getDepositMonth(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * this function is used to retrive monthly deposit in a PET
     * @param _monthId : specify the month to deposit
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    getMonthlyDepositedAmount(
      _stakerAddress: string,
      _petId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * this function is used by contract to get nominee's allowed timestamp
     * @param _annuityMonthId : this is the month for which timestamp to find
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     */
    getNomineeAllowedTimestamp(
      _stakerAddress: string,
      _petId: BigNumberish,
      _annuityMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * this function is used to get total annuity benefits between two months
     * @param _endAnnuityMonthId : this is the month (inclusive) to stop at
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _startAnnuityMonthId : this is the month (inclusive) to start from
     */
    getSumOfMonthlyAnnuity(
      _stakerAddress: string,
      _petId: BigNumberish,
      _startAnnuityMonthId: BigNumberish,
      _endAnnuityMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isAdminMode(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * ERC20 approve is required to be done for this contract earlier if prepaidES   is not selected, enough funds must be there in the funds bucket contract   and also deposit can be done by nominee
     * this function is used by stakers to make deposits to their PETs
     * @param _depositAmount : amount to deposit
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _usePrepaidES : should prepaidES be used
     */
    makeDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _depositAmount: BigNumberish,
      _usePrepaidES: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * lum sum deposit is possible in the first month in a fresh PET
     * this function is used by stakers to make lum sum deposit
     * @param _frequencyMode : can be 3, 6 or 12
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _totalDepositAmount : total amount to deposit for 12 months
     * @param _usePrepaidES : should prepaidES be used
     */
    makeFrequencyModeDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _totalDepositAmount: BigNumberish,
      _frequencyMode: BigNumberish,
      _usePrepaidES: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    migrateDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _depositAmount: BigNumberish,
      _usePrepaidES: boolean,
      _depositMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    migratePET(
      _planId: BigNumberish,
      _monthlyCommitmentAmount: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is used by anyone to create a new PET
     * @param _monthlyCommitmentAmount : PET monthly commitment amount in exaES
     * @param _planId : id of PET in staker portfolio
     */
    newPET(
      _planId: BigNumberish,
      _monthlyCommitmentAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * storage for multiple PET plans
     */
    petPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isPlanActive: boolean;
      minimumMonthlyCommitmentAmount: BigNumber;
      monthlyBenefitFactorPerThousand: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    /**
     * storage for PETs deployed by stakers
     */
    pets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      planId: BigNumber;
      monthlyCommitmentAmount: BigNumber;
      initTimestamp: BigNumber;
      lastAnnuityWithdrawlMonthId: BigNumber;
      appointeeVotes: BigNumber;
      numberOfAppointees: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    /**
     * address storage of Era Swap Token ERC20 Smart Contract
     */
    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceAdminMode(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    /**
     * this function is used to update appointee status of a wallet address in PET
     * @param _appointeeAddress : eth wallet address of appointee.
     * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
     * @param _petId : id of PET in staker portfolio.
     */
    toogleAppointee(
      _petId: BigNumberish,
      _appointeeAddress: string,
      _newAppointeeStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is used to update nominee status of a wallet address in PET
     * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _petId : id of PET in staker portfolio.
     */
    toogleNominee(
      _petId: BigNumberish,
      _nomineeAddress: string,
      _newNomineeStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * pets already initiated by a plan will continue only new will be restricted
     * this function is used by deployer to disable or re-enable a pet plan
     * @param _newStatus : true or false.
     * @param _planId : select a plan to make it inactive
     */
    updatePlanStatus(
      _planId: BigNumberish,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is used to view appointation
     * @param _appointeeAddress : eth wallet address of apointee.
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    viewAppointation(
      _stakerAddress: string,
      _petId: BigNumberish,
      _appointeeAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * this function is used to view nomination
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    viewNomination(
      _stakerAddress: string,
      _petId: BigNumberish,
      _nomineeAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * this function is used to withdraw annuity benefits
     * @param _endAnnuityMonthId : this is the month upto which benefits to be withdrawn
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     */
    withdrawAnnuity(
      _stakerAddress: string,
      _petId: BigNumberish,
      _endAnnuityMonthId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is used by staker to withdraw power booster
     * @param _petId : id of PET in staker address portfolio
     * @param _powerBoosterId : this is serial of power booster
     * @param _stakerAddress : address of staker who has a PET
     */
    withdrawPowerBooster(
      _stakerAddress: string,
      _petId: BigNumberish,
      _powerBoosterId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * need to be appointee, set by staker themselves
   * this function is used by appointee to vote that nominees can withdraw early
   * @param _petId : id of PET in staker portfolio.
   * @param _stakerAddress : address of initiater of this PET.
   */
  appointeeVote(
    _stakerAddress: string,
    _petId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * calculating power booster amount
   * @param _petId : id of PET in staket address portfolio
   * @param _stakerAddress : address of staker who has PET
   */
  calculatePowerBoosterAmount(
    _stakerAddress: string,
    _petId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * this function is used by deployer to create plans for new PETs
   * @param _minimumMonthlyCommitmentAmount : minimum PET monthly amount in exaES
   * @param _monthlyBenefitFactorPerThousand : this is per 1000; i.e 200 for 20%
   */
  createPETPlan(
    _minimumMonthlyCommitmentAmount: BigNumberish,
    _monthlyBenefitFactorPerThousand: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * address storage of the deployer
   */
  deployer(overrides?: CallOverrides): Promise<string>;

  /**
   * address storage of fundsBucket from which tokens to be pulled for giving benefits
   */
  fundsBucket(overrides?: CallOverrides): Promise<string>;

  /**
   * this function is used to get the current month of a PET
   * @param _petId : id of PET in staket address portfolio
   * @param _stakerAddress : address of staker who has PET
   */
  getDepositMonth(
    _stakerAddress: string,
    _petId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * this function is used to retrive monthly deposit in a PET
   * @param _monthId : specify the month to deposit
   * @param _petId : id of PET in staket address portfolio
   * @param _stakerAddress : address of staker who has PET
   */
  getMonthlyDepositedAmount(
    _stakerAddress: string,
    _petId: BigNumberish,
    _monthId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * this function is used by contract to get nominee's allowed timestamp
   * @param _annuityMonthId : this is the month for which timestamp to find
   * @param _petId : id of PET in staker address portfolio
   * @param _stakerAddress : address of staker who has a PET
   */
  getNomineeAllowedTimestamp(
    _stakerAddress: string,
    _petId: BigNumberish,
    _annuityMonthId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * this function is used to get total annuity benefits between two months
   * @param _endAnnuityMonthId : this is the month (inclusive) to stop at
   * @param _petId : id of PET in staker address portfolio
   * @param _stakerAddress : address of staker who has a PET
   * @param _startAnnuityMonthId : this is the month (inclusive) to start from
   */
  getSumOfMonthlyAnnuity(
    _stakerAddress: string,
    _petId: BigNumberish,
    _startAnnuityMonthId: BigNumberish,
    _endAnnuityMonthId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAdminMode(overrides?: CallOverrides): Promise<boolean>;

  /**
   * ERC20 approve is required to be done for this contract earlier if prepaidES   is not selected, enough funds must be there in the funds bucket contract   and also deposit can be done by nominee
   * this function is used by stakers to make deposits to their PETs
   * @param _depositAmount : amount to deposit
   * @param _petId : id of PET in staker address portfolio
   * @param _stakerAddress : address of staker who has a PET
   * @param _usePrepaidES : should prepaidES be used
   */
  makeDeposit(
    _stakerAddress: string,
    _petId: BigNumberish,
    _depositAmount: BigNumberish,
    _usePrepaidES: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * lum sum deposit is possible in the first month in a fresh PET
   * this function is used by stakers to make lum sum deposit
   * @param _frequencyMode : can be 3, 6 or 12
   * @param _petId : id of PET in staker address portfolio
   * @param _stakerAddress : address of staker who has a PET
   * @param _totalDepositAmount : total amount to deposit for 12 months
   * @param _usePrepaidES : should prepaidES be used
   */
  makeFrequencyModeDeposit(
    _stakerAddress: string,
    _petId: BigNumberish,
    _totalDepositAmount: BigNumberish,
    _frequencyMode: BigNumberish,
    _usePrepaidES: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  migrateDeposit(
    _stakerAddress: string,
    _petId: BigNumberish,
    _depositAmount: BigNumberish,
    _usePrepaidES: boolean,
    _depositMonth: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  migratePET(
    _planId: BigNumberish,
    _monthlyCommitmentAmount: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is used by anyone to create a new PET
   * @param _monthlyCommitmentAmount : PET monthly commitment amount in exaES
   * @param _planId : id of PET in staker portfolio
   */
  newPET(
    _planId: BigNumberish,
    _monthlyCommitmentAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * storage for multiple PET plans
   */
  petPlans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    isPlanActive: boolean;
    minimumMonthlyCommitmentAmount: BigNumber;
    monthlyBenefitFactorPerThousand: BigNumber;
    0: boolean;
    1: BigNumber;
    2: BigNumber;
  }>;

  /**
   * storage for PETs deployed by stakers
   */
  pets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    planId: BigNumber;
    monthlyCommitmentAmount: BigNumber;
    initTimestamp: BigNumber;
    lastAnnuityWithdrawlMonthId: BigNumber;
    appointeeVotes: BigNumber;
    numberOfAppointees: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  /**
   * address storage of Era Swap Token ERC20 Smart Contract
   */
  prepaidEs(overrides?: CallOverrides): Promise<string>;

  renounceAdminMode(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  /**
   * this function is used to update appointee status of a wallet address in PET
   * @param _appointeeAddress : eth wallet address of appointee.
   * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
   * @param _petId : id of PET in staker portfolio.
   */
  toogleAppointee(
    _petId: BigNumberish,
    _appointeeAddress: string,
    _newAppointeeStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is used to update nominee status of a wallet address in PET
   * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
   * @param _nomineeAddress : eth wallet address of nominee.
   * @param _petId : id of PET in staker portfolio.
   */
  toogleNominee(
    _petId: BigNumberish,
    _nomineeAddress: string,
    _newNomineeStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * pets already initiated by a plan will continue only new will be restricted
   * this function is used by deployer to disable or re-enable a pet plan
   * @param _newStatus : true or false.
   * @param _planId : select a plan to make it inactive
   */
  updatePlanStatus(
    _planId: BigNumberish,
    _newStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is used to view appointation
   * @param _appointeeAddress : eth wallet address of apointee.
   * @param _petId : id of PET in staker portfolio.
   * @param _stakerAddress : address of initiater of this PET.
   */
  viewAppointation(
    _stakerAddress: string,
    _petId: BigNumberish,
    _appointeeAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * this function is used to view nomination
   * @param _nomineeAddress : eth wallet address of nominee.
   * @param _petId : id of PET in staker portfolio.
   * @param _stakerAddress : address of initiater of this PET.
   */
  viewNomination(
    _stakerAddress: string,
    _petId: BigNumberish,
    _nomineeAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * this function is used to withdraw annuity benefits
   * @param _endAnnuityMonthId : this is the month upto which benefits to be withdrawn
   * @param _petId : id of PET in staker address portfolio
   * @param _stakerAddress : address of staker who has a PET
   */
  withdrawAnnuity(
    _stakerAddress: string,
    _petId: BigNumberish,
    _endAnnuityMonthId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is used by staker to withdraw power booster
   * @param _petId : id of PET in staker address portfolio
   * @param _powerBoosterId : this is serial of power booster
   * @param _stakerAddress : address of staker who has a PET
   */
  withdrawPowerBooster(
    _stakerAddress: string,
    _petId: BigNumberish,
    _powerBoosterId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * need to be appointee, set by staker themselves
     * this function is used by appointee to vote that nominees can withdraw early
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    appointeeVote(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * calculating power booster amount
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    calculatePowerBoosterAmount(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used by deployer to create plans for new PETs
     * @param _minimumMonthlyCommitmentAmount : minimum PET monthly amount in exaES
     * @param _monthlyBenefitFactorPerThousand : this is per 1000; i.e 200 for 20%
     */
    createPETPlan(
      _minimumMonthlyCommitmentAmount: BigNumberish,
      _monthlyBenefitFactorPerThousand: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * address storage of the deployer
     */
    deployer(overrides?: CallOverrides): Promise<string>;

    /**
     * address storage of fundsBucket from which tokens to be pulled for giving benefits
     */
    fundsBucket(overrides?: CallOverrides): Promise<string>;

    /**
     * this function is used to get the current month of a PET
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    getDepositMonth(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to retrive monthly deposit in a PET
     * @param _monthId : specify the month to deposit
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    getMonthlyDepositedAmount(
      _stakerAddress: string,
      _petId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used by contract to get nominee's allowed timestamp
     * @param _annuityMonthId : this is the month for which timestamp to find
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     */
    getNomineeAllowedTimestamp(
      _stakerAddress: string,
      _petId: BigNumberish,
      _annuityMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to get total annuity benefits between two months
     * @param _endAnnuityMonthId : this is the month (inclusive) to stop at
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _startAnnuityMonthId : this is the month (inclusive) to start from
     */
    getSumOfMonthlyAnnuity(
      _stakerAddress: string,
      _petId: BigNumberish,
      _startAnnuityMonthId: BigNumberish,
      _endAnnuityMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdminMode(overrides?: CallOverrides): Promise<boolean>;

    /**
     * ERC20 approve is required to be done for this contract earlier if prepaidES   is not selected, enough funds must be there in the funds bucket contract   and also deposit can be done by nominee
     * this function is used by stakers to make deposits to their PETs
     * @param _depositAmount : amount to deposit
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _usePrepaidES : should prepaidES be used
     */
    makeDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _depositAmount: BigNumberish,
      _usePrepaidES: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * lum sum deposit is possible in the first month in a fresh PET
     * this function is used by stakers to make lum sum deposit
     * @param _frequencyMode : can be 3, 6 or 12
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _totalDepositAmount : total amount to deposit for 12 months
     * @param _usePrepaidES : should prepaidES be used
     */
    makeFrequencyModeDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _totalDepositAmount: BigNumberish,
      _frequencyMode: BigNumberish,
      _usePrepaidES: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _depositAmount: BigNumberish,
      _usePrepaidES: boolean,
      _depositMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migratePET(
      _planId: BigNumberish,
      _monthlyCommitmentAmount: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is used by anyone to create a new PET
     * @param _monthlyCommitmentAmount : PET monthly commitment amount in exaES
     * @param _planId : id of PET in staker portfolio
     */
    newPET(
      _planId: BigNumberish,
      _monthlyCommitmentAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * storage for multiple PET plans
     */
    petPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isPlanActive: boolean;
      minimumMonthlyCommitmentAmount: BigNumber;
      monthlyBenefitFactorPerThousand: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    /**
     * storage for PETs deployed by stakers
     */
    pets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      planId: BigNumber;
      monthlyCommitmentAmount: BigNumber;
      initTimestamp: BigNumber;
      lastAnnuityWithdrawlMonthId: BigNumber;
      appointeeVotes: BigNumber;
      numberOfAppointees: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    /**
     * address storage of Era Swap Token ERC20 Smart Contract
     */
    prepaidEs(overrides?: CallOverrides): Promise<string>;

    renounceAdminMode(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * this function is used to update appointee status of a wallet address in PET
     * @param _appointeeAddress : eth wallet address of appointee.
     * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
     * @param _petId : id of PET in staker portfolio.
     */
    toogleAppointee(
      _petId: BigNumberish,
      _appointeeAddress: string,
      _newAppointeeStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is used to update nominee status of a wallet address in PET
     * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _petId : id of PET in staker portfolio.
     */
    toogleNominee(
      _petId: BigNumberish,
      _nomineeAddress: string,
      _newNomineeStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * pets already initiated by a plan will continue only new will be restricted
     * this function is used by deployer to disable or re-enable a pet plan
     * @param _newStatus : true or false.
     * @param _planId : select a plan to make it inactive
     */
    updatePlanStatus(
      _planId: BigNumberish,
      _newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is used to view appointation
     * @param _appointeeAddress : eth wallet address of apointee.
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    viewAppointation(
      _stakerAddress: string,
      _petId: BigNumberish,
      _appointeeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * this function is used to view nomination
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    viewNomination(
      _stakerAddress: string,
      _petId: BigNumberish,
      _nomineeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * this function is used to withdraw annuity benefits
     * @param _endAnnuityMonthId : this is the month upto which benefits to be withdrawn
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     */
    withdrawAnnuity(
      _stakerAddress: string,
      _petId: BigNumberish,
      _endAnnuityMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is used by staker to withdraw power booster
     * @param _petId : id of PET in staker address portfolio
     * @param _powerBoosterId : this is serial of power booster
     * @param _stakerAddress : address of staker who has a PET
     */
    withdrawPowerBooster(
      _stakerAddress: string,
      _petId: BigNumberish,
      _powerBoosterId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AnnuityWithdrawl(
      _staker: string | null,
      _petId: BigNumberish | null,
      _fromMonthId: null,
      _toMonthId: null,
      _withdrawlAmount: null,
      _withdrawnBy: null
    ): EventFilter;

    AppointeeUpdated(
      _staker: string | null,
      _petId: BigNumberish | null,
      _appointeeAddress: string | null,
      _appointeeStatus: null
    ): EventFilter;

    AppointeeVoted(
      _staker: string | null,
      _petId: BigNumberish | null,
      _appointeeAddress: string | null
    ): EventFilter;

    BoosterBurn(_staker: null, _petId: null, _burningAmount: null): EventFilter;

    NewDeposit(
      _staker: string | null,
      _petId: BigNumberish | null,
      _monthId: null,
      _depositAmount: null,
      _depositedBy: null,
      _usingPrepaidES: null
    ): EventFilter;

    NewPET(
      _staker: string | null,
      _petId: null,
      _monthlyCommitmentAmount: null
    ): EventFilter;

    NewPETPlan(
      _minimumMonthlyCommitmentAmount: null,
      _monthlyBenefitFactorPerThousand: null,
      _petPlanId: null
    ): EventFilter;

    NomineeUpdated(
      _staker: string | null,
      _petId: BigNumberish | null,
      _nomineeAddress: string | null,
      _nomineeStatus: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PowerBoosterWithdrawl(
      _staker: string | null,
      _petId: BigNumberish | null,
      _powerBoosterId: null,
      _withdrawlAmount: null,
      _withdrawnBy: null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * need to be appointee, set by staker themselves
     * this function is used by appointee to vote that nominees can withdraw early
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    appointeeVote(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * calculating power booster amount
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    calculatePowerBoosterAmount(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used by deployer to create plans for new PETs
     * @param _minimumMonthlyCommitmentAmount : minimum PET monthly amount in exaES
     * @param _monthlyBenefitFactorPerThousand : this is per 1000; i.e 200 for 20%
     */
    createPETPlan(
      _minimumMonthlyCommitmentAmount: BigNumberish,
      _monthlyBenefitFactorPerThousand: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * address storage of the deployer
     */
    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * address storage of fundsBucket from which tokens to be pulled for giving benefits
     */
    fundsBucket(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is used to get the current month of a PET
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    getDepositMonth(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to retrive monthly deposit in a PET
     * @param _monthId : specify the month to deposit
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    getMonthlyDepositedAmount(
      _stakerAddress: string,
      _petId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used by contract to get nominee's allowed timestamp
     * @param _annuityMonthId : this is the month for which timestamp to find
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     */
    getNomineeAllowedTimestamp(
      _stakerAddress: string,
      _petId: BigNumberish,
      _annuityMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to get total annuity benefits between two months
     * @param _endAnnuityMonthId : this is the month (inclusive) to stop at
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _startAnnuityMonthId : this is the month (inclusive) to start from
     */
    getSumOfMonthlyAnnuity(
      _stakerAddress: string,
      _petId: BigNumberish,
      _startAnnuityMonthId: BigNumberish,
      _endAnnuityMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdminMode(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * ERC20 approve is required to be done for this contract earlier if prepaidES   is not selected, enough funds must be there in the funds bucket contract   and also deposit can be done by nominee
     * this function is used by stakers to make deposits to their PETs
     * @param _depositAmount : amount to deposit
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _usePrepaidES : should prepaidES be used
     */
    makeDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _depositAmount: BigNumberish,
      _usePrepaidES: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * lum sum deposit is possible in the first month in a fresh PET
     * this function is used by stakers to make lum sum deposit
     * @param _frequencyMode : can be 3, 6 or 12
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _totalDepositAmount : total amount to deposit for 12 months
     * @param _usePrepaidES : should prepaidES be used
     */
    makeFrequencyModeDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _totalDepositAmount: BigNumberish,
      _frequencyMode: BigNumberish,
      _usePrepaidES: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    migrateDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _depositAmount: BigNumberish,
      _usePrepaidES: boolean,
      _depositMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    migratePET(
      _planId: BigNumberish,
      _monthlyCommitmentAmount: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is used by anyone to create a new PET
     * @param _monthlyCommitmentAmount : PET monthly commitment amount in exaES
     * @param _planId : id of PET in staker portfolio
     */
    newPET(
      _planId: BigNumberish,
      _monthlyCommitmentAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * storage for multiple PET plans
     */
    petPlans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * storage for PETs deployed by stakers
     */
    pets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * address storage of Era Swap Token ERC20 Smart Contract
     */
    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    renounceAdminMode(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is used to update appointee status of a wallet address in PET
     * @param _appointeeAddress : eth wallet address of appointee.
     * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
     * @param _petId : id of PET in staker portfolio.
     */
    toogleAppointee(
      _petId: BigNumberish,
      _appointeeAddress: string,
      _newAppointeeStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is used to update nominee status of a wallet address in PET
     * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _petId : id of PET in staker portfolio.
     */
    toogleNominee(
      _petId: BigNumberish,
      _nomineeAddress: string,
      _newNomineeStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * pets already initiated by a plan will continue only new will be restricted
     * this function is used by deployer to disable or re-enable a pet plan
     * @param _newStatus : true or false.
     * @param _planId : select a plan to make it inactive
     */
    updatePlanStatus(
      _planId: BigNumberish,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is used to view appointation
     * @param _appointeeAddress : eth wallet address of apointee.
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    viewAppointation(
      _stakerAddress: string,
      _petId: BigNumberish,
      _appointeeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to view nomination
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    viewNomination(
      _stakerAddress: string,
      _petId: BigNumberish,
      _nomineeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to withdraw annuity benefits
     * @param _endAnnuityMonthId : this is the month upto which benefits to be withdrawn
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     */
    withdrawAnnuity(
      _stakerAddress: string,
      _petId: BigNumberish,
      _endAnnuityMonthId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is used by staker to withdraw power booster
     * @param _petId : id of PET in staker address portfolio
     * @param _powerBoosterId : this is serial of power booster
     * @param _stakerAddress : address of staker who has a PET
     */
    withdrawPowerBooster(
      _stakerAddress: string,
      _petId: BigNumberish,
      _powerBoosterId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * need to be appointee, set by staker themselves
     * this function is used by appointee to vote that nominees can withdraw early
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    appointeeVote(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * calculating power booster amount
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    calculatePowerBoosterAmount(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used by deployer to create plans for new PETs
     * @param _minimumMonthlyCommitmentAmount : minimum PET monthly amount in exaES
     * @param _monthlyBenefitFactorPerThousand : this is per 1000; i.e 200 for 20%
     */
    createPETPlan(
      _minimumMonthlyCommitmentAmount: BigNumberish,
      _monthlyBenefitFactorPerThousand: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * address storage of the deployer
     */
    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * address storage of fundsBucket from which tokens to be pulled for giving benefits
     */
    fundsBucket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function is used to get the current month of a PET
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    getDepositMonth(
      _stakerAddress: string,
      _petId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to retrive monthly deposit in a PET
     * @param _monthId : specify the month to deposit
     * @param _petId : id of PET in staket address portfolio
     * @param _stakerAddress : address of staker who has PET
     */
    getMonthlyDepositedAmount(
      _stakerAddress: string,
      _petId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used by contract to get nominee's allowed timestamp
     * @param _annuityMonthId : this is the month for which timestamp to find
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     */
    getNomineeAllowedTimestamp(
      _stakerAddress: string,
      _petId: BigNumberish,
      _annuityMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to get total annuity benefits between two months
     * @param _endAnnuityMonthId : this is the month (inclusive) to stop at
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _startAnnuityMonthId : this is the month (inclusive) to start from
     */
    getSumOfMonthlyAnnuity(
      _stakerAddress: string,
      _petId: BigNumberish,
      _startAnnuityMonthId: BigNumberish,
      _endAnnuityMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdminMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * ERC20 approve is required to be done for this contract earlier if prepaidES   is not selected, enough funds must be there in the funds bucket contract   and also deposit can be done by nominee
     * this function is used by stakers to make deposits to their PETs
     * @param _depositAmount : amount to deposit
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _usePrepaidES : should prepaidES be used
     */
    makeDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _depositAmount: BigNumberish,
      _usePrepaidES: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * lum sum deposit is possible in the first month in a fresh PET
     * this function is used by stakers to make lum sum deposit
     * @param _frequencyMode : can be 3, 6 or 12
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     * @param _totalDepositAmount : total amount to deposit for 12 months
     * @param _usePrepaidES : should prepaidES be used
     */
    makeFrequencyModeDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _totalDepositAmount: BigNumberish,
      _frequencyMode: BigNumberish,
      _usePrepaidES: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    migrateDeposit(
      _stakerAddress: string,
      _petId: BigNumberish,
      _depositAmount: BigNumberish,
      _usePrepaidES: boolean,
      _depositMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    migratePET(
      _planId: BigNumberish,
      _monthlyCommitmentAmount: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used by anyone to create a new PET
     * @param _monthlyCommitmentAmount : PET monthly commitment amount in exaES
     * @param _planId : id of PET in staker portfolio
     */
    newPET(
      _planId: BigNumberish,
      _monthlyCommitmentAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * storage for multiple PET plans
     */
    petPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * storage for PETs deployed by stakers
     */
    pets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * address storage of Era Swap Token ERC20 Smart Contract
     */
    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceAdminMode(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function is used to update appointee status of a wallet address in PET
     * @param _appointeeAddress : eth wallet address of appointee.
     * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
     * @param _petId : id of PET in staker portfolio.
     */
    toogleAppointee(
      _petId: BigNumberish,
      _appointeeAddress: string,
      _newAppointeeStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to update nominee status of a wallet address in PET
     * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _petId : id of PET in staker portfolio.
     */
    toogleNominee(
      _petId: BigNumberish,
      _nomineeAddress: string,
      _newNomineeStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * pets already initiated by a plan will continue only new will be restricted
     * this function is used by deployer to disable or re-enable a pet plan
     * @param _newStatus : true or false.
     * @param _planId : select a plan to make it inactive
     */
    updatePlanStatus(
      _planId: BigNumberish,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to view appointation
     * @param _appointeeAddress : eth wallet address of apointee.
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    viewAppointation(
      _stakerAddress: string,
      _petId: BigNumberish,
      _appointeeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to view nomination
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _petId : id of PET in staker portfolio.
     * @param _stakerAddress : address of initiater of this PET.
     */
    viewNomination(
      _stakerAddress: string,
      _petId: BigNumberish,
      _nomineeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to withdraw annuity benefits
     * @param _endAnnuityMonthId : this is the month upto which benefits to be withdrawn
     * @param _petId : id of PET in staker address portfolio
     * @param _stakerAddress : address of staker who has a PET
     */
    withdrawAnnuity(
      _stakerAddress: string,
      _petId: BigNumberish,
      _endAnnuityMonthId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used by staker to withdraw power booster
     * @param _petId : id of PET in staker address portfolio
     * @param _powerBoosterId : this is serial of power booster
     * @param _stakerAddress : address of staker who has a PET
     */
    withdrawPowerBooster(
      _stakerAddress: string,
      _petId: BigNumberish,
      _powerBoosterId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
