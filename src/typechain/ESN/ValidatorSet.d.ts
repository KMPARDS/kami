/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface ValidatorSetInterface extends ethers.utils.Interface {
  functions: {
    'BLOCKS_INTERVAL()': FunctionFragment;
    'LUCK_TRIES()': FunctionFragment;
    'MAX_VALIDATORS()': FunctionFragment;
    'PERCENT_UNIQUE()': FunctionFragment;
    'SYSTEM_ADDRESS()': FunctionFragment;
    'finalizeChange()': FunctionFragment;
    'getNextValidators()': FunctionFragment;
    'getValidators()': FunctionFragment;
    'initiateChange()': FunctionFragment;
    'lastFinalizeChangeBlock()': FunctionFragment;
    'setInitialValues(address,uint256,uint256,uint256,uint256)': FunctionFragment;
    'validatorManager()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'BLOCKS_INTERVAL', values?: undefined): string;
  encodeFunctionData(functionFragment: 'LUCK_TRIES', values?: undefined): string;
  encodeFunctionData(functionFragment: 'MAX_VALIDATORS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERCENT_UNIQUE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'SYSTEM_ADDRESS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'finalizeChange', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getNextValidators', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getValidators', values?: undefined): string;
  encodeFunctionData(functionFragment: 'initiateChange', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lastFinalizeChangeBlock', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setInitialValues',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'validatorManager', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'BLOCKS_INTERVAL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'LUCK_TRIES', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'MAX_VALIDATORS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERCENT_UNIQUE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'SYSTEM_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalizeChange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextValidators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initiateChange', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastFinalizeChangeBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInitialValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorManager', data: BytesLike): Result;

  events: {
    'InitiateChange(bytes32,address[])': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'InitiateChange'): EventFragment;
}

export class ValidatorSet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ValidatorSetInterface;

  functions: {
    BLOCKS_INTERVAL(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    LUCK_TRIES(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MAX_VALIDATORS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    PERCENT_UNIQUE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    SYSTEM_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    finalizeChange(overrides?: Overrides): Promise<ContractTransaction>;

    getNextValidators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getValidators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    initiateChange(overrides?: Overrides): Promise<ContractTransaction>;

    lastFinalizeChangeBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setInitialValues(
      _validatorManager: string,
      _MAX_VALIDATORS: BigNumberish,
      _PERCENT_UNIQUE: BigNumberish,
      _LUCK_TRIES: BigNumberish,
      _BLOCKS_INTERVAL: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  BLOCKS_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  LUCK_TRIES(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_UNIQUE(overrides?: CallOverrides): Promise<BigNumber>;

  SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<string>;

  finalizeChange(overrides?: Overrides): Promise<ContractTransaction>;

  getNextValidators(overrides?: CallOverrides): Promise<string[]>;

  getValidators(overrides?: CallOverrides): Promise<string[]>;

  initiateChange(overrides?: Overrides): Promise<ContractTransaction>;

  lastFinalizeChangeBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setInitialValues(
    _validatorManager: string,
    _MAX_VALIDATORS: BigNumberish,
    _PERCENT_UNIQUE: BigNumberish,
    _LUCK_TRIES: BigNumberish,
    _BLOCKS_INTERVAL: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BLOCKS_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    LUCK_TRIES(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_UNIQUE(overrides?: CallOverrides): Promise<BigNumber>;

    SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<string>;

    finalizeChange(overrides?: CallOverrides): Promise<void>;

    getNextValidators(overrides?: CallOverrides): Promise<string[]>;

    getValidators(overrides?: CallOverrides): Promise<string[]>;

    initiateChange(overrides?: CallOverrides): Promise<void>;

    lastFinalizeChangeBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setInitialValues(
      _validatorManager: string,
      _MAX_VALIDATORS: BigNumberish,
      _PERCENT_UNIQUE: BigNumberish,
      _LUCK_TRIES: BigNumberish,
      _BLOCKS_INTERVAL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    InitiateChange(_parent_hash: BytesLike | null, _new_set: null): EventFilter;
  };

  estimateGas: {
    BLOCKS_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    LUCK_TRIES(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_UNIQUE(overrides?: CallOverrides): Promise<BigNumber>;

    SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeChange(overrides?: Overrides): Promise<BigNumber>;

    getNextValidators(overrides?: CallOverrides): Promise<BigNumber>;

    getValidators(overrides?: CallOverrides): Promise<BigNumber>;

    initiateChange(overrides?: Overrides): Promise<BigNumber>;

    lastFinalizeChangeBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setInitialValues(
      _validatorManager: string,
      _MAX_VALIDATORS: BigNumberish,
      _PERCENT_UNIQUE: BigNumberish,
      _LUCK_TRIES: BigNumberish,
      _BLOCKS_INTERVAL: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCKS_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LUCK_TRIES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_VALIDATORS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_UNIQUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeChange(overrides?: Overrides): Promise<PopulatedTransaction>;

    getNextValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateChange(overrides?: Overrides): Promise<PopulatedTransaction>;

    lastFinalizeChangeBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInitialValues(
      _validatorManager: string,
      _MAX_VALIDATORS: BigNumberish,
      _PERCENT_UNIQUE: BigNumberish,
      _LUCK_TRIES: BigNumberish,
      _BLOCKS_INTERVAL: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
