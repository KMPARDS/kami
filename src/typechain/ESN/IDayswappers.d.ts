/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IDayswappersInterface extends ethers.utils.Interface {
  functions: {
    "getBeltIdFromTreeReferrals(uint32)": FunctionFragment;
    "getSeatByAddress(address)": FunctionFragment;
    "getSeatByAddressStrict(address)": FunctionFragment;
    "getSeatByIndex(uint32)": FunctionFragment;
    "getSeatMonthlyDataByAddress(address,uint32)": FunctionFragment;
    "getSeatMonthlyDataByAddressStrict(address,uint32)": FunctionFragment;
    "getSeatMonthlyDataByIndex(uint32,uint32)": FunctionFragment;
    "isActiveAddress(address)": FunctionFragment;
    "isActiveSeat(uint32)": FunctionFragment;
    "join(address)": FunctionFragment;
    "payToIntroducer(address,uint256[3])": FunctionFragment;
    "payToNetworker(address,uint256[3])": FunctionFragment;
    "payToTree(address,uint256[3])": FunctionFragment;
    "promoteBelt(address,uint32)": FunctionFragment;
    "reportVolume(address,uint256)": FunctionFragment;
    "resolveIntroducer(address)": FunctionFragment;
    "resolveKyc(address)": FunctionFragment;
    "rewardToTree(address,uint256,uint256[3])": FunctionFragment;
    "transferSeat(address)": FunctionFragment;
    "withdrawDefiniteEarnings(address,uint32,uint8)": FunctionFragment;
    "withdrawNrtEarnings(address,uint32,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBeltIdFromTreeReferrals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatByAddressStrict",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatMonthlyDataByAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatMonthlyDataByAddressStrict",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatMonthlyDataByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveSeat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "join", values: [string]): string;
  encodeFunctionData(
    functionFragment: "payToIntroducer",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "payToNetworker",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "payToTree",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "promoteBelt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportVolume",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveIntroducer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "resolveKyc", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardToTree",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSeat",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDefiniteEarnings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNrtEarnings",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBeltIdFromTreeReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatByAddressStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatMonthlyDataByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatMonthlyDataByAddressStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatMonthlyDataByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveSeat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payToIntroducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payToNetworker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payToTree", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promoteBelt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveIntroducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolveKyc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSeat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDefiniteEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNrtEarnings",
    data: BytesLike
  ): Result;

  events: {
    "Introduce(uint32,uint32)": EventFragment;
    "Promotion(uint32,uint32)": EventFragment;
    "Reward(address,uint32,uint32,bool,bool,uint256,uint256[3])": EventFragment;
    "SeatTransfer(address,address,uint32)": EventFragment;
    "Volume(address,uint32,uint32,uint256)": EventFragment;
    "Withdraw(uint32,bool,uint8,uint32,uint256[3])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Introduce"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Promotion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeatTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Volume"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class IDayswappers extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IDayswappersInterface;

  functions: {
    getBeltIdFromTreeReferrals(
      treeReferrals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _newBeltIndex: number;
      0: number;
    }>;

    getSeatByAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatByAddressStrict(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatByIndex(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatMonthlyDataByAddress(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    getSeatMonthlyDataByAddressStrict(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    getSeatMonthlyDataByIndex(
      _seatIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    isActiveAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isActiveSeat(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    join(
      _introducer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    payToNetworker(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    promoteBelt(
      _networker: string,
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resolveIntroducer(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveKyc(
      _networker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardToTree(
      _networker: string,
      _value: BigNumberish,
      _rewardRatio: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferSeat(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawDefiniteEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawNrtEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getBeltIdFromTreeReferrals(
    treeReferrals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getSeatByAddress(
    _networker: string,
    overrides?: CallOverrides
  ): Promise<{
    seatIndex: number;
    owner: string;
    kycResolved: boolean;
    incompleteKycResolveSeatIndex: number;
    depth: number;
    introducerSeatIndex: number;
    beltIndex: number;
    0: number;
    1: string;
    2: boolean;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  getSeatByAddressStrict(
    _networker: string,
    overrides?: CallOverrides
  ): Promise<{
    seatIndex: number;
    owner: string;
    kycResolved: boolean;
    incompleteKycResolveSeatIndex: number;
    depth: number;
    introducerSeatIndex: number;
    beltIndex: number;
    0: number;
    1: string;
    2: boolean;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  getSeatByIndex(
    _seatIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    seatIndex: number;
    owner: string;
    kycResolved: boolean;
    incompleteKycResolveSeatIndex: number;
    depth: number;
    introducerSeatIndex: number;
    beltIndex: number;
    0: number;
    1: string;
    2: boolean;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  getSeatMonthlyDataByAddress(
    _networker: string,
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    treeReferrals: number;
    volume: BigNumber;
    definiteEarnings: BigNumber[];
    nrtEarnings: BigNumber[];
    isActive: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber[];
    3: BigNumber[];
    4: boolean;
  }>;

  getSeatMonthlyDataByAddressStrict(
    _networker: string,
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    treeReferrals: number;
    volume: BigNumber;
    definiteEarnings: BigNumber[];
    nrtEarnings: BigNumber[];
    isActive: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber[];
    3: BigNumber[];
    4: boolean;
  }>;

  getSeatMonthlyDataByIndex(
    _seatIndex: BigNumberish,
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    treeReferrals: number;
    volume: BigNumber;
    definiteEarnings: BigNumber[];
    nrtEarnings: BigNumber[];
    isActive: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber[];
    3: BigNumber[];
    4: boolean;
  }>;

  isActiveAddress(
    _networker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActiveSeat(
    _seatIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  join(
    _introducer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  payToIntroducer(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  payToNetworker(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  payToTree(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  promoteBelt(
    _networker: string,
    _month: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reportVolume(
    _networker: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resolveIntroducer(
    _networker: string,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveKyc(
    _networker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardToTree(
    _networker: string,
    _value: BigNumberish,
    _rewardRatio: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferSeat(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawDefiniteEarnings(
    _stakingContract: string,
    _month: BigNumberish,
    _rewardType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawNrtEarnings(
    _stakingContract: string,
    _month: BigNumberish,
    _rewardType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getBeltIdFromTreeReferrals(
      treeReferrals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getSeatByAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatByAddressStrict(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatByIndex(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatMonthlyDataByAddress(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    getSeatMonthlyDataByAddressStrict(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    getSeatMonthlyDataByIndex(
      _seatIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    isActiveAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActiveSeat(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    join(_introducer: string, overrides?: CallOverrides): Promise<void>;

    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    payToNetworker(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    promoteBelt(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveIntroducer(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveKyc(_networker: string, overrides?: CallOverrides): Promise<void>;

    rewardToTree(
      _networker: string,
      _value: BigNumberish,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferSeat(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    withdrawDefiniteEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNrtEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Introduce(
      introducerSeatIndex: BigNumberish | null,
      networkerSeatIndex: BigNumberish | null
    ): EventFilter;

    Promotion(
      seatIndex: BigNumberish | null,
      beltIndex: BigNumberish | null
    ): EventFilter;

    Reward(
      platform: string | null,
      seatIndex: BigNumberish | null,
      month: BigNumberish | null,
      isDefinite: null,
      fromTree: null,
      reward: null,
      rewardRatio: null
    ): EventFilter;

    SeatTransfer(
      from: string | null,
      to: string | null,
      seatIndex: BigNumberish | null
    ): EventFilter;

    Volume(
      platform: string | null,
      seatIndex: BigNumberish | null,
      month: BigNumberish | null,
      amount: null
    ): EventFilter;

    Withdraw(
      seatIndex: BigNumberish | null,
      isDefinite: boolean | null,
      rewardType: null,
      month: null,
      adjustedRewards: null
    ): EventFilter;
  };

  estimateGas: {
    getBeltIdFromTreeReferrals(
      treeReferrals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatByAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatByAddressStrict(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatByIndex(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatMonthlyDataByAddress(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatMonthlyDataByAddressStrict(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatMonthlyDataByIndex(
      _seatIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveSeat(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    join(_introducer: string, overrides?: Overrides): Promise<BigNumber>;

    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    payToNetworker(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    promoteBelt(
      _networker: string,
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resolveIntroducer(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveKyc(_networker: string, overrides?: Overrides): Promise<BigNumber>;

    rewardToTree(
      _networker: string,
      _value: BigNumberish,
      _rewardRatio: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferSeat(_newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    withdrawDefiniteEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawNrtEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBeltIdFromTreeReferrals(
      treeReferrals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatByAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatByAddressStrict(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatByIndex(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatMonthlyDataByAddress(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatMonthlyDataByAddressStrict(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatMonthlyDataByIndex(
      _seatIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveSeat(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    join(
      _introducer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    payToNetworker(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    promoteBelt(
      _networker: string,
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resolveIntroducer(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveKyc(
      _networker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardToTree(
      _networker: string,
      _value: BigNumberish,
      _rewardRatio: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferSeat(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawDefiniteEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawNrtEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
