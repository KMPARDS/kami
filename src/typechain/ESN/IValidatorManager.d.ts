/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IValidatorManagerInterface extends ethers.utils.Interface {
  functions: {
    "getAdjustedAmount(uint256,uint256,uint256)": FunctionFragment;
    "getDelegatorByAddress(uint32,address,address)": FunctionFragment;
    "getDelegatorByIndex(uint32,uint256,uint256)": FunctionFragment;
    "getDelegatorIndex(uint32,uint256,address)": FunctionFragment;
    "getLuckyValidatorAddress()": FunctionFragment;
    "getTotalAdjustedStakings(uint32)": FunctionFragment;
    "getTotalBlocksSealed(uint32)": FunctionFragment;
    "getValidatorByAddress(uint32,address)": FunctionFragment;
    "getValidatorByIndex(uint32,uint256)": FunctionFragment;
    "getValidatorEarning(uint32,address)": FunctionFragment;
    "getValidatorIndex(uint32,address)": FunctionFragment;
    "getValidators(uint32)": FunctionFragment;
    "pickValidator(uint32,uint256)": FunctionFragment;
    "registerBlock(address)": FunctionFragment;
    "registerDelegation(uint32,bytes)": FunctionFragment;
    "setCommission(uint32,uint256)": FunctionFragment;
    "withdrawCommission(uint32)": FunctionFragment;
    "withdrawDelegationShare(uint32,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAdjustedAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorByAddress",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorByIndex",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorIndex",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLuckyValidatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAdjustedStakings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksSealed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorByAddress",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorEarning",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorIndex",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pickValidator",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDelegation",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommission",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCommission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDelegationShare",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAdjustedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLuckyValidatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAdjustedStakings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksSealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorEarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pickValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDelegationShare",
    data: BytesLike
  ): Result;

  events: {};
}

export class IValidatorManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IValidatorManagerInterface;

  functions: {
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      };
    }>;

    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      };
    }>;

    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getLuckyValidatorAddress(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      };
    }>;

    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      };
    }>;

    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      }[];
    }>;

    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    registerBlock(
      _sealer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawCommission(
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAdjustedAmount(
    _amount: BigNumberish,
    _base: BigNumberish,
    _premiumFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDelegatorByAddress(
    _month: BigNumberish,
    _validator: string,
    _stakingContract: string,
    overrides?: CallOverrides
  ): Promise<{
    stakingContract: string;
    amount: BigNumber;
    withdrawn: boolean;
    0: string;
    1: BigNumber;
    2: boolean;
  }>;

  getDelegatorByIndex(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    _delegatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    stakingContract: string;
    amount: BigNumber;
    withdrawn: boolean;
    0: string;
    1: BigNumber;
    2: boolean;
  }>;

  getDelegatorIndex(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    _stakingContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLuckyValidatorAddress(overrides?: Overrides): Promise<ContractTransaction>;

  getTotalAdjustedStakings(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalBlocksSealed(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValidatorByAddress(
    _month: BigNumberish,
    _validator: string,
    overrides?: CallOverrides
  ): Promise<{
    wallet: string;
    amount: BigNumber;
    adjustedAmount: BigNumber;
    perThousandCommission: BigNumber;
    blocksSealed: BigNumber;
    withdrawn: boolean;
    delegators: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
    6: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
  }>;

  getValidatorByIndex(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    wallet: string;
    amount: BigNumber;
    adjustedAmount: BigNumber;
    perThousandCommission: BigNumber;
    blocksSealed: BigNumber;
    withdrawn: boolean;
    delegators: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
    6: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
  }>;

  getValidatorEarning(
    _month: BigNumberish,
    _validator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getValidatorIndex(
    _month: BigNumberish,
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValidators(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      wallet: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blocksSealed: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }[]
  >;

  pickValidator(
    _month: BigNumberish,
    _seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  registerBlock(
    _sealer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerDelegation(
    _month: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCommission(
    _month: BigNumberish,
    _perThousandCommission: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawCommission(
    _month: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawDelegationShare(
    _month: BigNumberish,
    _validator: string,
    _stakingContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLuckyValidatorAddress(overrides?: CallOverrides): Promise<string>;

    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      wallet: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blocksSealed: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }>;

    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      wallet: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blocksSealed: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }>;

    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      }[]
    >;

    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBlock(_sealer: string, overrides?: CallOverrides): Promise<void>;

    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCommission(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLuckyValidatorAddress(overrides?: Overrides): Promise<BigNumber>;

    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerBlock(_sealer: string, overrides?: Overrides): Promise<BigNumber>;

    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawCommission(
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLuckyValidatorAddress(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerBlock(
      _sealer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawCommission(
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
