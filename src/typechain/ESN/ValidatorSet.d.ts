/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ValidatorSetInterface extends ethers.utils.Interface {
  functions: {
    "BLOCKS_INTERVAL()": FunctionFragment;
    "LUCK_TRIES()": FunctionFragment;
    "MAX_VALIDATORS()": FunctionFragment;
    "PERCENT_UNIQUE()": FunctionFragment;
    "SYSTEM_ADDRESS()": FunctionFragment;
    "dayswappers()": FunctionFragment;
    "finalizeChange()": FunctionFragment;
    "getNextValidators()": FunctionFragment;
    "getValidators()": FunctionFragment;
    "initiateChange()": FunctionFragment;
    "kycDapp()": FunctionFragment;
    "lastFinalizeChangeBlock()": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "randomnessManager()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolveAddress(bytes32)": FunctionFragment;
    "resolveUsername(address)": FunctionFragment;
    "resolveUsernameStrict(address)": FunctionFragment;
    "setBlocksInterval(uint256)": FunctionFragment;
    "setInitialValues()": FunctionFragment;
    "setKycDapp(address)": FunctionFragment;
    "setLuckTries(uint256)": FunctionFragment;
    "setMaxValidators(uint256)": FunctionFragment;
    "setPercentUnique(uint256)": FunctionFragment;
    "timeallyClub()": FunctionFragment;
    "timeallyManager()": FunctionFragment;
    "timeallyPromotionalBucket()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validatorManager()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BLOCKS_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LUCK_TRIES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VALIDATORS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_UNIQUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SYSTEM_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dayswappers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateChange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kycDapp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastFinalizeChangeBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomnessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsernameStrict",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlocksInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialValues",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setKycDapp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLuckTries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxValidators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPercentUnique",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyClub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyPromotionalBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCKS_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LUCK_TRIES", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VALIDATORS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_UNIQUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SYSTEM_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayswappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastFinalizeChangeBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomnessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsernameStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlocksInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLuckTries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPercentUnique",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyClub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyPromotionalBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorManager",
    data: BytesLike
  ): Result;

  events: {
    "InitiateChange(bytes32,address[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InitiateChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ValidatorSet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ValidatorSetInterface;

  functions: {
    /**
     * Interval of blocks after which change can be initiated.
     */
    BLOCKS_INTERVAL(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Number of tries to do before settling for a lower length of set.
     */
    LUCK_TRIES(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Maximum validators in a set.
     */
    MAX_VALIDATORS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Amount of unique validators required in the set to prevent duplicates.
     */
    PERCENT_UNIQUE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Address from which system transaction come.
     */
    SYSTEM_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Called by system once existing validators show support by sealing blocks after      the emitted event.
     * Finalizes the change
     */
    finalizeChange(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Gets list of next validators.
     */
    getNextValidators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * Gets list of existing validators.
     */
    getValidators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * Requires delegation in Validator Manager contract else this reverts.
     * Allocates next validators and emits InitiateChange event.
     */
    initiateChange(overrides?: Overrides): Promise<ContractTransaction>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Last block number in which finaliseChange was called by system.         If this is zero means, system is yet to call this method.
     */
    lastFinalizeChangeBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setBlocksInterval(
      _BLOCKS_INTERVAL: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialValues(overrides?: Overrides): Promise<ContractTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLuckTries(
      _LUCK_TRIES: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxValidators(
      _MAX_VALIDATORS: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPercentUnique(
      _PERCENT_UNIQUE: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  /**
   * Interval of blocks after which change can be initiated.
   */
  BLOCKS_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Number of tries to do before settling for a lower length of set.
   */
  LUCK_TRIES(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Maximum validators in a set.
   */
  MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Amount of unique validators required in the set to prevent duplicates.
   */
  PERCENT_UNIQUE(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Address from which system transaction come.
   */
  SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<string>;

  dayswappers(overrides?: CallOverrides): Promise<string>;

  /**
   * Called by system once existing validators show support by sealing blocks after      the emitted event.
   * Finalizes the change
   */
  finalizeChange(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Gets list of next validators.
   */
  getNextValidators(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets list of existing validators.
   */
  getValidators(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Requires delegation in Validator Manager contract else this reverts.
   * Allocates next validators and emits InitiateChange event.
   */
  initiateChange(overrides?: Overrides): Promise<ContractTransaction>;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  /**
   * Last block number in which finaliseChange was called by system.         If this is zero means, system is yet to call this method.
   */
  lastFinalizeChangeBlock(overrides?: CallOverrides): Promise<BigNumber>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  resolveAddress(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  resolveUsernameStrict(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setBlocksInterval(
    _BLOCKS_INTERVAL: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialValues(overrides?: Overrides): Promise<ContractTransaction>;

  setKycDapp(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLuckTries(
    _LUCK_TRIES: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxValidators(
    _MAX_VALIDATORS: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPercentUnique(
    _PERCENT_UNIQUE: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Interval of blocks after which change can be initiated.
     */
    BLOCKS_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Number of tries to do before settling for a lower length of set.
     */
    LUCK_TRIES(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Maximum validators in a set.
     */
    MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Amount of unique validators required in the set to prevent duplicates.
     */
    PERCENT_UNIQUE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Address from which system transaction come.
     */
    SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<string>;

    dayswappers(overrides?: CallOverrides): Promise<string>;

    /**
     * Called by system once existing validators show support by sealing blocks after      the emitted event.
     * Finalizes the change
     */
    finalizeChange(overrides?: CallOverrides): Promise<void>;

    /**
     * Gets list of next validators.
     */
    getNextValidators(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets list of existing validators.
     */
    getValidators(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Requires delegation in Validator Manager contract else this reverts.
     * Allocates next validators and emits InitiateChange event.
     */
    initiateChange(overrides?: CallOverrides): Promise<void>;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    /**
     * Last block number in which finaliseChange was called by system.         If this is zero means, system is yet to call this method.
     */
    lastFinalizeChangeBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setBlocksInterval(
      _BLOCKS_INTERVAL: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialValues(overrides?: CallOverrides): Promise<void>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    setLuckTries(
      _LUCK_TRIES: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxValidators(
      _MAX_VALIDATORS: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPercentUnique(
      _PERCENT_UNIQUE: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    InitiateChange(_parent_hash: BytesLike | null, _new_set: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * Interval of blocks after which change can be initiated.
     */
    BLOCKS_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Number of tries to do before settling for a lower length of set.
     */
    LUCK_TRIES(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Maximum validators in a set.
     */
    MAX_VALIDATORS(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Amount of unique validators required in the set to prevent duplicates.
     */
    PERCENT_UNIQUE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Address from which system transaction come.
     */
    SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Called by system once existing validators show support by sealing blocks after      the emitted event.
     * Finalizes the change
     */
    finalizeChange(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Gets list of next validators.
     */
    getNextValidators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets list of existing validators.
     */
    getValidators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Requires delegation in Validator Manager contract else this reverts.
     * Allocates next validators and emits InitiateChange event.
     */
    initiateChange(overrides?: Overrides): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Last block number in which finaliseChange was called by system.         If this is zero means, system is yet to call this method.
     */
    lastFinalizeChangeBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBlocksInterval(
      _BLOCKS_INTERVAL: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInitialValues(overrides?: Overrides): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    setLuckTries(
      _LUCK_TRIES: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxValidators(
      _MAX_VALIDATORS: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPercentUnique(
      _PERCENT_UNIQUE: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Interval of blocks after which change can be initiated.
     */
    BLOCKS_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Number of tries to do before settling for a lower length of set.
     */
    LUCK_TRIES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Maximum validators in a set.
     */
    MAX_VALIDATORS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Amount of unique validators required in the set to prevent duplicates.
     */
    PERCENT_UNIQUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Address from which system transaction come.
     */
    SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Called by system once existing validators show support by sealing blocks after      the emitted event.
     * Finalizes the change
     */
    finalizeChange(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Gets list of next validators.
     */
    getNextValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets list of existing validators.
     */
    getValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Requires delegation in Validator Manager contract else this reverts.
     * Allocates next validators and emits InitiateChange event.
     */
    initiateChange(overrides?: Overrides): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Last block number in which finaliseChange was called by system.         If this is zero means, system is yet to call this method.
     */
    lastFinalizeChangeBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBlocksInterval(
      _BLOCKS_INTERVAL: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialValues(overrides?: Overrides): Promise<PopulatedTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLuckTries(
      _LUCK_TRIES: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxValidators(
      _MAX_VALIDATORS: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPercentUnique(
      _PERCENT_UNIQUE: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
