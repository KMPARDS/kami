/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface TimeAllyManagerInterface extends ethers.utils.Interface {
  functions: {
    'addStakingPlan(uint256,uint256,bool)': FunctionFragment;
    'deployer()': FunctionFragment;
    'getStakingPlan(uint256)': FunctionFragment;
    'getStakingPlans()': FunctionFragment;
    'getTimeAllyMonthlyNRT(uint256)': FunctionFragment;
    'getTotalActiveStaking(uint256)': FunctionFragment;
    'increaseActiveStaking(uint256,uint256)': FunctionFragment;
    'isStakingContractValid(address)': FunctionFragment;
    'nrtManager()': FunctionFragment;
    'setInitialValues(address,address)': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'validatorManager()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addStakingPlan',
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: 'deployer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStakingPlan', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getStakingPlans', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTimeAllyMonthlyNRT', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTotalActiveStaking', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'increaseActiveStaking',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'isStakingContractValid', values: [string]): string;
  encodeFunctionData(functionFragment: 'nrtManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setInitialValues', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'validatorManager', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addStakingPlan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakingPlan', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakingPlans', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTimeAllyMonthlyNRT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalActiveStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'increaseActiveStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isStakingContractValid', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nrtManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInitialValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorManager', data: BytesLike): Result;

  events: {
    'NewStaking(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewStaking'): EventFragment;
}

export class TimeAllyManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TimeAllyManagerInterface;

  functions: {
    addStakingPlan(
      _months: BigNumberish,
      _fractionFrom15: BigNumberish,
      _estMode: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getStakingPlan(
      _stakingPlanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        months: BigNumber;
        fractionFrom15: BigNumber;
        estMode: boolean;
        0: BigNumber;
        1: BigNumber;
        2: boolean;
      };
    }>;

    getStakingPlans(
      overrides?: CallOverrides
    ): Promise<{
      0: {
        months: BigNumber;
        fractionFrom15: BigNumber;
        estMode: boolean;
        0: BigNumber;
        1: BigNumber;
        2: boolean;
      }[];
    }>;

    getTimeAllyMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalActiveStaking(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    increaseActiveStaking(
      _amount: BigNumberish,
      _uptoMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isStakingContractValid(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setInitialValues(
      _nrtAddress: string,
      _validatorManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(_planId: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  addStakingPlan(
    _months: BigNumberish,
    _fractionFrom15: BigNumberish,
    _estMode: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployer(overrides?: CallOverrides): Promise<string>;

  getStakingPlan(
    _stakingPlanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    months: BigNumber;
    fractionFrom15: BigNumber;
    estMode: boolean;
    0: BigNumber;
    1: BigNumber;
    2: boolean;
  }>;

  getStakingPlans(
    overrides?: CallOverrides
  ): Promise<
    {
      months: BigNumber;
      fractionFrom15: BigNumber;
      estMode: boolean;
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }[]
  >;

  getTimeAllyMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalActiveStaking(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  increaseActiveStaking(
    _amount: BigNumberish,
    _uptoMonth: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isStakingContractValid(_stakingContract: string, overrides?: CallOverrides): Promise<boolean>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  setInitialValues(
    _nrtAddress: string,
    _validatorManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(_planId: BigNumberish, overrides?: PayableOverrides): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addStakingPlan(
      _months: BigNumberish,
      _fractionFrom15: BigNumberish,
      _estMode: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deployer(overrides?: CallOverrides): Promise<string>;

    getStakingPlan(
      _stakingPlanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      months: BigNumber;
      fractionFrom15: BigNumber;
      estMode: boolean;
      0: BigNumber;
      1: BigNumber;
      2: boolean;
    }>;

    getStakingPlans(
      overrides?: CallOverrides
    ): Promise<
      {
        months: BigNumber;
        fractionFrom15: BigNumber;
        estMode: boolean;
        0: BigNumber;
        1: BigNumber;
        2: boolean;
      }[]
    >;

    getTimeAllyMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalActiveStaking(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseActiveStaking(
      _amount: BigNumberish,
      _uptoMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isStakingContractValid(_stakingContract: string, overrides?: CallOverrides): Promise<boolean>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    setInitialValues(
      _nrtAddress: string,
      _validatorManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_planId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    NewStaking(staker: string | null, staking: string | null): EventFilter;
  };

  estimateGas: {
    addStakingPlan(
      _months: BigNumberish,
      _fractionFrom15: BigNumberish,
      _estMode: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingPlan(_stakingPlanId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getStakingPlans(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeAllyMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalActiveStaking(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    increaseActiveStaking(
      _amount: BigNumberish,
      _uptoMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isStakingContractValid(_stakingContract: string, overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    setInitialValues(
      _nrtAddress: string,
      _validatorManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(_planId: BigNumberish, overrides?: PayableOverrides): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addStakingPlan(
      _months: BigNumberish,
      _fractionFrom15: BigNumberish,
      _estMode: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingPlan(
      _stakingPlanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingPlans(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimeAllyMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalActiveStaking(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseActiveStaking(
      _amount: BigNumberish,
      _uptoMonth: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isStakingContractValid(
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInitialValues(
      _nrtAddress: string,
      _validatorManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(_planId: BigNumberish, overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
