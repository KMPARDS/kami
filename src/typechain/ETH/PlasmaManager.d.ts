/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PlasmaManagerInterface extends ethers.utils.Interface {
  functions: {
    "getAllValidators()": FunctionFragment;
    "getBunchHeader(uint256)": FunctionFragment;
    "getNextStartBlockNumber()": FunctionFragment;
    "getValidator(uint256)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "lastBunchIndex()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setInitialValidators(address[])": FunctionFragment;
    "submitBunchHeader(uint256,uint256,bytes32,bytes32,bytes32,bytes[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBunchHeader",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextStartBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastBunchIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialValidators",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBunchHeader",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBunchHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextStartBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBunchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitBunchHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NewBunchHeader(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewBunchHeader"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class PlasmaManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PlasmaManagerInterface;

  functions: {
    getAllValidators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * Gets finalized bunch headers by index.
     * @param _bunchIndex : Index of the bunch.
     */
    getBunchHeader(
      _bunchIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startBlockNumber: BigNumber;
        bunchDepth: BigNumber;
        transactionsMegaRoot: string;
        receiptsMegaRoot: string;
        lastBlockHash: string;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string;
      };
    }>;

    /**
     * Gets the start block number after last bunch.
     */
    getNextStartBlockNumber(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Gets index of last bunch header from bunch header list.
     */
    lastBunchIndex(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    setInitialValidators(
      _validators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows anyone to submit a signed bunch header.
     * @param _bunchDepth : Depth of the bunch
     * @param _lastBlockHash : Hash of the last block in this bunch for checkpoint purpose
     * @param _rcMRoot : Receipts mega root of the blocks in the bunch
     * @param _sigs : Array of sigs
     * @param _startBlockNumber : Start block number in the bunch
     * @param _txMRoot : Tx mega root of the blocks in the bunch
     */
    submitBunchHeader(
      _startBlockNumber: BigNumberish,
      _bunchDepth: BigNumberish,
      _txMRoot: BytesLike,
      _rcMRoot: BytesLike,
      _lastBlockHash: BytesLike,
      _sigs: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAllValidators(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets finalized bunch headers by index.
   * @param _bunchIndex : Index of the bunch.
   */
  getBunchHeader(
    _bunchIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startBlockNumber: BigNumber;
    bunchDepth: BigNumber;
    transactionsMegaRoot: string;
    receiptsMegaRoot: string;
    lastBlockHash: string;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string;
  }>;

  /**
   * Gets the start block number after last bunch.
   */
  getNextStartBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getValidator(
    _validatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidator(_validator: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Gets index of last bunch header from bunch header list.
   */
  lastBunchIndex(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  setInitialValidators(
    _validators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows anyone to submit a signed bunch header.
   * @param _bunchDepth : Depth of the bunch
   * @param _lastBlockHash : Hash of the last block in this bunch for checkpoint purpose
   * @param _rcMRoot : Receipts mega root of the blocks in the bunch
   * @param _sigs : Array of sigs
   * @param _startBlockNumber : Start block number in the bunch
   * @param _txMRoot : Tx mega root of the blocks in the bunch
   */
  submitBunchHeader(
    _startBlockNumber: BigNumberish,
    _bunchDepth: BigNumberish,
    _txMRoot: BytesLike,
    _rcMRoot: BytesLike,
    _lastBlockHash: BytesLike,
    _sigs: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllValidators(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets finalized bunch headers by index.
     * @param _bunchIndex : Index of the bunch.
     */
    getBunchHeader(
      _bunchIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startBlockNumber: BigNumber;
      bunchDepth: BigNumber;
      transactionsMegaRoot: string;
      receiptsMegaRoot: string;
      lastBlockHash: string;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string;
    }>;

    /**
     * Gets the start block number after last bunch.
     */
    getNextStartBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets index of last bunch header from bunch header list.
     */
    lastBunchIndex(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setInitialValidators(
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows anyone to submit a signed bunch header.
     * @param _bunchDepth : Depth of the bunch
     * @param _lastBlockHash : Hash of the last block in this bunch for checkpoint purpose
     * @param _rcMRoot : Receipts mega root of the blocks in the bunch
     * @param _sigs : Array of sigs
     * @param _startBlockNumber : Start block number in the bunch
     * @param _txMRoot : Tx mega root of the blocks in the bunch
     */
    submitBunchHeader(
      _startBlockNumber: BigNumberish,
      _bunchDepth: BigNumberish,
      _txMRoot: BytesLike,
      _rcMRoot: BytesLike,
      _lastBlockHash: BytesLike,
      _sigs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewBunchHeader(
      _startBlockNumber: null,
      _bunchDepth: null,
      _bunchIndex: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    getAllValidators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets finalized bunch headers by index.
     * @param _bunchIndex : Index of the bunch.
     */
    getBunchHeader(
      _bunchIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the start block number after last bunch.
     */
    getNextStartBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets index of last bunch header from bunch header list.
     */
    lastBunchIndex(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    setInitialValidators(
      _validators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows anyone to submit a signed bunch header.
     * @param _bunchDepth : Depth of the bunch
     * @param _lastBlockHash : Hash of the last block in this bunch for checkpoint purpose
     * @param _rcMRoot : Receipts mega root of the blocks in the bunch
     * @param _sigs : Array of sigs
     * @param _startBlockNumber : Start block number in the bunch
     * @param _txMRoot : Tx mega root of the blocks in the bunch
     */
    submitBunchHeader(
      _startBlockNumber: BigNumberish,
      _bunchDepth: BigNumberish,
      _txMRoot: BytesLike,
      _rcMRoot: BytesLike,
      _lastBlockHash: BytesLike,
      _sigs: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets finalized bunch headers by index.
     * @param _bunchIndex : Index of the bunch.
     */
    getBunchHeader(
      _bunchIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the start block number after last bunch.
     */
    getNextStartBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets index of last bunch header from bunch header list.
     */
    lastBunchIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInitialValidators(
      _validators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows anyone to submit a signed bunch header.
     * @param _bunchDepth : Depth of the bunch
     * @param _lastBlockHash : Hash of the last block in this bunch for checkpoint purpose
     * @param _rcMRoot : Receipts mega root of the blocks in the bunch
     * @param _sigs : Array of sigs
     * @param _startBlockNumber : Start block number in the bunch
     * @param _txMRoot : Tx mega root of the blocks in the bunch
     */
    submitBunchHeader(
      _startBlockNumber: BigNumberish,
      _bunchDepth: BigNumberish,
      _txMRoot: BytesLike,
      _rcMRoot: BytesLike,
      _lastBlockHash: BytesLike,
      _sigs: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
