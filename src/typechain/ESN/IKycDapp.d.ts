/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IKycDappInterface extends ethers.utils.Interface {
  functions: {
    "getIdentityByAddress(address)": FunctionFragment;
    "getIdentityByUsername(bytes32)": FunctionFragment;
    "getKycStatusByAddress(address,uint8,bytes32,bytes32)": FunctionFragment;
    "getKycStatusByUsername(bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "isKycApproved(address,uint8,bytes32,bytes32)": FunctionFragment;
    "isKycLevel1(address)": FunctionFragment;
    "resolveAddress(bytes32)": FunctionFragment;
    "resolveUsername(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getIdentityByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentityByUsername",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKycStatusByAddress",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKycStatusByUsername",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKycApproved",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isKycLevel1", values: [string]): string;
  encodeFunctionData(
    functionFragment: "resolveAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsername",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getIdentityByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentityByUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKycStatusByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKycStatusByUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKycApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKycLevel1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsername",
    data: BytesLike
  ): Result;

  events: {
    "IdentityTransfer(address,address,bytes32)": EventFragment;
    "KycApplied(bytes32,uint8,bytes32,bytes32)": EventFragment;
    "KycDetailsUpdated(bytes32,bytes32)": EventFragment;
    "KycFeeUpdated(uint8,bytes32,bytes32,uint256)": EventFragment;
    "KycStatusUpdated(bytes32,uint8,bytes32,bytes32,uint8)": EventFragment;
    "ProfileDetailsUpdated(bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IdentityTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KycApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KycDetailsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KycFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KycStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileDetailsUpdated"): EventFragment;
}

export class IKycDapp extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IKycDappInterface;

  functions: {
    getIdentityByAddress(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      username: string;
      owner: string;
      kycApprovedDetailsIPFS: string;
      profileDetailsIPFS: string;
      level1: number;
      isGovernanceControllable: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: number;
      5: boolean;
    }>;

    getIdentityByUsername(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      username: string;
      owner: string;
      kycApprovedDetailsIPFS: string;
      profileDetailsIPFS: string;
      level1: number;
      isGovernanceControllable: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: number;
      5: boolean;
    }>;

    getKycStatusByAddress(
      _wallet: string,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getKycStatusByUsername(
      _username: BytesLike,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    isKycApproved(
      _wallet: string,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isKycLevel1(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  getIdentityByAddress(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<{
    username: string;
    owner: string;
    kycApprovedDetailsIPFS: string;
    profileDetailsIPFS: string;
    level1: number;
    isGovernanceControllable: boolean;
    0: string;
    1: string;
    2: string;
    3: string;
    4: number;
    5: boolean;
  }>;

  getIdentityByUsername(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    username: string;
    owner: string;
    kycApprovedDetailsIPFS: string;
    profileDetailsIPFS: string;
    level1: number;
    isGovernanceControllable: boolean;
    0: string;
    1: string;
    2: string;
    3: string;
    4: number;
    5: boolean;
  }>;

  getKycStatusByAddress(
    _wallet: string,
    _level: BigNumberish,
    _platformIdentifier: BytesLike,
    _specialization: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getKycStatusByUsername(
    _username: BytesLike,
    _level: BigNumberish,
    _platformIdentifier: BytesLike,
    _specialization: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  isKycApproved(
    _wallet: string,
    _level: BigNumberish,
    _platformIdentifier: BytesLike,
    _specialization: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKycLevel1(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

  resolveAddress(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getIdentityByAddress(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      username: string;
      owner: string;
      kycApprovedDetailsIPFS: string;
      profileDetailsIPFS: string;
      level1: number;
      isGovernanceControllable: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: number;
      5: boolean;
    }>;

    getIdentityByUsername(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      username: string;
      owner: string;
      kycApprovedDetailsIPFS: string;
      profileDetailsIPFS: string;
      level1: number;
      isGovernanceControllable: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: number;
      5: boolean;
    }>;

    getKycStatusByAddress(
      _wallet: string,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getKycStatusByUsername(
      _username: BytesLike,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    isKycApproved(
      _wallet: string,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKycLevel1(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    IdentityTransfer(
      from: string | null,
      to: string | null,
      username: BytesLike | null
    ): EventFilter;

    KycApplied(
      username: BytesLike | null,
      level: BigNumberish | null,
      platformIdentifier: null,
      specialization: null
    ): EventFilter;

    KycDetailsUpdated(
      username: BytesLike | null,
      newKycDetailsIPfS: null
    ): EventFilter;

    KycFeeUpdated(
      level: BigNumberish | null,
      platformIdentifier: BytesLike | null,
      specialization: BytesLike | null,
      amount: null
    ): EventFilter;

    KycStatusUpdated(
      username: BytesLike | null,
      level: BigNumberish | null,
      platformIdentifier: null,
      specialization: null,
      newKycStatus: null
    ): EventFilter;

    ProfileDetailsUpdated(
      username: BytesLike | null,
      newProfileDetailsIPfS: null
    ): EventFilter;
  };

  estimateGas: {
    getIdentityByAddress(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIdentityByUsername(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKycStatusByAddress(
      _wallet: string,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKycStatusByUsername(
      _username: BytesLike,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKycApproved(
      _wallet: string,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKycLevel1(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getIdentityByAddress(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdentityByUsername(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKycStatusByAddress(
      _wallet: string,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKycStatusByUsername(
      _username: BytesLike,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKycApproved(
      _wallet: string,
      _level: BigNumberish,
      _platformIdentifier: BytesLike,
      _specialization: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKycLevel1(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
