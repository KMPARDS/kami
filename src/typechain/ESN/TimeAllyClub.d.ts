/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TimeAllyClubInterface extends ethers.utils.Interface {
  functions: {
    "dayswappers()": FunctionFragment;
    "getIncentiveSlab(uint256,address)": FunctionFragment;
    "getMembershipVolume(address,uint32)": FunctionFragment;
    "getMonthlyNRT(uint32)": FunctionFragment;
    "getPlatformBusiness(address,uint32,address)": FunctionFragment;
    "getReward(address,uint32,address)": FunctionFragment;
    "getTotalBusinessVolume(uint32)": FunctionFragment;
    "isAuthorized(bytes32)": FunctionFragment;
    "kycDapp()": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "randomnessManager()": FunctionFragment;
    "receiveNrt(uint32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reportNewStaking(address,uint256)": FunctionFragment;
    "resolveAddress(bytes32)": FunctionFragment;
    "resolveUsername(address)": FunctionFragment;
    "resolveUsernameStrict(address)": FunctionFragment;
    "rewardToIntroducer(address,uint256)": FunctionFragment;
    "rewardToNetworker(address,uint256)": FunctionFragment;
    "setInitialValues()": FunctionFragment;
    "setKycDapp(address)": FunctionFragment;
    "setPlatformIncentives(address,tuple[])": FunctionFragment;
    "timeallyClub()": FunctionFragment;
    "timeallyManager()": FunctionFragment;
    "timeallyPromotionalBucket()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAuthorization(bytes32,bool)": FunctionFragment;
    "validatorManager()": FunctionFragment;
    "withdrawPlatformIncentive(uint32,address,uint8,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dayswappers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncentiveSlab",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembershipVolume",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMonthlyNRT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformBusiness",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBusinessVolume",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "kycDapp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomnessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveNrt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportNewStaking",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsernameStrict",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToIntroducer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToNetworker",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialValues",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setKycDapp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPlatformIncentives",
    values: [
      string,
      {
        label: string;
        target: BigNumberish;
        directBountyPerTenThousand: BigNumberish;
        treeBountyPerTenThousand: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyClub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyPromotionalBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuthorization",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformIncentive",
    values: [BigNumberish, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "dayswappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncentiveSlab",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembershipVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMonthlyNRT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformBusiness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBusinessVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycDapp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomnessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receiveNrt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportNewStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsernameStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToIntroducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToNetworker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformIncentives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyClub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyPromotionalBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformIncentive",
    data: BytesLike
  ): Result;

  events: {
    "Authorised(bytes32,bool)": EventFragment;
    "Business(address,address,uint32,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,address,uint32,uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Business"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class TimeAllyClub extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TimeAllyClubInterface;

  functions: {
    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getIncentiveSlab(
      _volume: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        label: string;
        target: BigNumber;
        directBountyPerTenThousand: number;
        treeBountyPerTenThousand: number;
        0: string;
        1: BigNumber;
        2: number;
        3: number;
      };
    }>;

    getMembershipVolume(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      businessVolume: BigNumber;
      otherVolume: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPlatformBusiness(
      _network: string,
      _month: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<{
      0: { business: BigNumber; claimed: boolean; 0: BigNumber; 1: boolean };
    }>;

    getReward(
      _networker: string,
      _month: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<{
      direct: BigNumber;
      tree: BigNumber;
      burn: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getTotalBusinessVolume(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    reportNewStaking(
      _networker: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    rewardToIntroducer(
      _networker: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardToNetworker(
      _networker: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialValues(overrides?: Overrides): Promise<ContractTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPlatformIncentives(
      _platform: string,
      _incentiveStructure: {
        label: string;
        target: BigNumberish;
        directBountyPerTenThousand: BigNumberish;
        treeBountyPerTenThousand: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawPlatformIncentive(
      _month: BigNumberish,
      _platform: string,
      _rewardType: BigNumberish,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  dayswappers(overrides?: CallOverrides): Promise<string>;

  getIncentiveSlab(
    _volume: BigNumberish,
    _platform: string,
    overrides?: CallOverrides
  ): Promise<{
    label: string;
    target: BigNumber;
    directBountyPerTenThousand: number;
    treeBountyPerTenThousand: number;
    0: string;
    1: BigNumber;
    2: number;
    3: number;
  }>;

  getMembershipVolume(
    _networker: string,
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    businessVolume: BigNumber;
    otherVolume: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getMonthlyNRT(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlatformBusiness(
    _network: string,
    _month: BigNumberish,
    _platform: string,
    overrides?: CallOverrides
  ): Promise<{
    business: BigNumber;
    claimed: boolean;
    0: BigNumber;
    1: boolean;
  }>;

  getReward(
    _networker: string,
    _month: BigNumberish,
    _platform: string,
    overrides?: CallOverrides
  ): Promise<{
    direct: BigNumber;
    tree: BigNumber;
    burn: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getTotalBusinessVolume(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "isAuthorized(bytes32)"(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAuthorized(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows NRT Manager contract to send NRT share for TimeAlly.
   */
  receiveNrt(
    _currentNrtMonth: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  reportNewStaking(
    _networker: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resolveAddress(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  resolveUsernameStrict(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardToIntroducer(
    _networker: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardToNetworker(
    _networker: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialValues(overrides?: Overrides): Promise<ContractTransaction>;

  setKycDapp(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPlatformIncentives(
    _platform: string,
    _incentiveStructure: {
      label: string;
      target: BigNumberish;
      directBountyPerTenThousand: BigNumberish;
      treeBountyPerTenThousand: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAuthorization(
    _username: BytesLike,
    _newStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  withdrawPlatformIncentive(
    _month: BigNumberish,
    _platform: string,
    _rewardType: BigNumberish,
    _stakingContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    dayswappers(overrides?: CallOverrides): Promise<string>;

    getIncentiveSlab(
      _volume: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<{
      label: string;
      target: BigNumber;
      directBountyPerTenThousand: number;
      treeBountyPerTenThousand: number;
      0: string;
      1: BigNumber;
      2: number;
      3: number;
    }>;

    getMembershipVolume(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      businessVolume: BigNumber;
      otherVolume: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformBusiness(
      _network: string,
      _month: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<{
      business: BigNumber;
      claimed: boolean;
      0: BigNumber;
      1: boolean;
    }>;

    getReward(
      _networker: string,
      _month: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<{
      direct: BigNumber;
      tree: BigNumber;
      burn: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getTotalBusinessVolume(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reportNewStaking(
      _networker: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardToIntroducer(
      _networker: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardToNetworker(
      _networker: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialValues(overrides?: CallOverrides): Promise<void>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    setPlatformIncentives(
      _platform: string,
      _incentiveStructure: {
        label: string;
        target: BigNumberish;
        directBountyPerTenThousand: BigNumberish;
        treeBountyPerTenThousand: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    withdrawPlatformIncentive(
      _month: BigNumberish,
      _platform: string,
      _rewardType: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Authorised(wallet: BytesLike | null, newStatus: null): EventFilter;

    Business(
      networker: string | null,
      platform: string | null,
      month: BigNumberish | null,
      value: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Withdraw(
      networker: string | null,
      platform: string | null,
      month: BigNumberish | null,
      direct: null,
      tree: null,
      burn: null,
      issTime: null,
      staking: null
    ): EventFilter;
  };

  estimateGas: {
    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    getIncentiveSlab(
      _volume: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMembershipVolume(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlatformBusiness(
      _network: string,
      _month: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      _networker: string,
      _month: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBusinessVolume(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    reportNewStaking(
      _networker: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToIntroducer(
      _networker: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardToNetworker(
      _networker: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInitialValues(overrides?: Overrides): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    setPlatformIncentives(
      _platform: string,
      _incentiveStructure: {
        label: string;
        target: BigNumberish;
        directBountyPerTenThousand: BigNumberish;
        treeBountyPerTenThousand: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawPlatformIncentive(
      _month: BigNumberish,
      _platform: string,
      _rewardType: BigNumberish,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIncentiveSlab(
      _volume: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembershipVolume(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlatformBusiness(
      _network: string,
      _month: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      _networker: string,
      _month: BigNumberish,
      _platform: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBusinessVolume(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportNewStaking(
      _networker: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToIntroducer(
      _networker: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardToNetworker(
      _networker: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialValues(overrides?: Overrides): Promise<PopulatedTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPlatformIncentives(
      _platform: string,
      _incentiveStructure: {
        label: string;
        target: BigNumberish;
        directBountyPerTenThousand: BigNumberish;
        treeBountyPerTenThousand: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawPlatformIncentive(
      _month: BigNumberish,
      _platform: string,
      _rewardType: BigNumberish,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
