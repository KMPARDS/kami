/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  Contract,
  ContractTransaction,
  PopulatedTransaction,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  BytesLike,
  ContractInterface,
  Overrides,
} from 'ethers';

export class Erc20 extends Contract {
  functions: {
    allowance(
      owner: string,
      delegate: string
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      delegate: string,
      numTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      tokenOwner: string
    ): Promise<{
      0: BigNumber;
    }>;

    decimals(): Promise<{
      0: number;
    }>;

    name(): Promise<{
      0: string;
    }>;

    symbol(): Promise<{
      0: string;
    }>;

    totalSupply(): Promise<{
      0: BigNumber;
    }>;

    transfer(
      receiver: string,
      numTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      owner: string,
      buyer: string,
      numTokens: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  allowance(owner: string, delegate: string): Promise<BigNumber>;

  approve(
    delegate: string,
    numTokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(tokenOwner: string): Promise<BigNumber>;

  decimals(): Promise<number>;

  name(): Promise<string>;

  symbol(): Promise<string>;

  totalSupply(): Promise<BigNumber>;

  transfer(
    receiver: string,
    numTokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    owner: string,
    buyer: string,
    numTokens: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(tokenOwner: string | null, spender: string | null, tokens: null): EventFilter;

    Transfer(from: string | null, to: string | null, tokens: null): EventFilter;
  };

  estimateGas: {
    allowance(owner: string, delegate: string): Promise<BigNumber>;

    approve(delegate: string, numTokens: BigNumberish): Promise<BigNumber>;

    balanceOf(tokenOwner: string): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    name(): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;

    transfer(receiver: string, numTokens: BigNumberish): Promise<BigNumber>;

    transferFrom(owner: string, buyer: string, numTokens: BigNumberish): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(owner: string, delegate: string): Promise<PopulatedTransaction>;

    approve(delegate: string, numTokens: BigNumberish): Promise<PopulatedTransaction>;

    balanceOf(tokenOwner: string): Promise<PopulatedTransaction>;

    decimals(): Promise<PopulatedTransaction>;

    name(): Promise<PopulatedTransaction>;

    symbol(): Promise<PopulatedTransaction>;

    totalSupply(): Promise<PopulatedTransaction>;

    transfer(receiver: string, numTokens: BigNumberish): Promise<PopulatedTransaction>;

    transferFrom(
      owner: string,
      buyer: string,
      numTokens: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
