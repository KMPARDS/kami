/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PrepaidEsInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "convertToESP(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferLiquid(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "convertToESP",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLiquid",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToESP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLiquid",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class PrepaidEs extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PrepaidEsInterface;

  functions: {
    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    allowance(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    approve(
      _delegate: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    convertToESP(
      _destination: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    transfer(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    transferFrom(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    transferLiquid(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * Function to check the amount of tokens that an owner allowed to a spender.
   * @param _delegate : address The address which will spend the funds.
   * @param _owner : address The address which owns the funds.
   */
  allowance(
    _owner: string,
    _delegate: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * @param _delegate : The address which will spend the funds.
   * @param _value : The amount of tokens to be spent.
   */
  approve(
    _delegate: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Gets the prepaid balance of a holder.
   * @param _owner : Address of tokens owner.
   */
  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Converts native tokens to wrapped format.
   * @param _destination : Address on which prepaid to be credited.
   */
  convertToESP(
    _destination: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Private method that transfers tokens to receiver.
   * @param _receiver : Address of receiver.
   * @param _value : Number of tokens to transfer.
   */
  transfer(
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfer tokens from one address to another.
   * @param _owner : address The address which you want to send tokens from.
   * @param _receiver : address The address which you want to transfer to.
   * @param _value : uint256 the amount of tokens to be transferred.
   */
  transferFrom(
    _owner: string,
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Only callable by authorised platforms.
   * Converts prepaid tokens back to native tokens.
   * @param _receiver : Address of native tokens receiver.
   * @param _value : Amount of prepaid es tokens to convert.
   */
  transferLiquid(
    _receiver: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    allowance(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    approve(
      _delegate: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    convertToESP(
      _destination: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    transfer(
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    transferFrom(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    transferLiquid(
      _receiver: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      tokenOwner: string | null,
      spender: string | null,
      tokens: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, tokens: null): EventFilter;
  };

  estimateGas: {
    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    allowance(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    approve(
      _delegate: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    convertToESP(
      _destination: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    transfer(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    transferFrom(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    transferLiquid(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Function to check the amount of tokens that an owner allowed to a spender.
     * @param _delegate : address The address which will spend the funds.
     * @param _owner : address The address which owns the funds.
     */
    allowance(
      _owner: string,
      _delegate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     * @param _delegate : The address which will spend the funds.
     * @param _value : The amount of tokens to be spent.
     */
    approve(
      _delegate: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the prepaid balance of a holder.
     * @param _owner : Address of tokens owner.
     */
    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Converts native tokens to wrapped format.
     * @param _destination : Address on which prepaid to be credited.
     */
    convertToESP(
      _destination: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Private method that transfers tokens to receiver.
     * @param _receiver : Address of receiver.
     * @param _value : Number of tokens to transfer.
     */
    transfer(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfer tokens from one address to another.
     * @param _owner : address The address which you want to send tokens from.
     * @param _receiver : address The address which you want to transfer to.
     * @param _value : uint256 the amount of tokens to be transferred.
     */
    transferFrom(
      _owner: string,
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Only callable by authorised platforms.
     * Converts prepaid tokens back to native tokens.
     * @param _receiver : Address of native tokens receiver.
     * @param _value : Amount of prepaid es tokens to convert.
     */
    transferLiquid(
      _receiver: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
