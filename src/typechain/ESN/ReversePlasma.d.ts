/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment } from '@ethersproject/abi';

interface ReversePlasmaInterface extends ethers.utils.Interface {
  functions: {
    'ethBlockchain(uint256)': FunctionFragment;
    'ethProposals(uint256,uint256)': FunctionFragment;
    'finalizeProposal(uint256,uint256)': FunctionFragment;
    'findProposal(uint256,bytes32,bytes32)': FunctionFragment;
    'getAllValidators()': FunctionFragment;
    'getProposalValidators(uint256,uint256)': FunctionFragment;
    'getProposalsCount(uint256)': FunctionFragment;
    'isValidator(address)': FunctionFragment;
    'latestBlockNumber()': FunctionFragment;
    'mainValidators(uint256)': FunctionFragment;
    'proposeBlock(uint256,bytes32,bytes32)': FunctionFragment;
    'reverseDepositAddress()': FunctionFragment;
    'setInitialValues(address,uint256,address[])': FunctionFragment;
    'tokenOnETH()': FunctionFragment;
    'updateDepositAddress(address)': FunctionFragment;
  };

  events: {
    'NewBlockHeader(uint256,uint256)': EventFragment;
  };
}

export class ReversePlasma extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ReversePlasmaInterface;

  functions: {
    ethBlockchain(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      transactionsRoot: string;
      receiptsRoot: string;
      0: string;
      1: string;
    }>;

    ethProposals(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      transactionsRoot: string;
      receiptsRoot: string;
      0: string;
      1: string;
    }>;

    finalizeProposal(
      _blockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    findProposal(
      _blockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    getAllValidators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getProposalValidators(
      _blockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getProposalsCount(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    latestBlockNumber(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mainValidators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    proposeBlock(
      _blockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reverseDepositAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setInitialValues(
      _tokenOnETH: string,
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenOnETH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    updateDepositAddress(
      _reverseDepositAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  ethBlockchain(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    transactionsRoot: string;
    receiptsRoot: string;
    0: string;
    1: string;
  }>;

  ethProposals(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    transactionsRoot: string;
    receiptsRoot: string;
    0: string;
    1: string;
  }>;

  finalizeProposal(
    _blockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  findProposal(
    _blockNumber: BigNumberish,
    _transactionsRoot: BytesLike,
    _receiptsRoot: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: boolean;
    1: BigNumber;
  }>;

  getAllValidators(overrides?: CallOverrides): Promise<string[]>;

  getProposalValidators(
    _blockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getProposalsCount(_blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  isValidator(_validator: string, overrides?: CallOverrides): Promise<boolean>;

  latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  mainValidators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  proposeBlock(
    _blockNumber: BigNumberish,
    _transactionsRoot: BytesLike,
    _receiptsRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reverseDepositAddress(overrides?: CallOverrides): Promise<string>;

  setInitialValues(
    _tokenOnETH: string,
    _startBlockNumber: BigNumberish,
    _validators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenOnETH(overrides?: CallOverrides): Promise<string>;

  updateDepositAddress(
    _reverseDepositAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  filters: {
    NewBlockHeader(blockNumber: null, proposalId: null): EventFilter;
  };

  estimateGas: {
    ethBlockchain(arg0: BigNumberish): Promise<BigNumber>;
    ethProposals(arg0: BigNumberish, arg1: BigNumberish): Promise<BigNumber>;
    finalizeProposal(_blockNumber: BigNumberish, _proposalId: BigNumberish): Promise<BigNumber>;
    findProposal(
      _blockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike
    ): Promise<BigNumber>;
    getAllValidators(): Promise<BigNumber>;
    getProposalValidators(
      _blockNumber: BigNumberish,
      _proposalId: BigNumberish
    ): Promise<BigNumber>;
    getProposalsCount(_blockNumber: BigNumberish): Promise<BigNumber>;
    isValidator(_validator: string): Promise<BigNumber>;
    latestBlockNumber(): Promise<BigNumber>;
    mainValidators(arg0: BigNumberish): Promise<BigNumber>;
    proposeBlock(
      _blockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike
    ): Promise<BigNumber>;
    reverseDepositAddress(): Promise<BigNumber>;
    setInitialValues(
      _tokenOnETH: string,
      _startBlockNumber: BigNumberish,
      _validators: string[]
    ): Promise<BigNumber>;
    tokenOnETH(): Promise<BigNumber>;
    updateDepositAddress(_reverseDepositAddress: string): Promise<BigNumber>;
  };

  populateTransaction: {
    ethBlockchain(arg0: BigNumberish): Promise<PopulatedTransaction>;
    ethProposals(arg0: BigNumberish, arg1: BigNumberish): Promise<PopulatedTransaction>;
    finalizeProposal(
      _blockNumber: BigNumberish,
      _proposalId: BigNumberish
    ): Promise<PopulatedTransaction>;
    findProposal(
      _blockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike
    ): Promise<PopulatedTransaction>;
    getAllValidators(): Promise<PopulatedTransaction>;
    getProposalValidators(
      _blockNumber: BigNumberish,
      _proposalId: BigNumberish
    ): Promise<PopulatedTransaction>;
    getProposalsCount(_blockNumber: BigNumberish): Promise<PopulatedTransaction>;
    isValidator(_validator: string): Promise<PopulatedTransaction>;
    latestBlockNumber(): Promise<PopulatedTransaction>;
    mainValidators(arg0: BigNumberish): Promise<PopulatedTransaction>;
    proposeBlock(
      _blockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike
    ): Promise<PopulatedTransaction>;
    reverseDepositAddress(): Promise<PopulatedTransaction>;
    setInitialValues(
      _tokenOnETH: string,
      _startBlockNumber: BigNumberish,
      _validators: string[]
    ): Promise<PopulatedTransaction>;
    tokenOnETH(): Promise<PopulatedTransaction>;
    updateDepositAddress(_reverseDepositAddress: string): Promise<PopulatedTransaction>;
  };
}
