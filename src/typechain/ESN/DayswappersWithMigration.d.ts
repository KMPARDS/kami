/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DayswappersWithMigrationInterface extends ethers.utils.Interface {
  functions: {
    "dayswappers()": FunctionFragment;
    "getBeltIdFromTreeReferrals(uint32)": FunctionFragment;
    "getMonthlyNRT(uint32)": FunctionFragment;
    "getSeatByAddress(address)": FunctionFragment;
    "getSeatByAddressStrict(address)": FunctionFragment;
    "getSeatByIndex(uint32)": FunctionFragment;
    "getSeatMonthlyDataByAddress(address,uint32)": FunctionFragment;
    "getSeatMonthlyDataByAddressStrict(address,uint32)": FunctionFragment;
    "getSeatMonthlyDataByIndex(uint32,uint32)": FunctionFragment;
    "isActiveAddress(address)": FunctionFragment;
    "isActiveSeat(uint32)": FunctionFragment;
    "isAdminMode()": FunctionFragment;
    "isAuthorized(bytes32)": FunctionFragment;
    "join(address)": FunctionFragment;
    "kycDapp()": FunctionFragment;
    "migrateSeats(tuple[])": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "payToIntroducer(address,uint256[3])": FunctionFragment;
    "payToNetworker(address,uint256[3])": FunctionFragment;
    "payToTree(address,uint256[3])": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "promoteBelt(address,uint32)": FunctionFragment;
    "randomnessManager()": FunctionFragment;
    "receiveNrt(uint32)": FunctionFragment;
    "renounceAdminMode()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reportVolume(address,uint256)": FunctionFragment;
    "resolveAddress(bytes32)": FunctionFragment;
    "resolveIntroducer(address)": FunctionFragment;
    "resolveKyc(address)": FunctionFragment;
    "resolveUsername(address)": FunctionFragment;
    "resolveUsernameStrict(address)": FunctionFragment;
    "rewardToTree(address,uint256,uint256[3])": FunctionFragment;
    "setInitialValues()": FunctionFragment;
    "setKycDapp(address)": FunctionFragment;
    "setNullWallet(address)": FunctionFragment;
    "setVolumeTarget(uint256)": FunctionFragment;
    "timeallyClub()": FunctionFragment;
    "timeallyManager()": FunctionFragment;
    "timeallyPromotionalBucket()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferSeat(address)": FunctionFragment;
    "updateAuthorization(bytes32,bool)": FunctionFragment;
    "validatorManager()": FunctionFragment;
    "volumeTarget()": FunctionFragment;
    "withdrawDefiniteEarnings(address,uint32,uint8)": FunctionFragment;
    "withdrawNrtEarnings(address,uint32,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dayswappers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeltIdFromTreeReferrals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMonthlyNRT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatByAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatByAddressStrict",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatMonthlyDataByAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatMonthlyDataByAddressStrict",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeatMonthlyDataByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveSeat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdminMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "join", values: [string]): string;
  encodeFunctionData(functionFragment: "kycDapp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateSeats",
    values: [
      {
        owner: string;
        kycResolved: boolean;
        incompleteKycResolveSeatIndex: BigNumberish;
        depth: BigNumberish;
        introducer: string;
        beltIndex: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payToIntroducer",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "payToNetworker",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "payToTree",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "promoteBelt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomnessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveNrt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdminMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportVolume",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveIntroducer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "resolveKyc", values: [string]): string;
  encodeFunctionData(
    functionFragment: "resolveUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsernameStrict",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToTree",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialValues",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setKycDapp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNullWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVolumeTarget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyClub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyPromotionalBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSeat",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuthorization",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "volumeTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDefiniteEarnings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNrtEarnings",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "dayswappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeltIdFromTreeReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMonthlyNRT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatByAddressStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatMonthlyDataByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatMonthlyDataByAddressStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeatMonthlyDataByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveSeat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAdminMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateSeats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payToIntroducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payToNetworker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payToTree", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promoteBelt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomnessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receiveNrt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdminMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveIntroducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolveKyc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsernameStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNullWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVolumeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyClub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyPromotionalBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSeat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volumeTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDefiniteEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNrtEarnings",
    data: BytesLike
  ): Result;

  events: {
    "Authorised(bytes32,bool)": EventFragment;
    "Introduce(uint32,uint32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Promotion(uint32,uint32)": EventFragment;
    "Reward(address,uint32,uint32,bool,bool,uint256,uint256[3])": EventFragment;
    "SeatTransfer(address,address,uint32)": EventFragment;
    "Volume(address,uint32,uint32,uint256)": EventFragment;
    "Withdraw(uint32,bool,uint8,uint32,uint256[3])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Introduce"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Promotion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeatTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Volume"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class DayswappersWithMigration extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DayswappersWithMigrationInterface;

  functions: {
    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getBeltIdFromTreeReferrals(
      treeReferrals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _newBeltIndex: number;
      0: number;
    }>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSeatByAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatByAddressStrict(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatByIndex(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatMonthlyDataByAddress(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    getSeatMonthlyDataByAddressStrict(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    getSeatMonthlyDataByIndex(
      _seatIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    isActiveAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isActiveSeat(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isAdminMode(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    join(
      _introducer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    migrateSeats(
      _seats: {
        owner: string;
        kycResolved: boolean;
        incompleteKycResolveSeatIndex: BigNumberish;
        depth: BigNumberish;
        introducer: string;
        beltIndex: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    payToNetworker(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    promoteBelt(
      _networker: string,
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    renounceAdminMode(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveIntroducer(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveKyc(
      _networker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    rewardToTree(
      _networker: string,
      _value: BigNumberish,
      _rewardRatio: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialValues(overrides?: Overrides): Promise<ContractTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNullWallet(
      _nullWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVolumeTarget(
      _volumeTarget: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferSeat(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    volumeTarget(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdrawDefiniteEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawNrtEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  dayswappers(overrides?: CallOverrides): Promise<string>;

  getBeltIdFromTreeReferrals(
    treeReferrals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getMonthlyNRT(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSeatByAddress(
    _networker: string,
    overrides?: CallOverrides
  ): Promise<{
    seatIndex: number;
    owner: string;
    kycResolved: boolean;
    incompleteKycResolveSeatIndex: number;
    depth: number;
    introducerSeatIndex: number;
    beltIndex: number;
    0: number;
    1: string;
    2: boolean;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  getSeatByAddressStrict(
    _networker: string,
    overrides?: CallOverrides
  ): Promise<{
    seatIndex: number;
    owner: string;
    kycResolved: boolean;
    incompleteKycResolveSeatIndex: number;
    depth: number;
    introducerSeatIndex: number;
    beltIndex: number;
    0: number;
    1: string;
    2: boolean;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  getSeatByIndex(
    _seatIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    seatIndex: number;
    owner: string;
    kycResolved: boolean;
    incompleteKycResolveSeatIndex: number;
    depth: number;
    introducerSeatIndex: number;
    beltIndex: number;
    0: number;
    1: string;
    2: boolean;
    3: number;
    4: number;
    5: number;
    6: number;
  }>;

  getSeatMonthlyDataByAddress(
    _networker: string,
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    treeReferrals: number;
    volume: BigNumber;
    definiteEarnings: BigNumber[];
    nrtEarnings: BigNumber[];
    isActive: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber[];
    3: BigNumber[];
    4: boolean;
  }>;

  getSeatMonthlyDataByAddressStrict(
    _networker: string,
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    treeReferrals: number;
    volume: BigNumber;
    definiteEarnings: BigNumber[];
    nrtEarnings: BigNumber[];
    isActive: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber[];
    3: BigNumber[];
    4: boolean;
  }>;

  getSeatMonthlyDataByIndex(
    _seatIndex: BigNumberish,
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    treeReferrals: number;
    volume: BigNumber;
    definiteEarnings: BigNumber[];
    nrtEarnings: BigNumber[];
    isActive: boolean;
    0: number;
    1: BigNumber;
    2: BigNumber[];
    3: BigNumber[];
    4: boolean;
  }>;

  isActiveAddress(
    _networker: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActiveSeat(
    _seatIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAdminMode(overrides?: CallOverrides): Promise<boolean>;

  "isAuthorized(bytes32)"(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAuthorized(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  join(
    _introducer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  migrateSeats(
    _seats: {
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: BigNumberish;
      depth: BigNumberish;
      introducer: string;
      beltIndex: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  payToIntroducer(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  payToNetworker(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  payToTree(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  promoteBelt(
    _networker: string,
    _month: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows NRT Manager contract to send NRT share for TimeAlly.
   */
  receiveNrt(
    _currentNrtMonth: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  renounceAdminMode(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  reportVolume(
    _networker: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resolveAddress(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveIntroducer(
    _networker: string,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveKyc(
    _networker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  resolveUsernameStrict(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardToTree(
    _networker: string,
    _value: BigNumberish,
    _rewardRatio: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialValues(overrides?: Overrides): Promise<ContractTransaction>;

  setKycDapp(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNullWallet(
    _nullWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVolumeTarget(
    _volumeTarget: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferSeat(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAuthorization(
    _username: BytesLike,
    _newStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  volumeTarget(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawDefiniteEarnings(
    _stakingContract: string,
    _month: BigNumberish,
    _rewardType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawNrtEarnings(
    _stakingContract: string,
    _month: BigNumberish,
    _rewardType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    dayswappers(overrides?: CallOverrides): Promise<string>;

    getBeltIdFromTreeReferrals(
      treeReferrals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatByAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatByAddressStrict(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatByIndex(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      seatIndex: number;
      owner: string;
      kycResolved: boolean;
      incompleteKycResolveSeatIndex: number;
      depth: number;
      introducerSeatIndex: number;
      beltIndex: number;
      0: number;
      1: string;
      2: boolean;
      3: number;
      4: number;
      5: number;
      6: number;
    }>;

    getSeatMonthlyDataByAddress(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    getSeatMonthlyDataByAddressStrict(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    getSeatMonthlyDataByIndex(
      _seatIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      treeReferrals: number;
      volume: BigNumber;
      definiteEarnings: BigNumber[];
      nrtEarnings: BigNumber[];
      isActive: boolean;
      0: number;
      1: BigNumber;
      2: BigNumber[];
      3: BigNumber[];
      4: boolean;
    }>;

    isActiveAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActiveSeat(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAdminMode(overrides?: CallOverrides): Promise<boolean>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    join(_introducer: string, overrides?: CallOverrides): Promise<void>;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    migrateSeats(
      _seats: {
        owner: string;
        kycResolved: boolean;
        incompleteKycResolveSeatIndex: BigNumberish;
        depth: BigNumberish;
        introducer: string;
        beltIndex: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    payToNetworker(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    promoteBelt(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceAdminMode(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveIntroducer(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveKyc(_networker: string, overrides?: CallOverrides): Promise<void>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardToTree(
      _networker: string,
      _value: BigNumberish,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialValues(overrides?: CallOverrides): Promise<void>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    setNullWallet(
      _nullWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setVolumeTarget(
      _volumeTarget: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferSeat(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    volumeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawDefiniteEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNrtEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Authorised(wallet: BytesLike | null, newStatus: null): EventFilter;

    Introduce(
      introducerSeatIndex: BigNumberish | null,
      networkerSeatIndex: BigNumberish | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Promotion(
      seatIndex: BigNumberish | null,
      beltIndex: BigNumberish | null
    ): EventFilter;

    Reward(
      platform: string | null,
      seatIndex: BigNumberish | null,
      month: BigNumberish | null,
      isDefinite: null,
      fromTree: null,
      reward: null,
      rewardRatio: null
    ): EventFilter;

    SeatTransfer(
      from: string | null,
      to: string | null,
      seatIndex: BigNumberish | null
    ): EventFilter;

    Volume(
      platform: string | null,
      seatIndex: BigNumberish | null,
      month: BigNumberish | null,
      amount: null
    ): EventFilter;

    Withdraw(
      seatIndex: BigNumberish | null,
      isDefinite: boolean | null,
      rewardType: null,
      month: null,
      adjustedRewards: null
    ): EventFilter;
  };

  estimateGas: {
    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    getBeltIdFromTreeReferrals(
      treeReferrals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatByAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatByAddressStrict(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatByIndex(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatMonthlyDataByAddress(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatMonthlyDataByAddressStrict(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeatMonthlyDataByIndex(
      _seatIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActiveSeat(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdminMode(overrides?: CallOverrides): Promise<BigNumber>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    join(_introducer: string, overrides?: Overrides): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    migrateSeats(
      _seats: {
        owner: string;
        kycResolved: boolean;
        incompleteKycResolveSeatIndex: BigNumberish;
        depth: BigNumberish;
        introducer: string;
        beltIndex: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    payToNetworker(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    promoteBelt(
      _networker: string,
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    renounceAdminMode(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveIntroducer(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveKyc(_networker: string, overrides?: Overrides): Promise<BigNumber>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardToTree(
      _networker: string,
      _value: BigNumberish,
      _rewardRatio: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInitialValues(overrides?: Overrides): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    setNullWallet(
      _nullWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVolumeTarget(
      _volumeTarget: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferSeat(_newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    volumeTarget(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawDefiniteEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawNrtEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBeltIdFromTreeReferrals(
      treeReferrals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatByAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatByAddressStrict(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatByIndex(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatMonthlyDataByAddress(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatMonthlyDataByAddressStrict(
      _networker: string,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeatMonthlyDataByIndex(
      _seatIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveAddress(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActiveSeat(
      _seatIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdminMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isAuthorized(bytes32)"(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    join(
      _introducer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateSeats(
      _seats: {
        owner: string;
        kycResolved: boolean;
        incompleteKycResolveSeatIndex: BigNumberish;
        depth: BigNumberish;
        introducer: string;
        beltIndex: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    payToNetworker(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    promoteBelt(
      _networker: string,
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    renounceAdminMode(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveIntroducer(
      _networker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveKyc(
      _networker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToTree(
      _networker: string,
      _value: BigNumberish,
      _rewardRatio: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialValues(overrides?: Overrides): Promise<PopulatedTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNullWallet(
      _nullWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVolumeTarget(
      _volumeTarget: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferSeat(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAuthorization(
      _username: BytesLike,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    volumeTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawDefiniteEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawNrtEarnings(
      _stakingContract: string,
      _month: BigNumberish,
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
