/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MultiSigWalletInterface extends ethers.utils.Interface {
  functions: {
    "getTransactionCount(bool,bool)": FunctionFragment;
    "getTransactionIds(uint256,uint256,bool,bool)": FunctionFragment;
    "transactionCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionIds",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;

  events: {
    "Confirmation(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Execution(uint256)": EventFragment;
    "ExecutionFailure(uint256)": EventFragment;
    "Revocation(address,uint256)": EventFragment;
    "Submission(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Confirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submission"): EventFragment;
}

export class MultiSigWallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultiSigWalletInterface;

  functions: {
    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions.
     * @param pending Include pending transactions.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      _transactionIds: BigNumber[];
      0: BigNumber[];
    }>;

    transactionCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  /**
   * Returns total number of transactions after filers are applied.
   * @param executed Include executed transactions.
   * @param pending Include pending transactions.
   */
  getTransactionCount(
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns list of transaction IDs in defined range.
   * @param executed Include executed transactions.
   * @param from Index start position of transaction array.
   * @param pending Include pending transactions.
   * @param to Index end position of transaction array.
   */
  getTransactionIds(
    from: BigNumberish,
    to: BigNumberish,
    pending: boolean,
    executed: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions.
     * @param pending Include pending transactions.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Confirmation(
      sender: string | null,
      transactionId: BigNumberish | null
    ): EventFilter;

    Deposit(sender: string | null, value: null): EventFilter;

    Execution(transactionId: BigNumberish | null): EventFilter;

    ExecutionFailure(transactionId: BigNumberish | null): EventFilter;

    Revocation(
      sender: string | null,
      transactionId: BigNumberish | null
    ): EventFilter;

    Submission(transactionId: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions.
     * @param pending Include pending transactions.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns total number of transactions after filers are applied.
     * @param executed Include executed transactions.
     * @param pending Include pending transactions.
     */
    getTransactionCount(
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns list of transaction IDs in defined range.
     * @param executed Include executed transactions.
     * @param from Index start position of transaction array.
     * @param pending Include pending transactions.
     * @param to Index end position of transaction array.
     */
    getTransactionIds(
      from: BigNumberish,
      to: BigNumberish,
      pending: boolean,
      executed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
