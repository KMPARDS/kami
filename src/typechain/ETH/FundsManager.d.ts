/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment } from '@ethersproject/abi';

interface FundsManagerInterface extends ethers.utils.Interface {
  functions: {
    'claimWithdrawal(bytes)': FunctionFragment;
    'fundsManagerESN()': FunctionFragment;
    'plasmaManager()': FunctionFragment;
    'setInitialValues(address,address,address)': FunctionFragment;
    'token()': FunctionFragment;
    'transactionClaimed(bytes32)': FunctionFragment;
  };

  events: {};
}

export class FundsManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FundsManagerInterface;

  functions: {
    claimWithdrawal(
      _rawTransactionProof: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fundsManagerESN(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    plasmaManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setInitialValues(
      _token: string,
      _plasmaManager: string,
      _fundsManagerESN: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transactionClaimed(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  claimWithdrawal(
    _rawTransactionProof: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fundsManagerESN(overrides?: CallOverrides): Promise<string>;

  plasmaManager(overrides?: CallOverrides): Promise<string>;

  setInitialValues(
    _token: string,
    _plasmaManager: string,
    _fundsManagerESN: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transactionClaimed(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  filters: {};

  estimateGas: {
    claimWithdrawal(_rawTransactionProof: BytesLike): Promise<BigNumber>;
    fundsManagerESN(): Promise<BigNumber>;
    plasmaManager(): Promise<BigNumber>;
    setInitialValues(
      _token: string,
      _plasmaManager: string,
      _fundsManagerESN: string
    ): Promise<BigNumber>;
    token(): Promise<BigNumber>;
    transactionClaimed(arg0: BytesLike): Promise<BigNumber>;
  };

  populateTransaction: {
    claimWithdrawal(_rawTransactionProof: BytesLike): Promise<PopulatedTransaction>;
    fundsManagerESN(): Promise<PopulatedTransaction>;
    plasmaManager(): Promise<PopulatedTransaction>;
    setInitialValues(
      _token: string,
      _plasmaManager: string,
      _fundsManagerESN: string
    ): Promise<PopulatedTransaction>;
    token(): Promise<PopulatedTransaction>;
    transactionClaimed(arg0: BytesLike): Promise<PopulatedTransaction>;
  };
}
