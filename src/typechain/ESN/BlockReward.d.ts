/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface BlockRewardInterface extends ethers.utils.Interface {
  functions: {
    'SYSTEM_ADDRESS()': FunctionFragment;
    'reward(address[],uint16[])': FunctionFragment;
    'setInitialValues(address)': FunctionFragment;
    'validatorManager()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'SYSTEM_ADDRESS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward', values: [string[], BigNumberish[]]): string;
  encodeFunctionData(functionFragment: 'setInitialValues', values: [string]): string;
  encodeFunctionData(functionFragment: 'validatorManager', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'SYSTEM_ADDRESS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInitialValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorManager', data: BytesLike): Result;

  events: {};
}

export class BlockReward extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BlockRewardInterface;

  functions: {
    SYSTEM_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    reward(
      benefactors: string[],
      kind: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialValues(
      _validatorManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<string>;

  reward(
    benefactors: string[],
    kind: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialValues(_validatorManager: string, overrides?: Overrides): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<string>;

    reward(
      benefactors: string[],
      kind: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;

    setInitialValues(_validatorManager: string, overrides?: CallOverrides): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    reward(benefactors: string[], kind: BigNumberish[], overrides?: Overrides): Promise<BigNumber>;

    setInitialValues(_validatorManager: string, overrides?: Overrides): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SYSTEM_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward(
      benefactors: string[],
      kind: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialValues(
      _validatorManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
