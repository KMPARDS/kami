/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TsgapInterface extends ethers.utils.Interface {
  functions: {
    "EARTH_SECONDS_IN_MONTH()": FunctionFragment;
    "addFunds()": FunctionFragment;
    "appointeeVote(address,uint32)": FunctionFragment;
    "createSIPPlan(uint256,uint32,uint32,uint32,uint32,uint32,uint32)": FunctionFragment;
    "fundsDeposit()": FunctionFragment;
    "getDepositDoneStatus(address,uint32,uint32)": FunctionFragment;
    "getDepositStatus(address,uint32,uint32)": FunctionFragment;
    "getPendingWithdrawlAmount(address,uint32,uint32,bool)": FunctionFragment;
    "getSip(address,uint32)": FunctionFragment;
    "migrateDeposit(address,uint32,uint32,uint8)": FunctionFragment;
    "migrateSip(address,uint32,uint48,uint32,uint32)": FunctionFragment;
    "monthlyDeposit(address,uint32,uint32)": FunctionFragment;
    "newSIP(uint32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingBenefitAmountOfAllStakers()": FunctionFragment;
    "sipPlans(uint256)": FunctionFragment;
    "sips(address,uint256)": FunctionFragment;
    "toogleAppointee(uint32,address,bool)": FunctionFragment;
    "toogleNominee(uint32,address,bool)": FunctionFragment;
    "updatePlanStatus(uint256,bool)": FunctionFragment;
    "viewAppointation(address,uint256,address)": FunctionFragment;
    "viewMonthlyBenefitAmount(address,uint32,uint32)": FunctionFragment;
    "viewNomination(address,uint256,address)": FunctionFragment;
    "withdrawBenefit(address,uint32,uint32)": FunctionFragment;
    "withdrawFunds(uint256)": FunctionFragment;
    "withdrawPowerBooster(address,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EARTH_SECONDS_IN_MONTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addFunds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "appointeeVote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSIPPlan",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundsDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositDoneStatus",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositStatus",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingWithdrawlAmount",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getSip",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateDeposit",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateSip",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "monthlyDeposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newSIP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingBenefitAmountOfAllStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sipPlans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sips",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toogleAppointee",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toogleNominee",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlanStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAppointation",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewMonthlyBenefitAmount",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewNomination",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBenefit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPowerBooster",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EARTH_SECONDS_IN_MONTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "appointeeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSIPPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundsDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositDoneStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingWithdrawlAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrateSip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "monthlyDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newSIP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingBenefitAmountOfAllStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sipPlans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sips", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toogleAppointee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toogleNominee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlanStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAppointation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewMonthlyBenefitAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBenefit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPowerBooster",
    data: BytesLike
  ): Result;

  events: {
    "AppointeeUpdated(address,uint32,address,bool)": EventFragment;
    "AppointeeVoted(address,uint32,address)": EventFragment;
    "BenefitWithdrawl(address,uint32,uint32,uint32,uint256,address)": EventFragment;
    "FundsDeposited(uint256)": EventFragment;
    "FundsWithdrawn(uint256)": EventFragment;
    "NewDeposit(address,uint32,uint32,uint256,uint256,address)": EventFragment;
    "NewSIP(address,uint32,uint256)": EventFragment;
    "NomineeUpdated(address,uint32,address,bool)": EventFragment;
    "PowerBoosterWithdrawl(address,uint32,uint32,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppointeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AppointeeVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BenefitWithdrawl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSIP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NomineeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PowerBoosterWithdrawl"): EventFragment;
}

export class Tsgap extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TsgapInterface;

  functions: {
    EARTH_SECONDS_IN_MONTH(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * this function is used by donors to add funds to fundsDeposit
     */
    addFunds(overrides?: PayableOverrides): Promise<ContractTransaction>;

    /**
     * need to be appointee, set by staker themselves
     * this function is used by appointee to vote that nominees can withdraw early
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    appointeeVote(
      _stakerAddress: string,
      _sipId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is used by owner to create plans for new SIPs
     * @param _accumulationPeriodMonths : number of months to deposit commitment amount
     * @param _benefitPeriodYears : number of years of benefit
     * @param _defaultPenaltyFactor : due to missing deposits, this is per 1000
     * @param _gracePenaltyFactor : due to late deposits, this is per 1000
     * @param _gracePeriodSeconds : grace allowance to stakers to deposit monthly
     * @param _minimumMonthlyCommitmentAmount : minimum SIP monthly amount in exaES
     * @param _monthlyBenefitFactor : this is per 1000; i.e 200 for 20%
     */
    createSIPPlan(
      _minimumMonthlyCommitmentAmount: BigNumberish,
      _accumulationPeriodMonths: BigNumberish,
      _benefitPeriodYears: BigNumberish,
      _gracePeriodSeconds: BigNumberish,
      _monthlyBenefitFactor: BigNumberish,
      _gracePenaltyFactor: BigNumberish,
      _defaultPenaltyFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * deposited by Era Swap Donors. It is given as benefits to  ES stakers. on every withdrawl this deposit is reduced, and on some point of time if enough fundsDeposit is not available to assure staker benefit, contract will allow staker to deposit
     */
    fundsDeposit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * this function is used to read all time deposit status of any staker SIP
     * @param _monthId : deposit month id starts from 1 upto as per plan
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    getDepositDoneStatus(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * it is used in deposit function require statement.
     * this function is used to calculate deposit status according to current time
     * @param _monthId : deposit month id to calculate status for
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    getDepositStatus(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * this function is used to get avalilable withdrawls upto a withdrawl month id
     * @param _isNomineeWithdrawing : different status in case of nominee withdrawl
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     * @param _withdrawlMonthId : withdrawl month id upto which to calculate returns for
     */
    getPendingWithdrawlAmount(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _withdrawlMonthId: BigNumberish,
      _isNomineeWithdrawing: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSip(
      _staker: string,
      _sipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      planId: number;
      stakingTimestamp: number;
      monthlyCommitmentAmount: BigNumber;
      totalDeposited: BigNumber;
      lastWithdrawlMonthId: number;
      powerBoosterWithdrawls: number;
      numberOfAppointees: number;
      appointeeVotes: number;
      0: number;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
    }>;

    migrateDeposit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      _depositStatusAdmin: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    migrateSip(
      _staker: string,
      _planId: BigNumberish,
      _stakingTimestamp: BigNumberish,
      _lastWithdrawlMonthId: BigNumberish,
      _powerBoosterWithdrawls: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * @param _monthId : specify the month to deposit
     */
    monthlyDeposit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * ERC20 approve is required to be done for this contract earlier, also  fundsDeposit should be enough otherwise contract will not accept
     * this function is used to initiate a new SIP along with first deposit
     * @param _planId : choose a SIP plan
     */
    newSIP(
      _planId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * whenever a deposit is done by user, benefit amount (to be paid in due plan time) will be already added to this. and in case of withdrawl, it is subtracted from this.
     */
    pendingBenefitAmountOfAllStakers(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * allocating storage for multiple sip plans
     */
    sipPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isPlanActive: boolean;
      minimumMonthlyCommitmentAmount: BigNumber;
      accumulationPeriodMonths: number;
      benefitPeriodYears: number;
      gracePeriodSeconds: number;
      monthlyBenefitFactor: number;
      gracePenaltyFactor: number;
      defaultPenaltyFactor: number;
      0: boolean;
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: number;
      6: number;
      7: number;
    }>;

    /**
     * allocating storage for multiple sips of multiple users
     */
    sips(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      planId: number;
      stakingTimestamp: number;
      monthlyCommitmentAmount: BigNumber;
      totalDeposited: BigNumber;
      lastWithdrawlMonthId: number;
      powerBoosterWithdrawls: number;
      numberOfAppointees: number;
      appointeeVotes: number;
      0: number;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
    }>;

    /**
     * this function is used to update appointee status of a wallet address in SIP
     * @param _appointeeAddress : eth wallet address of appointee.
     * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
     * @param _sipId : id of SIP in staker portfolio.
     */
    toogleAppointee(
      _sipId: BigNumberish,
      _appointeeAddress: string,
      _newAppointeeStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is used to update nominee status of a wallet address in SIP
     * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _sipId : id of SIP in staker portfolio.
     */
    toogleNominee(
      _sipId: BigNumberish,
      _nomineeAddress: string,
      _newNomineeStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * sips already initiated by a plan will continue only new will be restricted
     * this function is used by owner to disable or re-enable a sip plan
     * @param _newStatus : true or false.
     * @param _planId : select a plan to make it inactive
     */
    updatePlanStatus(
      _planId: BigNumberish,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is used to view appointation
     * @param _appointeeAddress : eth wallet address of apointee.
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    viewAppointation(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _appointeeAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    viewMonthlyBenefitAmount(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _depositMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * this function is used to view nomination
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    viewNomination(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _nomineeAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * withdraw can be done by any nominee of this SIP.
     * this function is used to withdraw benefits.
     * @param _sipId : id of SIP in staker address portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     * @param _withdrawlMonthId : withdraw month id starts from 1 upto as per plan.
     */
    withdrawBenefit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _withdrawlMonthId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this is used by owner to withdraw ES that are not allocated to any SIP
     * @param _withdrawlAmount : amount in exaES to withdraw
     */
    withdrawFunds(
      _withdrawlAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * withdraw can be done by any nominee of this SIP.
     * this functin is used to withdraw powerbooster
     * @param _sipId : id of SIP in staker address portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    withdrawPowerBooster(
      _stakerAddress: string,
      _sipId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  EARTH_SECONDS_IN_MONTH(overrides?: CallOverrides): Promise<number>;

  /**
   * this function is used by donors to add funds to fundsDeposit
   */
  addFunds(overrides?: PayableOverrides): Promise<ContractTransaction>;

  /**
   * need to be appointee, set by staker themselves
   * this function is used by appointee to vote that nominees can withdraw early
   * @param _sipId : id of SIP in staker portfolio.
   * @param _stakerAddress : address of initiater of this SIP.
   */
  appointeeVote(
    _stakerAddress: string,
    _sipId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is used by owner to create plans for new SIPs
   * @param _accumulationPeriodMonths : number of months to deposit commitment amount
   * @param _benefitPeriodYears : number of years of benefit
   * @param _defaultPenaltyFactor : due to missing deposits, this is per 1000
   * @param _gracePenaltyFactor : due to late deposits, this is per 1000
   * @param _gracePeriodSeconds : grace allowance to stakers to deposit monthly
   * @param _minimumMonthlyCommitmentAmount : minimum SIP monthly amount in exaES
   * @param _monthlyBenefitFactor : this is per 1000; i.e 200 for 20%
   */
  createSIPPlan(
    _minimumMonthlyCommitmentAmount: BigNumberish,
    _accumulationPeriodMonths: BigNumberish,
    _benefitPeriodYears: BigNumberish,
    _gracePeriodSeconds: BigNumberish,
    _monthlyBenefitFactor: BigNumberish,
    _gracePenaltyFactor: BigNumberish,
    _defaultPenaltyFactor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * deposited by Era Swap Donors. It is given as benefits to  ES stakers. on every withdrawl this deposit is reduced, and on some point of time if enough fundsDeposit is not available to assure staker benefit, contract will allow staker to deposit
   */
  fundsDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * this function is used to read all time deposit status of any staker SIP
   * @param _monthId : deposit month id starts from 1 upto as per plan
   * @param _sipId : id of SIP in staker portfolio.
   * @param _stakerAddress : address of initiater of this SIP.
   */
  getDepositDoneStatus(
    _stakerAddress: string,
    _sipId: BigNumberish,
    _monthId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   * it is used in deposit function require statement.
   * this function is used to calculate deposit status according to current time
   * @param _monthId : deposit month id to calculate status for
   * @param _sipId : id of SIP in staker portfolio.
   * @param _stakerAddress : address of initiater of this SIP.
   */
  getDepositStatus(
    _stakerAddress: string,
    _sipId: BigNumberish,
    _monthId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   * this function is used to get avalilable withdrawls upto a withdrawl month id
   * @param _isNomineeWithdrawing : different status in case of nominee withdrawl
   * @param _sipId : id of SIP in staker portfolio.
   * @param _stakerAddress : address of initiater of this SIP.
   * @param _withdrawlMonthId : withdrawl month id upto which to calculate returns for
   */
  getPendingWithdrawlAmount(
    _stakerAddress: string,
    _sipId: BigNumberish,
    _withdrawlMonthId: BigNumberish,
    _isNomineeWithdrawing: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSip(
    _staker: string,
    _sipId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    planId: number;
    stakingTimestamp: number;
    monthlyCommitmentAmount: BigNumber;
    totalDeposited: BigNumber;
    lastWithdrawlMonthId: number;
    powerBoosterWithdrawls: number;
    numberOfAppointees: number;
    appointeeVotes: number;
    0: number;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: number;
    6: number;
    7: number;
  }>;

  migrateDeposit(
    _stakerAddress: string,
    _sipId: BigNumberish,
    _monthId: BigNumberish,
    _depositStatusAdmin: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  migrateSip(
    _staker: string,
    _planId: BigNumberish,
    _stakingTimestamp: BigNumberish,
    _lastWithdrawlMonthId: BigNumberish,
    _powerBoosterWithdrawls: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * @param _monthId : specify the month to deposit
   */
  monthlyDeposit(
    _stakerAddress: string,
    _sipId: BigNumberish,
    _monthId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * ERC20 approve is required to be done for this contract earlier, also  fundsDeposit should be enough otherwise contract will not accept
   * this function is used to initiate a new SIP along with first deposit
   * @param _planId : choose a SIP plan
   */
  newSIP(
    _planId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * whenever a deposit is done by user, benefit amount (to be paid in due plan time) will be already added to this. and in case of withdrawl, it is subtracted from this.
   */
  pendingBenefitAmountOfAllStakers(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * allocating storage for multiple sip plans
   */
  sipPlans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    isPlanActive: boolean;
    minimumMonthlyCommitmentAmount: BigNumber;
    accumulationPeriodMonths: number;
    benefitPeriodYears: number;
    gracePeriodSeconds: number;
    monthlyBenefitFactor: number;
    gracePenaltyFactor: number;
    defaultPenaltyFactor: number;
    0: boolean;
    1: BigNumber;
    2: number;
    3: number;
    4: number;
    5: number;
    6: number;
    7: number;
  }>;

  /**
   * allocating storage for multiple sips of multiple users
   */
  sips(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    planId: number;
    stakingTimestamp: number;
    monthlyCommitmentAmount: BigNumber;
    totalDeposited: BigNumber;
    lastWithdrawlMonthId: number;
    powerBoosterWithdrawls: number;
    numberOfAppointees: number;
    appointeeVotes: number;
    0: number;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: number;
    5: number;
    6: number;
    7: number;
  }>;

  /**
   * this function is used to update appointee status of a wallet address in SIP
   * @param _appointeeAddress : eth wallet address of appointee.
   * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
   * @param _sipId : id of SIP in staker portfolio.
   */
  toogleAppointee(
    _sipId: BigNumberish,
    _appointeeAddress: string,
    _newAppointeeStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is used to update nominee status of a wallet address in SIP
   * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
   * @param _nomineeAddress : eth wallet address of nominee.
   * @param _sipId : id of SIP in staker portfolio.
   */
  toogleNominee(
    _sipId: BigNumberish,
    _nomineeAddress: string,
    _newNomineeStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * sips already initiated by a plan will continue only new will be restricted
   * this function is used by owner to disable or re-enable a sip plan
   * @param _newStatus : true or false.
   * @param _planId : select a plan to make it inactive
   */
  updatePlanStatus(
    _planId: BigNumberish,
    _newStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is used to view appointation
   * @param _appointeeAddress : eth wallet address of apointee.
   * @param _sipId : id of SIP in staker portfolio.
   * @param _stakerAddress : address of initiater of this SIP.
   */
  viewAppointation(
    _stakerAddress: string,
    _sipId: BigNumberish,
    _appointeeAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  viewMonthlyBenefitAmount(
    _stakerAddress: string,
    _sipId: BigNumberish,
    _depositMonthId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * this function is used to view nomination
   * @param _nomineeAddress : eth wallet address of nominee.
   * @param _sipId : id of SIP in staker portfolio.
   * @param _stakerAddress : address of initiater of this SIP.
   */
  viewNomination(
    _stakerAddress: string,
    _sipId: BigNumberish,
    _nomineeAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * withdraw can be done by any nominee of this SIP.
   * this function is used to withdraw benefits.
   * @param _sipId : id of SIP in staker address portfolio.
   * @param _stakerAddress : address of initiater of this SIP.
   * @param _withdrawlMonthId : withdraw month id starts from 1 upto as per plan.
   */
  withdrawBenefit(
    _stakerAddress: string,
    _sipId: BigNumberish,
    _withdrawlMonthId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this is used by owner to withdraw ES that are not allocated to any SIP
   * @param _withdrawlAmount : amount in exaES to withdraw
   */
  withdrawFunds(
    _withdrawlAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * withdraw can be done by any nominee of this SIP.
   * this functin is used to withdraw powerbooster
   * @param _sipId : id of SIP in staker address portfolio.
   * @param _stakerAddress : address of initiater of this SIP.
   */
  withdrawPowerBooster(
    _stakerAddress: string,
    _sipId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    EARTH_SECONDS_IN_MONTH(overrides?: CallOverrides): Promise<number>;

    /**
     * this function is used by donors to add funds to fundsDeposit
     */
    addFunds(overrides?: CallOverrides): Promise<void>;

    /**
     * need to be appointee, set by staker themselves
     * this function is used by appointee to vote that nominees can withdraw early
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    appointeeVote(
      _stakerAddress: string,
      _sipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is used by owner to create plans for new SIPs
     * @param _accumulationPeriodMonths : number of months to deposit commitment amount
     * @param _benefitPeriodYears : number of years of benefit
     * @param _defaultPenaltyFactor : due to missing deposits, this is per 1000
     * @param _gracePenaltyFactor : due to late deposits, this is per 1000
     * @param _gracePeriodSeconds : grace allowance to stakers to deposit monthly
     * @param _minimumMonthlyCommitmentAmount : minimum SIP monthly amount in exaES
     * @param _monthlyBenefitFactor : this is per 1000; i.e 200 for 20%
     */
    createSIPPlan(
      _minimumMonthlyCommitmentAmount: BigNumberish,
      _accumulationPeriodMonths: BigNumberish,
      _benefitPeriodYears: BigNumberish,
      _gracePeriodSeconds: BigNumberish,
      _monthlyBenefitFactor: BigNumberish,
      _gracePenaltyFactor: BigNumberish,
      _defaultPenaltyFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * deposited by Era Swap Donors. It is given as benefits to  ES stakers. on every withdrawl this deposit is reduced, and on some point of time if enough fundsDeposit is not available to assure staker benefit, contract will allow staker to deposit
     */
    fundsDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is used to read all time deposit status of any staker SIP
     * @param _monthId : deposit month id starts from 1 upto as per plan
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    getDepositDoneStatus(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * it is used in deposit function require statement.
     * this function is used to calculate deposit status according to current time
     * @param _monthId : deposit month id to calculate status for
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    getDepositStatus(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * this function is used to get avalilable withdrawls upto a withdrawl month id
     * @param _isNomineeWithdrawing : different status in case of nominee withdrawl
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     * @param _withdrawlMonthId : withdrawl month id upto which to calculate returns for
     */
    getPendingWithdrawlAmount(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _withdrawlMonthId: BigNumberish,
      _isNomineeWithdrawing: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSip(
      _staker: string,
      _sipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      planId: number;
      stakingTimestamp: number;
      monthlyCommitmentAmount: BigNumber;
      totalDeposited: BigNumber;
      lastWithdrawlMonthId: number;
      powerBoosterWithdrawls: number;
      numberOfAppointees: number;
      appointeeVotes: number;
      0: number;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
    }>;

    migrateDeposit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      _depositStatusAdmin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateSip(
      _staker: string,
      _planId: BigNumberish,
      _stakingTimestamp: BigNumberish,
      _lastWithdrawlMonthId: BigNumberish,
      _powerBoosterWithdrawls: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _monthId : specify the month to deposit
     */
    monthlyDeposit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * ERC20 approve is required to be done for this contract earlier, also  fundsDeposit should be enough otherwise contract will not accept
     * this function is used to initiate a new SIP along with first deposit
     * @param _planId : choose a SIP plan
     */
    newSIP(_planId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * whenever a deposit is done by user, benefit amount (to be paid in due plan time) will be already added to this. and in case of withdrawl, it is subtracted from this.
     */
    pendingBenefitAmountOfAllStakers(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * allocating storage for multiple sip plans
     */
    sipPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isPlanActive: boolean;
      minimumMonthlyCommitmentAmount: BigNumber;
      accumulationPeriodMonths: number;
      benefitPeriodYears: number;
      gracePeriodSeconds: number;
      monthlyBenefitFactor: number;
      gracePenaltyFactor: number;
      defaultPenaltyFactor: number;
      0: boolean;
      1: BigNumber;
      2: number;
      3: number;
      4: number;
      5: number;
      6: number;
      7: number;
    }>;

    /**
     * allocating storage for multiple sips of multiple users
     */
    sips(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      planId: number;
      stakingTimestamp: number;
      monthlyCommitmentAmount: BigNumber;
      totalDeposited: BigNumber;
      lastWithdrawlMonthId: number;
      powerBoosterWithdrawls: number;
      numberOfAppointees: number;
      appointeeVotes: number;
      0: number;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: number;
      5: number;
      6: number;
      7: number;
    }>;

    /**
     * this function is used to update appointee status of a wallet address in SIP
     * @param _appointeeAddress : eth wallet address of appointee.
     * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
     * @param _sipId : id of SIP in staker portfolio.
     */
    toogleAppointee(
      _sipId: BigNumberish,
      _appointeeAddress: string,
      _newAppointeeStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is used to update nominee status of a wallet address in SIP
     * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _sipId : id of SIP in staker portfolio.
     */
    toogleNominee(
      _sipId: BigNumberish,
      _nomineeAddress: string,
      _newNomineeStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * sips already initiated by a plan will continue only new will be restricted
     * this function is used by owner to disable or re-enable a sip plan
     * @param _newStatus : true or false.
     * @param _planId : select a plan to make it inactive
     */
    updatePlanStatus(
      _planId: BigNumberish,
      _newStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is used to view appointation
     * @param _appointeeAddress : eth wallet address of apointee.
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    viewAppointation(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _appointeeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    viewMonthlyBenefitAmount(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _depositMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to view nomination
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    viewNomination(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _nomineeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * withdraw can be done by any nominee of this SIP.
     * this function is used to withdraw benefits.
     * @param _sipId : id of SIP in staker address portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     * @param _withdrawlMonthId : withdraw month id starts from 1 upto as per plan.
     */
    withdrawBenefit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _withdrawlMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this is used by owner to withdraw ES that are not allocated to any SIP
     * @param _withdrawlAmount : amount in exaES to withdraw
     */
    withdrawFunds(
      _withdrawlAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * withdraw can be done by any nominee of this SIP.
     * this functin is used to withdraw powerbooster
     * @param _sipId : id of SIP in staker address portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    withdrawPowerBooster(
      _stakerAddress: string,
      _sipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AppointeeUpdated(
      staker: string | null,
      sipId: BigNumberish | null,
      appointeeAddress: string | null,
      appointeeStatus: null
    ): EventFilter;

    AppointeeVoted(
      staker: string | null,
      sipId: BigNumberish | null,
      appointeeAddress: string | null
    ): EventFilter;

    BenefitWithdrawl(
      staker: string | null,
      sipId: BigNumberish | null,
      fromMonthId: null,
      toMonthId: null,
      withdrawlAmount: null,
      withdrawnBy: null
    ): EventFilter;

    FundsDeposited(depositAmount: null): EventFilter;

    FundsWithdrawn(withdrawlAmount: null): EventFilter;

    NewDeposit(
      staker: string | null,
      sipId: BigNumberish | null,
      monthId: null,
      depositAmount: null,
      benefitQueued: null,
      depositedBy: null
    ): EventFilter;

    NewSIP(
      staker: string | null,
      sipId: null,
      monthlyCommitmentAmount: null
    ): EventFilter;

    NomineeUpdated(
      staker: string | null,
      sipId: BigNumberish | null,
      nomineeAddress: string | null,
      nomineeStatus: null
    ): EventFilter;

    PowerBoosterWithdrawl(
      staker: string | null,
      sipId: BigNumberish | null,
      boosterSerial: null,
      withdrawlAmount: null,
      withdrawnBy: null
    ): EventFilter;
  };

  estimateGas: {
    EARTH_SECONDS_IN_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is used by donors to add funds to fundsDeposit
     */
    addFunds(overrides?: PayableOverrides): Promise<BigNumber>;

    /**
     * need to be appointee, set by staker themselves
     * this function is used by appointee to vote that nominees can withdraw early
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    appointeeVote(
      _stakerAddress: string,
      _sipId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is used by owner to create plans for new SIPs
     * @param _accumulationPeriodMonths : number of months to deposit commitment amount
     * @param _benefitPeriodYears : number of years of benefit
     * @param _defaultPenaltyFactor : due to missing deposits, this is per 1000
     * @param _gracePenaltyFactor : due to late deposits, this is per 1000
     * @param _gracePeriodSeconds : grace allowance to stakers to deposit monthly
     * @param _minimumMonthlyCommitmentAmount : minimum SIP monthly amount in exaES
     * @param _monthlyBenefitFactor : this is per 1000; i.e 200 for 20%
     */
    createSIPPlan(
      _minimumMonthlyCommitmentAmount: BigNumberish,
      _accumulationPeriodMonths: BigNumberish,
      _benefitPeriodYears: BigNumberish,
      _gracePeriodSeconds: BigNumberish,
      _monthlyBenefitFactor: BigNumberish,
      _gracePenaltyFactor: BigNumberish,
      _defaultPenaltyFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * deposited by Era Swap Donors. It is given as benefits to  ES stakers. on every withdrawl this deposit is reduced, and on some point of time if enough fundsDeposit is not available to assure staker benefit, contract will allow staker to deposit
     */
    fundsDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is used to read all time deposit status of any staker SIP
     * @param _monthId : deposit month id starts from 1 upto as per plan
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    getDepositDoneStatus(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * it is used in deposit function require statement.
     * this function is used to calculate deposit status according to current time
     * @param _monthId : deposit month id to calculate status for
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    getDepositStatus(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to get avalilable withdrawls upto a withdrawl month id
     * @param _isNomineeWithdrawing : different status in case of nominee withdrawl
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     * @param _withdrawlMonthId : withdrawl month id upto which to calculate returns for
     */
    getPendingWithdrawlAmount(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _withdrawlMonthId: BigNumberish,
      _isNomineeWithdrawing: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSip(
      _staker: string,
      _sipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateDeposit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      _depositStatusAdmin: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    migrateSip(
      _staker: string,
      _planId: BigNumberish,
      _stakingTimestamp: BigNumberish,
      _lastWithdrawlMonthId: BigNumberish,
      _powerBoosterWithdrawls: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * @param _monthId : specify the month to deposit
     */
    monthlyDeposit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * ERC20 approve is required to be done for this contract earlier, also  fundsDeposit should be enough otherwise contract will not accept
     * this function is used to initiate a new SIP along with first deposit
     * @param _planId : choose a SIP plan
     */
    newSIP(
      _planId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * whenever a deposit is done by user, benefit amount (to be paid in due plan time) will be already added to this. and in case of withdrawl, it is subtracted from this.
     */
    pendingBenefitAmountOfAllStakers(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * allocating storage for multiple sip plans
     */
    sipPlans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * allocating storage for multiple sips of multiple users
     */
    sips(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to update appointee status of a wallet address in SIP
     * @param _appointeeAddress : eth wallet address of appointee.
     * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
     * @param _sipId : id of SIP in staker portfolio.
     */
    toogleAppointee(
      _sipId: BigNumberish,
      _appointeeAddress: string,
      _newAppointeeStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is used to update nominee status of a wallet address in SIP
     * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _sipId : id of SIP in staker portfolio.
     */
    toogleNominee(
      _sipId: BigNumberish,
      _nomineeAddress: string,
      _newNomineeStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * sips already initiated by a plan will continue only new will be restricted
     * this function is used by owner to disable or re-enable a sip plan
     * @param _newStatus : true or false.
     * @param _planId : select a plan to make it inactive
     */
    updatePlanStatus(
      _planId: BigNumberish,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is used to view appointation
     * @param _appointeeAddress : eth wallet address of apointee.
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    viewAppointation(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _appointeeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewMonthlyBenefitAmount(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _depositMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * this function is used to view nomination
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    viewNomination(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _nomineeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * withdraw can be done by any nominee of this SIP.
     * this function is used to withdraw benefits.
     * @param _sipId : id of SIP in staker address portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     * @param _withdrawlMonthId : withdraw month id starts from 1 upto as per plan.
     */
    withdrawBenefit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _withdrawlMonthId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this is used by owner to withdraw ES that are not allocated to any SIP
     * @param _withdrawlAmount : amount in exaES to withdraw
     */
    withdrawFunds(
      _withdrawlAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * withdraw can be done by any nominee of this SIP.
     * this functin is used to withdraw powerbooster
     * @param _sipId : id of SIP in staker address portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    withdrawPowerBooster(
      _stakerAddress: string,
      _sipId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EARTH_SECONDS_IN_MONTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used by donors to add funds to fundsDeposit
     */
    addFunds(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    /**
     * need to be appointee, set by staker themselves
     * this function is used by appointee to vote that nominees can withdraw early
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    appointeeVote(
      _stakerAddress: string,
      _sipId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used by owner to create plans for new SIPs
     * @param _accumulationPeriodMonths : number of months to deposit commitment amount
     * @param _benefitPeriodYears : number of years of benefit
     * @param _defaultPenaltyFactor : due to missing deposits, this is per 1000
     * @param _gracePenaltyFactor : due to late deposits, this is per 1000
     * @param _gracePeriodSeconds : grace allowance to stakers to deposit monthly
     * @param _minimumMonthlyCommitmentAmount : minimum SIP monthly amount in exaES
     * @param _monthlyBenefitFactor : this is per 1000; i.e 200 for 20%
     */
    createSIPPlan(
      _minimumMonthlyCommitmentAmount: BigNumberish,
      _accumulationPeriodMonths: BigNumberish,
      _benefitPeriodYears: BigNumberish,
      _gracePeriodSeconds: BigNumberish,
      _monthlyBenefitFactor: BigNumberish,
      _gracePenaltyFactor: BigNumberish,
      _defaultPenaltyFactor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * deposited by Era Swap Donors. It is given as benefits to  ES stakers. on every withdrawl this deposit is reduced, and on some point of time if enough fundsDeposit is not available to assure staker benefit, contract will allow staker to deposit
     */
    fundsDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function is used to read all time deposit status of any staker SIP
     * @param _monthId : deposit month id starts from 1 upto as per plan
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    getDepositDoneStatus(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * it is used in deposit function require statement.
     * this function is used to calculate deposit status according to current time
     * @param _monthId : deposit month id to calculate status for
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    getDepositStatus(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to get avalilable withdrawls upto a withdrawl month id
     * @param _isNomineeWithdrawing : different status in case of nominee withdrawl
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     * @param _withdrawlMonthId : withdrawl month id upto which to calculate returns for
     */
    getPendingWithdrawlAmount(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _withdrawlMonthId: BigNumberish,
      _isNomineeWithdrawing: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSip(
      _staker: string,
      _sipId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateDeposit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      _depositStatusAdmin: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    migrateSip(
      _staker: string,
      _planId: BigNumberish,
      _stakingTimestamp: BigNumberish,
      _lastWithdrawlMonthId: BigNumberish,
      _powerBoosterWithdrawls: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _monthId : specify the month to deposit
     */
    monthlyDeposit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _monthId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * ERC20 approve is required to be done for this contract earlier, also  fundsDeposit should be enough otherwise contract will not accept
     * this function is used to initiate a new SIP along with first deposit
     * @param _planId : choose a SIP plan
     */
    newSIP(
      _planId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * whenever a deposit is done by user, benefit amount (to be paid in due plan time) will be already added to this. and in case of withdrawl, it is subtracted from this.
     */
    pendingBenefitAmountOfAllStakers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * allocating storage for multiple sip plans
     */
    sipPlans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * allocating storage for multiple sips of multiple users
     */
    sips(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to update appointee status of a wallet address in SIP
     * @param _appointeeAddress : eth wallet address of appointee.
     * @param _newAppointeeStatus : true or false, should this have appointee rights or not.
     * @param _sipId : id of SIP in staker portfolio.
     */
    toogleAppointee(
      _sipId: BigNumberish,
      _appointeeAddress: string,
      _newAppointeeStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to update nominee status of a wallet address in SIP
     * @param _newNomineeStatus : true or false, whether this should be a nominee or not.
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _sipId : id of SIP in staker portfolio.
     */
    toogleNominee(
      _sipId: BigNumberish,
      _nomineeAddress: string,
      _newNomineeStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * sips already initiated by a plan will continue only new will be restricted
     * this function is used by owner to disable or re-enable a sip plan
     * @param _newStatus : true or false.
     * @param _planId : select a plan to make it inactive
     */
    updatePlanStatus(
      _planId: BigNumberish,
      _newStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to view appointation
     * @param _appointeeAddress : eth wallet address of apointee.
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    viewAppointation(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _appointeeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewMonthlyBenefitAmount(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _depositMonthId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used to view nomination
     * @param _nomineeAddress : eth wallet address of nominee.
     * @param _sipId : id of SIP in staker portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    viewNomination(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _nomineeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * withdraw can be done by any nominee of this SIP.
     * this function is used to withdraw benefits.
     * @param _sipId : id of SIP in staker address portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     * @param _withdrawlMonthId : withdraw month id starts from 1 upto as per plan.
     */
    withdrawBenefit(
      _stakerAddress: string,
      _sipId: BigNumberish,
      _withdrawlMonthId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this is used by owner to withdraw ES that are not allocated to any SIP
     * @param _withdrawlAmount : amount in exaES to withdraw
     */
    withdrawFunds(
      _withdrawlAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * withdraw can be done by any nominee of this SIP.
     * this functin is used to withdraw powerbooster
     * @param _sipId : id of SIP in staker address portfolio.
     * @param _stakerAddress : address of initiater of this SIP.
     */
    withdrawPowerBooster(
      _stakerAddress: string,
      _sipId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
