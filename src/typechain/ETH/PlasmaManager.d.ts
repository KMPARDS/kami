/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface PlasmaManagerInterface extends ethers.utils.Interface {
  functions: {
    'getAllSigners()': FunctionFragment;
    'getAllValidators()': FunctionFragment;
    'getBunchHeader(uint256)': FunctionFragment;
    'getNextStartBlockNumber()': FunctionFragment;
    'getValidator(uint256)': FunctionFragment;
    'isValidator(address)': FunctionFragment;
    'lastBunchIndex()': FunctionFragment;
    'setInitialValues(address,address[])': FunctionFragment;
    'submitBunchHeader(bytes)': FunctionFragment;
    'token()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'getAllSigners', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAllValidators', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBunchHeader', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getNextStartBlockNumber', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getValidator', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'isValidator', values: [string]): string;
  encodeFunctionData(functionFragment: 'lastBunchIndex', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setInitialValues', values: [string, string[]]): string;
  encodeFunctionData(functionFragment: 'submitBunchHeader', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getAllSigners', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAllValidators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBunchHeader', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNextStartBlockNumber', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isValidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lastBunchIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInitialValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'submitBunchHeader', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;

  events: {
    'NewBunchHeader(uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewBunchHeader'): EventFragment;
}

export class PlasmaManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PlasmaManagerInterface;

  functions: {
    getAllSigners(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getAllValidators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getBunchHeader(
      _bunchIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        startBlockNumber: BigNumber;
        bunchDepth: BigNumber;
        transactionsMegaRoot: string;
        receiptsMegaRoot: string;
        lastBlockHash: string;
        0: BigNumber;
        1: BigNumber;
        2: string;
        3: string;
        4: string;
      };
    }>;

    getNextStartBlockNumber(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lastBunchIndex(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setInitialValues(
      _token: string,
      _validators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitBunchHeader(
      _signedHeader: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  getAllSigners(overrides?: CallOverrides): Promise<string[]>;

  getAllValidators(overrides?: CallOverrides): Promise<string[]>;

  getBunchHeader(
    _bunchIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startBlockNumber: BigNumber;
    bunchDepth: BigNumber;
    transactionsMegaRoot: string;
    receiptsMegaRoot: string;
    lastBlockHash: string;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: string;
    4: string;
  }>;

  getNextStartBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getValidator(_validatorIndex: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isValidator(_validator: string, overrides?: CallOverrides): Promise<boolean>;

  lastBunchIndex(overrides?: CallOverrides): Promise<BigNumber>;

  setInitialValues(
    _token: string,
    _validators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitBunchHeader(_signedHeader: BytesLike, overrides?: Overrides): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAllSigners(overrides?: CallOverrides): Promise<string[]>;

    getAllValidators(overrides?: CallOverrides): Promise<string[]>;

    getBunchHeader(
      _bunchIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startBlockNumber: BigNumber;
      bunchDepth: BigNumber;
      transactionsMegaRoot: string;
      receiptsMegaRoot: string;
      lastBlockHash: string;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: string;
      4: string;
    }>;

    getNextStartBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getValidator(_validatorIndex: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isValidator(_validator: string, overrides?: CallOverrides): Promise<boolean>;

    lastBunchIndex(overrides?: CallOverrides): Promise<BigNumber>;

    setInitialValues(
      _token: string,
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitBunchHeader(_signedHeader: BytesLike, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    NewBunchHeader(_startBlockNumber: null, _bunchDepth: null, _bunchIndex: null): EventFilter;
  };

  estimateGas: {
    getAllSigners(): Promise<BigNumber>;
    getAllValidators(): Promise<BigNumber>;
    getBunchHeader(_bunchIndex: BigNumberish): Promise<BigNumber>;
    getNextStartBlockNumber(): Promise<BigNumber>;
    getValidator(_validatorIndex: BigNumberish): Promise<BigNumber>;
    isValidator(_validator: string): Promise<BigNumber>;
    lastBunchIndex(): Promise<BigNumber>;
    setInitialValues(_token: string, _validators: string[]): Promise<BigNumber>;
    submitBunchHeader(_signedHeader: BytesLike): Promise<BigNumber>;
    token(): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllSigners(): Promise<PopulatedTransaction>;
    getAllValidators(): Promise<PopulatedTransaction>;
    getBunchHeader(_bunchIndex: BigNumberish): Promise<PopulatedTransaction>;
    getNextStartBlockNumber(): Promise<PopulatedTransaction>;
    getValidator(_validatorIndex: BigNumberish): Promise<PopulatedTransaction>;
    isValidator(_validator: string): Promise<PopulatedTransaction>;
    lastBunchIndex(): Promise<PopulatedTransaction>;
    setInitialValues(_token: string, _validators: string[]): Promise<PopulatedTransaction>;
    submitBunchHeader(_signedHeader: BytesLike): Promise<PopulatedTransaction>;
    token(): Promise<PopulatedTransaction>;
  };
}
