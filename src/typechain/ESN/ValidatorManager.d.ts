/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ValidatorManagerInterface extends ethers.utils.Interface {
  functions: {
    "dayswappers()": FunctionFragment;
    "getAdjustedAmount(uint256,uint256,uint256)": FunctionFragment;
    "getCommission(uint32,address)": FunctionFragment;
    "getDelegationShare(uint32,address,address)": FunctionFragment;
    "getDelegatorByAddress(uint32,address,address)": FunctionFragment;
    "getDelegatorByIndex(uint32,uint256,uint256)": FunctionFragment;
    "getDelegatorIndex(uint32,uint256,address)": FunctionFragment;
    "getLuckyValidatorAddress()": FunctionFragment;
    "getMonthlyNRT(uint32)": FunctionFragment;
    "getTotalAdjustedStakings(uint32)": FunctionFragment;
    "getTotalBlocksSealed(uint32)": FunctionFragment;
    "getValidatorByAddress(uint32,address)": FunctionFragment;
    "getValidatorByIndex(uint32,uint256)": FunctionFragment;
    "getValidatorEarning(uint32,address)": FunctionFragment;
    "getValidatorIndex(uint32,address)": FunctionFragment;
    "getValidators(uint32)": FunctionFragment;
    "kycDapp()": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "pickValidator(uint32,uint256)": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "randomnessManager()": FunctionFragment;
    "receiveNrt(uint32)": FunctionFragment;
    "registerBlock(address)": FunctionFragment;
    "registerDelegation(uint32,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolveAddress(bytes32)": FunctionFragment;
    "resolveUsername(address)": FunctionFragment;
    "resolveUsernameStrict(address)": FunctionFragment;
    "setCommission(uint32,uint256)": FunctionFragment;
    "setInitialValues()": FunctionFragment;
    "setKycDapp(address)": FunctionFragment;
    "timeallyClub()": FunctionFragment;
    "timeallyManager()": FunctionFragment;
    "timeallyPromotionalBucket()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validatorManager()": FunctionFragment;
    "withdrawCommission(uint32)": FunctionFragment;
    "withdrawDelegationShare(uint32,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "dayswappers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAdjustedAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommission",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationShare",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorByAddress",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorByIndex",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatorIndex",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLuckyValidatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMonthlyNRT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAdjustedStakings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksSealed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorByAddress",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorEarning",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorIndex",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "kycDapp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pickValidator",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomnessManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveNrt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDelegation",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsername",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveUsernameStrict",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommission",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialValues",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setKycDapp", values: [string]): string;
  encodeFunctionData(
    functionFragment: "timeallyClub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyPromotionalBucket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCommission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDelegationShare",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "dayswappers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdjustedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatorIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLuckyValidatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMonthlyNRT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAdjustedStakings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksSealed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorEarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycDapp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pickValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomnessManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receiveNrt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveUsernameStrict",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeallyClub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyPromotionalBucket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDelegationShare",
    data: BytesLike
  ): Result;

  events: {
    "Delegation(address,uint32,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ValidatorManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ValidatorManagerInterface;

  functions: {
    dayswappers(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Gets quadratic adjustment amount for a given amount.
     * @param _amount : Initial amount.
     * @param _base : Amount intervals in which adjustment rate should increase.
     * @param _premiumFactor : Factor in which premium increases.
     */
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getCommission(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Get delegator by addresses.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of the delegating contract.
     * @param _validator : Address of the validator.
     */
    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      };
    }>;

    /**
     * Gets delegator by validator and delegator index.
     * @param _delegatorIndex : Index of delegator in array.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of validator in array.
     */
    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      };
    }>;

    /**
     * Gets delegator index.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of delegatinng staking contract.
     * @param _validatorIndex : Index of the validator.
     */
    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets address of a lucky vaidator based on PoS.
     */
    getLuckyValidatorAddress(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets total adjusted stakings for the month.
     * @param _month : NRT Month.
     */
    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets total blocks sealed in the month.
     * @param _month : NRT Month.
     */
    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets validator by month and address
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      };
    }>;

    /**
     * Gets validator by month and index.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of the validator in array.
     */
    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      };
    }>;

    /**
     * Can be called after NRT is released.
     * Gets earnings of a validator based on blocks sealed in previous months.
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets validator index.
     * @param _month : NRT Month.
     * @param _validator : Address of the validator.
     */
    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets all validators for the month.
     * @param _month : NRT Month.
     */
    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      }[];
    }>;

    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Picks a validator index based on PoS.
     * @param _month : NRT Month.
     * @param _seed : Pseudo random seed.
     */
    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows block reward contract to register a sealed block by validator.
     * @param _sealer : Address of validator who sealed the block.
     */
    registerBlock(
      _sealer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows a TimeAlly staking to register a delegation.
     * @param _extraData : Address of validator to delegate.
     * @param _month : NRT Month.
     */
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Allows a validator to set commission.
     * @param _month : NRT month.
     * @param _perThousandCommission : Per thousand commission of validator.
     */
    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows NRT Manager contract to send NRT share for Validator Manager.
     */
    setInitialValues(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    timeallyClub(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Allows a validator to withdraw their commission.
     * @param _month : NRT Month.
     */
    withdrawCommission(
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows staking owners to withdraw share from validators earnings.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of staking contract which has delegated.
     * @param _validator : Address of validator.
     */
    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  dayswappers(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets quadratic adjustment amount for a given amount.
   * @param _amount : Initial amount.
   * @param _base : Amount intervals in which adjustment rate should increase.
   * @param _premiumFactor : Factor in which premium increases.
   */
  getAdjustedAmount(
    _amount: BigNumberish,
    _base: BigNumberish,
    _premiumFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCommission(
    _month: BigNumberish,
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDelegationShare(
    _month: BigNumberish,
    _validator: string,
    _stakingContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Get delegator by addresses.
   * @param _month : NRT Month.
   * @param _stakingContract : Address of the delegating contract.
   * @param _validator : Address of the validator.
   */
  getDelegatorByAddress(
    _month: BigNumberish,
    _validator: string,
    _stakingContract: string,
    overrides?: CallOverrides
  ): Promise<{
    stakingContract: string;
    amount: BigNumber;
    withdrawn: boolean;
    0: string;
    1: BigNumber;
    2: boolean;
  }>;

  /**
   * Gets delegator by validator and delegator index.
   * @param _delegatorIndex : Index of delegator in array.
   * @param _month : NRT Month.
   * @param _validatorIndex : Index of validator in array.
   */
  getDelegatorByIndex(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    _delegatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    stakingContract: string;
    amount: BigNumber;
    withdrawn: boolean;
    0: string;
    1: BigNumber;
    2: boolean;
  }>;

  /**
   * Gets delegator index.
   * @param _month : NRT Month.
   * @param _stakingContract : Address of delegatinng staking contract.
   * @param _validatorIndex : Index of the validator.
   */
  getDelegatorIndex(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    _stakingContract: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets address of a lucky vaidator based on PoS.
   */
  getLuckyValidatorAddress(overrides?: Overrides): Promise<ContractTransaction>;

  getMonthlyNRT(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets total adjusted stakings for the month.
   * @param _month : NRT Month.
   */
  getTotalAdjustedStakings(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets total blocks sealed in the month.
   * @param _month : NRT Month.
   */
  getTotalBlocksSealed(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets validator by month and address
   * @param _month : NRT Month.
   * @param _validator : Address of validator.
   */
  getValidatorByAddress(
    _month: BigNumberish,
    _validator: string,
    overrides?: CallOverrides
  ): Promise<{
    wallet: string;
    amount: BigNumber;
    adjustedAmount: BigNumber;
    perThousandCommission: BigNumber;
    blocksSealed: BigNumber;
    withdrawn: boolean;
    delegators: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
    6: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
  }>;

  /**
   * Gets validator by month and index.
   * @param _month : NRT Month.
   * @param _validatorIndex : Index of the validator in array.
   */
  getValidatorByIndex(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    wallet: string;
    amount: BigNumber;
    adjustedAmount: BigNumber;
    perThousandCommission: BigNumber;
    blocksSealed: BigNumber;
    withdrawn: boolean;
    delegators: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
    6: {
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
  }>;

  /**
   * Can be called after NRT is released.
   * Gets earnings of a validator based on blocks sealed in previous months.
   * @param _month : NRT Month.
   * @param _validator : Address of validator.
   */
  getValidatorEarning(
    _month: BigNumberish,
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets validator index.
   * @param _month : NRT Month.
   * @param _validator : Address of the validator.
   */
  getValidatorIndex(
    _month: BigNumberish,
    _validator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets all validators for the month.
   * @param _month : NRT Month.
   */
  getValidators(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      wallet: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blocksSealed: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }[]
  >;

  kycDapp(overrides?: CallOverrides): Promise<string>;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Picks a validator index based on PoS.
   * @param _month : NRT Month.
   * @param _seed : Pseudo random seed.
   */
  pickValidator(
    _month: BigNumberish,
    _seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prepaidEs(overrides?: CallOverrides): Promise<string>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows NRT Manager contract to send NRT share for TimeAlly.
   */
  receiveNrt(
    _currentNrtMonth: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows block reward contract to register a sealed block by validator.
   * @param _sealer : Address of validator who sealed the block.
   */
  registerBlock(
    _sealer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows a TimeAlly staking to register a delegation.
   * @param _extraData : Address of validator to delegate.
   * @param _month : NRT Month.
   */
  registerDelegation(
    _month: BigNumberish,
    _extraData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  resolveAddress(
    _username: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  resolveUsername(_wallet: string, overrides?: CallOverrides): Promise<string>;

  resolveUsernameStrict(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Allows a validator to set commission.
   * @param _month : NRT month.
   * @param _perThousandCommission : Per thousand commission of validator.
   */
  setCommission(
    _month: BigNumberish,
    _perThousandCommission: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows NRT Manager contract to send NRT share for Validator Manager.
   */
  setInitialValues(overrides?: CallOverrides): Promise<void>;

  setKycDapp(
    _kycDapp: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  timeallyClub(overrides?: CallOverrides): Promise<string>;

  timeallyManager(overrides?: CallOverrides): Promise<string>;

  timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Allows a validator to withdraw their commission.
   * @param _month : NRT Month.
   */
  withdrawCommission(
    _month: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows staking owners to withdraw share from validators earnings.
   * @param _month : NRT Month.
   * @param _stakingContract : Address of staking contract which has delegated.
   * @param _validator : Address of validator.
   */
  withdrawDelegationShare(
    _month: BigNumberish,
    _validator: string,
    _stakingContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    dayswappers(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets quadratic adjustment amount for a given amount.
     * @param _amount : Initial amount.
     * @param _base : Amount intervals in which adjustment rate should increase.
     * @param _premiumFactor : Factor in which premium increases.
     */
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommission(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get delegator by addresses.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of the delegating contract.
     * @param _validator : Address of the validator.
     */
    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<{
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    /**
     * Gets delegator by validator and delegator index.
     * @param _delegatorIndex : Index of delegator in array.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of validator in array.
     */
    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      stakingContract: string;
      amount: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    /**
     * Gets delegator index.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of delegatinng staking contract.
     * @param _validatorIndex : Index of the validator.
     */
    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets address of a lucky vaidator based on PoS.
     */
    getLuckyValidatorAddress(overrides?: CallOverrides): Promise<string>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets total adjusted stakings for the month.
     * @param _month : NRT Month.
     */
    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets total blocks sealed in the month.
     * @param _month : NRT Month.
     */
    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validator by month and address
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      wallet: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blocksSealed: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }>;

    /**
     * Gets validator by month and index.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of the validator in array.
     */
    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      wallet: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blocksSealed: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        amount: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }>;

    /**
     * Can be called after NRT is released.
     * Gets earnings of a validator based on blocks sealed in previous months.
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validator index.
     * @param _month : NRT Month.
     * @param _validator : Address of the validator.
     */
    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets all validators for the month.
     * @param _month : NRT Month.
     */
    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        wallet: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blocksSealed: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          amount: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      }[]
    >;

    kycDapp(overrides?: CallOverrides): Promise<string>;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Picks a validator index based on PoS.
     * @param _month : NRT Month.
     * @param _seed : Pseudo random seed.
     */
    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<string>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows block reward contract to register a sealed block by validator.
     * @param _sealer : Address of validator who sealed the block.
     */
    registerBlock(_sealer: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Allows a TimeAlly staking to register a delegation.
     * @param _extraData : Address of validator to delegate.
     * @param _month : NRT Month.
     */
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Allows a validator to set commission.
     * @param _month : NRT month.
     * @param _perThousandCommission : Per thousand commission of validator.
     */
    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows NRT Manager contract to send NRT share for Validator Manager.
     */
    setInitialValues(overrides?: CallOverrides): Promise<void>;

    setKycDapp(_kycDapp: string, overrides?: CallOverrides): Promise<void>;

    timeallyClub(overrides?: CallOverrides): Promise<string>;

    timeallyManager(overrides?: CallOverrides): Promise<string>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Allows a validator to withdraw their commission.
     * @param _month : NRT Month.
     */
    withdrawCommission(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows staking owners to withdraw share from validators earnings.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of staking contract which has delegated.
     * @param _validator : Address of validator.
     */
    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Delegation(
      stakingContract: string | null,
      month: BigNumberish | null,
      validator: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    dayswappers(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets quadratic adjustment amount for a given amount.
     * @param _amount : Initial amount.
     * @param _base : Amount intervals in which adjustment rate should increase.
     * @param _premiumFactor : Factor in which premium increases.
     */
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommission(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Get delegator by addresses.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of the delegating contract.
     * @param _validator : Address of the validator.
     */
    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets delegator by validator and delegator index.
     * @param _delegatorIndex : Index of delegator in array.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of validator in array.
     */
    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets delegator index.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of delegatinng staking contract.
     * @param _validatorIndex : Index of the validator.
     */
    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets address of a lucky vaidator based on PoS.
     */
    getLuckyValidatorAddress(overrides?: Overrides): Promise<BigNumber>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets total adjusted stakings for the month.
     * @param _month : NRT Month.
     */
    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets total blocks sealed in the month.
     * @param _month : NRT Month.
     */
    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validator by month and address
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validator by month and index.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of the validator in array.
     */
    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Can be called after NRT is released.
     * Gets earnings of a validator based on blocks sealed in previous months.
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validator index.
     * @param _month : NRT Month.
     * @param _validator : Address of the validator.
     */
    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets all validators for the month.
     * @param _month : NRT Month.
     */
    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Picks a validator index based on PoS.
     * @param _month : NRT Month.
     * @param _seed : Pseudo random seed.
     */
    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Allows block reward contract to register a sealed block by validator.
     * @param _sealer : Address of validator who sealed the block.
     */
    registerBlock(_sealer: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Allows a TimeAlly staking to register a delegation.
     * @param _extraData : Address of validator to delegate.
     * @param _month : NRT Month.
     */
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows a validator to set commission.
     * @param _month : NRT month.
     * @param _perThousandCommission : Per thousand commission of validator.
     */
    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows NRT Manager contract to send NRT share for Validator Manager.
     */
    setInitialValues(overrides?: CallOverrides): Promise<BigNumber>;

    setKycDapp(_kycDapp: string, overrides?: Overrides): Promise<BigNumber>;

    timeallyClub(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    timeallyPromotionalBucket(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows a validator to withdraw their commission.
     * @param _month : NRT Month.
     */
    withdrawCommission(
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows staking owners to withdraw share from validators earnings.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of staking contract which has delegated.
     * @param _validator : Address of validator.
     */
    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dayswappers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets quadratic adjustment amount for a given amount.
     * @param _amount : Initial amount.
     * @param _base : Amount intervals in which adjustment rate should increase.
     * @param _premiumFactor : Factor in which premium increases.
     */
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommission(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Get delegator by addresses.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of the delegating contract.
     * @param _validator : Address of the validator.
     */
    getDelegatorByAddress(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets delegator by validator and delegator index.
     * @param _delegatorIndex : Index of delegator in array.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of validator in array.
     */
    getDelegatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets delegator index.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of delegatinng staking contract.
     * @param _validatorIndex : Index of the validator.
     */
    getDelegatorIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _stakingContract: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets address of a lucky vaidator based on PoS.
     */
    getLuckyValidatorAddress(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets total adjusted stakings for the month.
     * @param _month : NRT Month.
     */
    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets total blocks sealed in the month.
     * @param _month : NRT Month.
     */
    getTotalBlocksSealed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets validator by month and address
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorByAddress(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets validator by month and index.
     * @param _month : NRT Month.
     * @param _validatorIndex : Index of the validator in array.
     */
    getValidatorByIndex(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Can be called after NRT is released.
     * Gets earnings of a validator based on blocks sealed in previous months.
     * @param _month : NRT Month.
     * @param _validator : Address of validator.
     */
    getValidatorEarning(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets validator index.
     * @param _month : NRT Month.
     * @param _validator : Address of the validator.
     */
    getValidatorIndex(
      _month: BigNumberish,
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets all validators for the month.
     * @param _month : NRT Month.
     */
    getValidators(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Picks a validator index based on PoS.
     * @param _month : NRT Month.
     * @param _seed : Pseudo random seed.
     */
    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomnessManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows NRT Manager contract to send NRT share for TimeAlly.
     */
    receiveNrt(
      _currentNrtMonth: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows block reward contract to register a sealed block by validator.
     * @param _sealer : Address of validator who sealed the block.
     */
    registerBlock(
      _sealer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a TimeAlly staking to register a delegation.
     * @param _extraData : Address of validator to delegate.
     * @param _month : NRT Month.
     */
    registerDelegation(
      _month: BigNumberish,
      _extraData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolveAddress(
      _username: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsername(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveUsernameStrict(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a validator to set commission.
     * @param _month : NRT month.
     * @param _perThousandCommission : Per thousand commission of validator.
     */
    setCommission(
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows NRT Manager contract to send NRT share for Validator Manager.
     */
    setInitialValues(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setKycDapp(
      _kycDapp: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    timeallyClub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeallyPromotionalBucket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows a validator to withdraw their commission.
     * @param _month : NRT Month.
     */
    withdrawCommission(
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows staking owners to withdraw share from validators earnings.
     * @param _month : NRT Month.
     * @param _stakingContract : Address of staking contract which has delegated.
     * @param _validator : Address of validator.
     */
    withdrawDelegationShare(
      _month: BigNumberish,
      _validator: string,
      _stakingContract: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
