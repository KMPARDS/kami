/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ReversePlasmaInterface extends ethers.utils.Interface {
  functions: {
    "finalizeProposal(uint256,uint256)": FunctionFragment;
    "findProposal(uint256,bytes32,bytes32)": FunctionFragment;
    "getAllValidators()": FunctionFragment;
    "getEthHeaderProposal(uint256,uint256)": FunctionFragment;
    "getEthHeaderProposals(uint256)": FunctionFragment;
    "getFinalizedEthHeader(uint256)": FunctionFragment;
    "getProposalValidators(uint256,uint256)": FunctionFragment;
    "getProposalsCount(uint256)": FunctionFragment;
    "getValidator(uint256)": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "latestBlockNumber()": FunctionFragment;
    "proposeBlock(uint256,bytes32,bytes32)": FunctionFragment;
    "setInitialValues(address,uint256,address[])": FunctionFragment;
    "tokenOnETH()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "finalizeProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findProposal",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthHeaderProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthHeaderProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalizedEthHeader",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalValidators",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "latestBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeBlock",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialValues",
    values: [string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOnETH",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthHeaderProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthHeaderProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalizedEthHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenOnETH", data: BytesLike): Result;

  events: {
    "NewBlockHeader(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewBlockHeader"): EventFragment;
}

export class ReversePlasma extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ReversePlasmaInterface;

  functions: {
    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    finalizeProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    findProposal(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    getAllValidators(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    getEthHeaderProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        transactionsRoot: string;
        receiptsRoot: string;
        proposalValidators: string[];
        0: string;
        1: string;
        2: string[];
      };
    }>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    getEthHeaderProposals(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        transactionsRoot: string;
        receiptsRoot: string;
        proposalValidators: string[];
        0: string;
        1: string;
        2: string[];
      }[];
    }>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    getFinalizedEthHeader(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        transactionsRoot: string;
        receiptsRoot: string;
        0: string;
        1: string;
      };
    }>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    getProposalValidators(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    getProposalsCount(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * TODO to be connected with Validator manager
     */
    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * The highest ETH finalised block number.
     */
    latestBlockNumber(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    proposeBlock(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialValues(
      _tokenOnETH: string,
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Era Swap ERC20 contract address.
     */
    tokenOnETH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  /**
   * Finalizes a proposal on which consensus is acheived.
   * @param _ethBlockNumber ETH block number of the proposal.
   * @param _proposalId Proposal Id of the proposal.
   */
  finalizeProposal(
    _ethBlockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Finds if same proposal is already created
   * @param _ethBlockNumber : ETH block number.
   * @param _receiptsRoot : MPT receipts root
   * @param _transactionsRoot : MPT transactions root
   */
  findProposal(
    _ethBlockNumber: BigNumberish,
    _transactionsRoot: BytesLike,
    _receiptsRoot: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    0: boolean;
    1: BigNumber;
  }>;

  getAllValidators(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets a block proposal.
   * @param _ethBlockNumber : ETH block number.
   * @param _proposalId : Id of the proposal.
   */
  getEthHeaderProposal(
    _ethBlockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    transactionsRoot: string;
    receiptsRoot: string;
    proposalValidators: string[];
    0: string;
    1: string;
    2: string[];
  }>;

  /**
   * Gets all proposals for an ETH block.
   * @param _ethBlockNumber : ETH block number.
   */
  getEthHeaderProposals(
    _ethBlockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      transactionsRoot: string;
      receiptsRoot: string;
      proposalValidators: string[];
      0: string;
      1: string;
      2: string[];
    }[]
  >;

  /**
   * Must check if roots are non-zero.
   * Gets a finalised header.
   * @param _blockNumber : ETH block number.
   */
  getFinalizedEthHeader(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    transactionsRoot: string;
    receiptsRoot: string;
    0: string;
    1: string;
  }>;

  /**
   * Gets validators of a proposal.
   * @param _ethBlockNumber : ETH block number of the proposal.
   * @param _proposalId : Id of the proposal.
   */
  getProposalValidators(
    _ethBlockNumber: BigNumberish,
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Gets number of proposals for the ETH block roots.
   * @param _ethBlockNumber : ETH block number.
   */
  getProposalsCount(
    _ethBlockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * TODO to be connected with Validator manager
   */
  getValidator(
    _validatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidator(_validator: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * The highest ETH finalised block number.
   */
  latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Used by Kami to propose a block.
   * @param _ethBlockNumber : ETH block number.
   * @param _receiptsRoot : ETH block receipts root.
   * @param _transactionsRoot : ETH block transactions root.
   */
  proposeBlock(
    _ethBlockNumber: BigNumberish,
    _transactionsRoot: BytesLike,
    _receiptsRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialValues(
    _tokenOnETH: string,
    _startBlockNumber: BigNumberish,
    _validators: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Era Swap ERC20 contract address.
   */
  tokenOnETH(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    finalizeProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    findProposal(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
      1: BigNumber;
    }>;

    getAllValidators(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    getEthHeaderProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      transactionsRoot: string;
      receiptsRoot: string;
      proposalValidators: string[];
      0: string;
      1: string;
      2: string[];
    }>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    getEthHeaderProposals(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        transactionsRoot: string;
        receiptsRoot: string;
        proposalValidators: string[];
        0: string;
        1: string;
        2: string[];
      }[]
    >;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    getFinalizedEthHeader(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      transactionsRoot: string;
      receiptsRoot: string;
      0: string;
      1: string;
    }>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    getProposalValidators(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    getProposalsCount(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * TODO to be connected with Validator manager
     */
    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * The highest ETH finalised block number.
     */
    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    proposeBlock(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialValues(
      _tokenOnETH: string,
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Era Swap ERC20 contract address.
     */
    tokenOnETH(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    NewBlockHeader(blockNumber: null, proposalId: null): EventFilter;
  };

  estimateGas: {
    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    finalizeProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    findProposal(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllValidators(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    getEthHeaderProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    getEthHeaderProposals(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    getFinalizedEthHeader(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    getProposalValidators(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    getProposalsCount(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * TODO to be connected with Validator manager
     */
    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The highest ETH finalised block number.
     */
    latestBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    proposeBlock(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInitialValues(
      _tokenOnETH: string,
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Era Swap ERC20 contract address.
     */
    tokenOnETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Finalizes a proposal on which consensus is acheived.
     * @param _ethBlockNumber ETH block number of the proposal.
     * @param _proposalId Proposal Id of the proposal.
     */
    finalizeProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Finds if same proposal is already created
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : MPT receipts root
     * @param _transactionsRoot : MPT transactions root
     */
    findProposal(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets a block proposal.
     * @param _ethBlockNumber : ETH block number.
     * @param _proposalId : Id of the proposal.
     */
    getEthHeaderProposal(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets all proposals for an ETH block.
     * @param _ethBlockNumber : ETH block number.
     */
    getEthHeaderProposals(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Must check if roots are non-zero.
     * Gets a finalised header.
     * @param _blockNumber : ETH block number.
     */
    getFinalizedEthHeader(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets validators of a proposal.
     * @param _ethBlockNumber : ETH block number of the proposal.
     * @param _proposalId : Id of the proposal.
     */
    getProposalValidators(
      _ethBlockNumber: BigNumberish,
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets number of proposals for the ETH block roots.
     * @param _ethBlockNumber : ETH block number.
     */
    getProposalsCount(
      _ethBlockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * TODO to be connected with Validator manager
     */
    getValidator(
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidator(
      _validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The highest ETH finalised block number.
     */
    latestBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Used by Kami to propose a block.
     * @param _ethBlockNumber : ETH block number.
     * @param _receiptsRoot : ETH block receipts root.
     * @param _transactionsRoot : ETH block transactions root.
     */
    proposeBlock(
      _ethBlockNumber: BigNumberish,
      _transactionsRoot: BytesLike,
      _receiptsRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialValues(
      _tokenOnETH: string,
      _startBlockNumber: BigNumberish,
      _validators: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Era Swap ERC20 contract address.
     */
    tokenOnETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
