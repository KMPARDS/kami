/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PetLiquidFundsBucketInterface extends ethers.utils.Interface {
  functions: {
    "addFunds()": FunctionFragment;
    "allocateFunds(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "petContract()": FunctionFragment;
    "prepaidEs()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFunds(bool,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addFunds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocateFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "petContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prepaidEs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [boolean, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocateFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "petContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prepaidEs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "FundsDeposited(address,uint256)": EventFragment;
    "FundsWithdrawn(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class PetLiquidFundsBucket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PetLiquidFundsBucketInterface;

  functions: {
    /**
     * ERC20 approve is required to be done for this contract earlier
     * this function is used by well wishers to add funds to the fund bucket of PET
     */
    addFunds(overrides?: PayableOverrides): Promise<ContractTransaction>;

    /**
     * transfers funds to PET contract
     */
    allocateFunds(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * address of PET Smart Contract
     */
    petContract(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * address of Era Swap ERC20 Smart Contract
     */
    prepaidEs(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function makes it possible for deployer to withdraw unallocated ES
     */
    withdrawFunds(
      _withdrawEverything: boolean,
      _withdrawlAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * ERC20 approve is required to be done for this contract earlier
   * this function is used by well wishers to add funds to the fund bucket of PET
   */
  addFunds(overrides?: PayableOverrides): Promise<ContractTransaction>;

  /**
   * transfers funds to PET contract
   */
  allocateFunds(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * address of PET Smart Contract
   */
  petContract(overrides?: CallOverrides): Promise<string>;

  /**
   * address of Era Swap ERC20 Smart Contract
   */
  prepaidEs(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function makes it possible for deployer to withdraw unallocated ES
   */
  withdrawFunds(
    _withdrawEverything: boolean,
    _withdrawlAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * ERC20 approve is required to be done for this contract earlier
     * this function is used by well wishers to add funds to the fund bucket of PET
     */
    addFunds(overrides?: CallOverrides): Promise<void>;

    /**
     * transfers funds to PET contract
     */
    allocateFunds(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * address of PET Smart Contract
     */
    petContract(overrides?: CallOverrides): Promise<string>;

    /**
     * address of Era Swap ERC20 Smart Contract
     */
    prepaidEs(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function makes it possible for deployer to withdraw unallocated ES
     */
    withdrawFunds(
      _withdrawEverything: boolean,
      _withdrawlAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FundsDeposited(_depositer: null, _depositAmount: null): EventFilter;

    FundsWithdrawn(_withdrawer: null, _withdrawAmount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    /**
     * ERC20 approve is required to be done for this contract earlier
     * this function is used by well wishers to add funds to the fund bucket of PET
     */
    addFunds(overrides?: PayableOverrides): Promise<BigNumber>;

    /**
     * transfers funds to PET contract
     */
    allocateFunds(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * address of PET Smart Contract
     */
    petContract(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * address of Era Swap ERC20 Smart Contract
     */
    prepaidEs(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function makes it possible for deployer to withdraw unallocated ES
     */
    withdrawFunds(
      _withdrawEverything: boolean,
      _withdrawlAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * ERC20 approve is required to be done for this contract earlier
     * this function is used by well wishers to add funds to the fund bucket of PET
     */
    addFunds(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    /**
     * transfers funds to PET contract
     */
    allocateFunds(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * address of PET Smart Contract
     */
    petContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * address of Era Swap ERC20 Smart Contract
     */
    prepaidEs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function makes it possible for deployer to withdraw unallocated ES
     */
    withdrawFunds(
      _withdrawEverything: boolean,
      _withdrawlAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
