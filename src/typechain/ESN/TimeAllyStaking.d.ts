/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TimeAllyStakingInterface extends ethers.utils.Interface {
  functions: {
    "SECONDS_IN_MONTH()": FunctionFragment;
    "delegate(address,bytes,uint32[])": FunctionFragment;
    "endMonth()": FunctionFragment;
    "extend()": FunctionFragment;
    "getDelegation(uint32)": FunctionFragment;
    "getIssTimeInterest()": FunctionFragment;
    "getMonthlyReward(uint32)": FunctionFragment;
    "getPrincipalAmount(uint32)": FunctionFragment;
    "getSplitFee(uint256,uint256)": FunctionFragment;
    "getTotalIssTime(bool)": FunctionFragment;
    "hasDelegations()": FunctionFragment;
    "increaseIssTime(uint256)": FunctionFragment;
    "init(address,uint32,uint256,address,address,bool[])": FunctionFragment;
    "isMonthClaimed(uint32)": FunctionFragment;
    "isMonthDelegated(uint32)": FunctionFragment;
    "issTimeLimit()": FunctionFragment;
    "issTimeTakenValue()": FunctionFragment;
    "issTimeTimestamp()": FunctionFragment;
    "kycDapp()": FunctionFragment;
    "lastIssTimeMonth()": FunctionFragment;
    "mergeIn(address)": FunctionFragment;
    "nextMonthPrincipalAmount()": FunctionFragment;
    "nrtManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepaidFallback(address,uint256)": FunctionFragment;
    "principal()": FunctionFragment;
    "receiveMerge(address,uint256)": FunctionFragment;
    "reportIssTime()": FunctionFragment;
    "split(uint256)": FunctionFragment;
    "startIssTime(uint256,bool)": FunctionFragment;
    "startMonth()": FunctionFragment;
    "submitIssTime()": FunctionFragment;
    "timeallyManager()": FunctionFragment;
    "timestamp()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawMonthlyNRT(uint32[],uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SECONDS_IN_MONTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "endMonth", values?: undefined): string;
  encodeFunctionData(functionFragment: "extend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDelegation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssTimeInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMonthlyReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrincipalAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSplitFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalIssTime",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDelegations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseIssTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, BigNumberish, BigNumberish, string, string, boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isMonthClaimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMonthDelegated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issTimeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issTimeTakenValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issTimeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kycDapp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastIssTimeMonth",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mergeIn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nextMonthPrincipalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nrtManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepaidFallback",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "principal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveMerge",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reportIssTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "split", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "startIssTime",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startMonth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitIssTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeallyManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMonthlyNRT",
    values: [BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SECONDS_IN_MONTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endMonth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssTimeInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMonthlyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrincipalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSplitFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalIssTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseIssTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMonthClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMonthDelegated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issTimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issTimeTakenValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issTimeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycDapp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastIssTimeMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mergeIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextMonthPrincipalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nrtManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepaidFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "principal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveMerge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportIssTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startIssTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startMonth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitIssTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeallyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMonthlyNRT",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint32,uint256,uint8)": EventFragment;
    "Delegate(uint32,address,bytes)": EventFragment;
    "Destroy(uint8)": EventFragment;
    "IssTimeIncrease(uint256,address)": EventFragment;
    "Topup(int256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Delegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Destroy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssTimeIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Topup"): EventFragment;
}

export class TimeAllyStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TimeAllyStakingInterface;

  functions: {
    SECONDS_IN_MONTH(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Delegation gives the platform address to take control of the staking.
     * Delegates the staking to a platform.
     * @param _extraData : Any extra data that the platform requires to link delegation.
     * @param _months : Number of months for which delegation is done.
     * @param _platform : Smart contract of the platform.
     */
    delegate(
      _platform: string,
      _extraData: BytesLike,
      _months: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Temporary end month for staking. Can be atmost `defaultMonths` far from         current NRT month to have less gas for split & merge, keeping user convenience.
     */
    endMonth(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * Increases the endMonth to next 12 months.
     * Extends the staking.
     */
    extend(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Get delegation for a month.
     * @param _month : NRT Month.
     */
    getDelegation(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Gets live IssTime Interest amount.
     */
    getIssTimeInterest(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets the amount monthly reward of NRT.
     * @param _month : NRT Month.
     */
    getMonthlyReward(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Calculates the principal amount based on topups.
     * Gets the principal amount.
     * @param _month : NRT Month.
     */
    getPrincipalAmount(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets split fees based on staking age.
     * @param _month : NRT Month.
     * @param _value : Amount to be split.
     */
    getSplitFee(
      _value: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Gets allowed IssTime Limit for this staking.
     * @param _destroy : Whether exit mode is selected.
     */
    getTotalIssTime(
      _destroy: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Checks if staking has any delegation in present of future.
     */
    hasDelegations(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Called by TimeAllyManager contract when processing NRT reward.
     * Increases IssTime limit value.
     * @param _increaseValue : Amount of IssTimeLimit to increase.
     */
    increaseIssTime(
      _increaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
     */
    init(
      _owner: string,
      _defaultMonths: BigNumberish,
      _initialIssTimeLimit: BigNumberish,
      _kycDapp: string,
      _nrtManager: string,
      _claimedMonths: boolean[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Gets claim status of NRT reward for a month.
     * @param _month : NRT Month.
     */
    isMonthClaimed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Gets delegation status of a month.
     * @param _month : NRT month.
     */
    isMonthDelegated(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Maximum amount of loan that can be taken or exit. Restaking increases this.
     */
    issTimeLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Amount of loan taken.
     */
    issTimeTakenValue(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Timestmap when IssTime was started. If zero means IssTime isn't active
     */
    issTimeTimestamp(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * KycDapp contract reference.
     */
    kycDapp(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * NRT month in which last IssTime was taken.
     */
    lastIssTimeMonth(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * This action destroys any unclaimed NRT benefits of this staking.
     * Merge the staking into a master staking.
     * @param _masterStaking : Address of master staking contract
     */
    mergeIn(
      _masterStaking: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Gets principal amount for next month, can be treated to get staking's principal.
     */
    nextMonthPrincipalAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * NRT Manager contract reference.
     */
    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * ERC-173 Contract Ownership
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Used for topup using Prepaid ES.
     * Called by Prepaid contract then transfer done to this contract.
     * @param _value : Amount of prepaid ES tokens transferred.
     */
    prepaidFallback(
      arg0: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Gets principal amount for next month, can be treated to get staking's principal.
     */
    principal(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Processes a merge request from other staking contract.
     * @param _childIssTimeLimit : IssTime of child smart contract.
     * @param _childOwner : Owner address in the child smart contract.
     */
    receiveMerge(
      _childOwner: string,
      _childIssTimeLimit: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Allows anyone after deadline to report IssTime not paid and earn incentive.
     */
    reportIssTime(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Splits the staking creating a new staking contract.
     * @param _value : Amount of tokens to seperate from this staking to create new.
     */
    split(
      _value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Starts IssTime in Loan mode or Exit mode the staking.
     * @param _destroy : Whether Exit mode is selected or not.
     * @param _value : Amount of IssTime to be taken.
     */
    startIssTime(
      _value: BigNumberish,
      _destroy: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * NRT month from which the staking receives rewards.
     */
    startMonth(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * Interest need to be passed along the value
     * Used to finish IssTime and bring staking back to normal form.
     */
    submitIssTime(overrides?: PayableOverrides): Promise<ContractTransaction>;

    /**
     * TimeAlly Manager contract reference.
     */
    timeallyManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Timestamp of staking creation
     */
    timestamp(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    /**
     * Transfers staking ownership to other wallet address.
     * @param _newOwner : Address of the new owner.
     */
    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Withdraws monthly NRT rewards from TimeAlly Manager.
     * @param _months : NRT Months for which rewards to be withdrawn.
     * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
     */
    withdrawMonthlyNRT(
      _months: BigNumberish[],
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  SECONDS_IN_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Delegation gives the platform address to take control of the staking.
   * Delegates the staking to a platform.
   * @param _extraData : Any extra data that the platform requires to link delegation.
   * @param _months : Number of months for which delegation is done.
   * @param _platform : Smart contract of the platform.
   */
  delegate(
    _platform: string,
    _extraData: BytesLike,
    _months: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Temporary end month for staking. Can be atmost `defaultMonths` far from         current NRT month to have less gas for split & merge, keeping user convenience.
   */
  endMonth(overrides?: CallOverrides): Promise<number>;

  /**
   * Increases the endMonth to next 12 months.
   * Extends the staking.
   */
  extend(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Get delegation for a month.
   * @param _month : NRT Month.
   */
  getDelegation(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Gets live IssTime Interest amount.
   */
  getIssTimeInterest(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the amount monthly reward of NRT.
   * @param _month : NRT Month.
   */
  getMonthlyReward(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Calculates the principal amount based on topups.
   * Gets the principal amount.
   * @param _month : NRT Month.
   */
  getPrincipalAmount(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets split fees based on staking age.
   * @param _month : NRT Month.
   * @param _value : Amount to be split.
   */
  getSplitFee(
    _value: BigNumberish,
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets allowed IssTime Limit for this staking.
   * @param _destroy : Whether exit mode is selected.
   */
  getTotalIssTime(
    _destroy: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Checks if staking has any delegation in present of future.
   */
  hasDelegations(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Called by TimeAllyManager contract when processing NRT reward.
   * Increases IssTime limit value.
   * @param _increaseValue : Amount of IssTimeLimit to increase.
   */
  increaseIssTime(
    _increaseValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
   */
  init(
    _owner: string,
    _defaultMonths: BigNumberish,
    _initialIssTimeLimit: BigNumberish,
    _kycDapp: string,
    _nrtManager: string,
    _claimedMonths: boolean[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Gets claim status of NRT reward for a month.
   * @param _month : NRT Month.
   */
  isMonthClaimed(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Gets delegation status of a month.
   * @param _month : NRT month.
   */
  isMonthDelegated(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Maximum amount of loan that can be taken or exit. Restaking increases this.
   */
  issTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Amount of loan taken.
   */
  issTimeTakenValue(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Timestmap when IssTime was started. If zero means IssTime isn't active
   */
  issTimeTimestamp(overrides?: CallOverrides): Promise<number>;

  /**
   * KycDapp contract reference.
   */
  kycDapp(overrides?: CallOverrides): Promise<string>;

  /**
   * NRT month in which last IssTime was taken.
   */
  lastIssTimeMonth(overrides?: CallOverrides): Promise<number>;

  /**
   * This action destroys any unclaimed NRT benefits of this staking.
   * Merge the staking into a master staking.
   * @param _masterStaking : Address of master staking contract
   */
  mergeIn(
    _masterStaking: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Gets principal amount for next month, can be treated to get staking's principal.
   */
  nextMonthPrincipalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * NRT Manager contract reference.
   */
  nrtManager(overrides?: CallOverrides): Promise<string>;

  /**
   * ERC-173 Contract Ownership
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Used for topup using Prepaid ES.
   * Called by Prepaid contract then transfer done to this contract.
   * @param _value : Amount of prepaid ES tokens transferred.
   */
  prepaidFallback(
    arg0: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Gets principal amount for next month, can be treated to get staking's principal.
   */
  principal(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Processes a merge request from other staking contract.
   * @param _childIssTimeLimit : IssTime of child smart contract.
   * @param _childOwner : Owner address in the child smart contract.
   */
  receiveMerge(
    _childOwner: string,
    _childIssTimeLimit: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Allows anyone after deadline to report IssTime not paid and earn incentive.
   */
  reportIssTime(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Splits the staking creating a new staking contract.
   * @param _value : Amount of tokens to seperate from this staking to create new.
   */
  split(
    _value: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Starts IssTime in Loan mode or Exit mode the staking.
   * @param _destroy : Whether Exit mode is selected or not.
   * @param _value : Amount of IssTime to be taken.
   */
  startIssTime(
    _value: BigNumberish,
    _destroy: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * NRT month from which the staking receives rewards.
   */
  startMonth(overrides?: CallOverrides): Promise<number>;

  /**
   * Interest need to be passed along the value
   * Used to finish IssTime and bring staking back to normal form.
   */
  submitIssTime(overrides?: PayableOverrides): Promise<ContractTransaction>;

  /**
   * TimeAlly Manager contract reference.
   */
  timeallyManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Timestamp of staking creation
   */
  timestamp(overrides?: CallOverrides): Promise<number>;

  /**
   * Transfers staking ownership to other wallet address.
   * @param _newOwner : Address of the new owner.
   */
  transferOwnership(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Withdraws monthly NRT rewards from TimeAlly Manager.
   * @param _months : NRT Months for which rewards to be withdrawn.
   * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
   */
  withdrawMonthlyNRT(
    _months: BigNumberish[],
    _rewardType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    SECONDS_IN_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Delegation gives the platform address to take control of the staking.
     * Delegates the staking to a platform.
     * @param _extraData : Any extra data that the platform requires to link delegation.
     * @param _months : Number of months for which delegation is done.
     * @param _platform : Smart contract of the platform.
     */
    delegate(
      _platform: string,
      _extraData: BytesLike,
      _months: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Temporary end month for staking. Can be atmost `defaultMonths` far from         current NRT month to have less gas for split & merge, keeping user convenience.
     */
    endMonth(overrides?: CallOverrides): Promise<number>;

    /**
     * Increases the endMonth to next 12 months.
     * Extends the staking.
     */
    extend(overrides?: CallOverrides): Promise<void>;

    /**
     * Get delegation for a month.
     * @param _month : NRT Month.
     */
    getDelegation(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Gets live IssTime Interest amount.
     */
    getIssTimeInterest(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the amount monthly reward of NRT.
     * @param _month : NRT Month.
     */
    getMonthlyReward(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Calculates the principal amount based on topups.
     * Gets the principal amount.
     * @param _month : NRT Month.
     */
    getPrincipalAmount(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets split fees based on staking age.
     * @param _month : NRT Month.
     * @param _value : Amount to be split.
     */
    getSplitFee(
      _value: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets allowed IssTime Limit for this staking.
     * @param _destroy : Whether exit mode is selected.
     */
    getTotalIssTime(
      _destroy: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if staking has any delegation in present of future.
     */
    hasDelegations(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Called by TimeAllyManager contract when processing NRT reward.
     * Increases IssTime limit value.
     * @param _increaseValue : Amount of IssTimeLimit to increase.
     */
    increaseIssTime(
      _increaseValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
     */
    init(
      _owner: string,
      _defaultMonths: BigNumberish,
      _initialIssTimeLimit: BigNumberish,
      _kycDapp: string,
      _nrtManager: string,
      _claimedMonths: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets claim status of NRT reward for a month.
     * @param _month : NRT Month.
     */
    isMonthClaimed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets delegation status of a month.
     * @param _month : NRT month.
     */
    isMonthDelegated(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Maximum amount of loan that can be taken or exit. Restaking increases this.
     */
    issTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Amount of loan taken.
     */
    issTimeTakenValue(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Timestmap when IssTime was started. If zero means IssTime isn't active
     */
    issTimeTimestamp(overrides?: CallOverrides): Promise<number>;

    /**
     * KycDapp contract reference.
     */
    kycDapp(overrides?: CallOverrides): Promise<string>;

    /**
     * NRT month in which last IssTime was taken.
     */
    lastIssTimeMonth(overrides?: CallOverrides): Promise<number>;

    /**
     * This action destroys any unclaimed NRT benefits of this staking.
     * Merge the staking into a master staking.
     * @param _masterStaking : Address of master staking contract
     */
    mergeIn(_masterStaking: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Gets principal amount for next month, can be treated to get staking's principal.
     */
    nextMonthPrincipalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * NRT Manager contract reference.
     */
    nrtManager(overrides?: CallOverrides): Promise<string>;

    /**
     * ERC-173 Contract Ownership
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Used for topup using Prepaid ES.
     * Called by Prepaid contract then transfer done to this contract.
     * @param _value : Amount of prepaid ES tokens transferred.
     */
    prepaidFallback(
      arg0: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets principal amount for next month, can be treated to get staking's principal.
     */
    principal(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Processes a merge request from other staking contract.
     * @param _childIssTimeLimit : IssTime of child smart contract.
     * @param _childOwner : Owner address in the child smart contract.
     */
    receiveMerge(
      _childOwner: string,
      _childIssTimeLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows anyone after deadline to report IssTime not paid and earn incentive.
     */
    reportIssTime(overrides?: CallOverrides): Promise<void>;

    /**
     * Splits the staking creating a new staking contract.
     * @param _value : Amount of tokens to seperate from this staking to create new.
     */
    split(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * Starts IssTime in Loan mode or Exit mode the staking.
     * @param _destroy : Whether Exit mode is selected or not.
     * @param _value : Amount of IssTime to be taken.
     */
    startIssTime(
      _value: BigNumberish,
      _destroy: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * NRT month from which the staking receives rewards.
     */
    startMonth(overrides?: CallOverrides): Promise<number>;

    /**
     * Interest need to be passed along the value
     * Used to finish IssTime and bring staking back to normal form.
     */
    submitIssTime(overrides?: CallOverrides): Promise<void>;

    /**
     * TimeAlly Manager contract reference.
     */
    timeallyManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Timestamp of staking creation
     */
    timestamp(overrides?: CallOverrides): Promise<number>;

    /**
     * Transfers staking ownership to other wallet address.
     * @param _newOwner : Address of the new owner.
     */
    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws monthly NRT rewards from TimeAlly Manager.
     * @param _months : NRT Months for which rewards to be withdrawn.
     * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
     */
    withdrawMonthlyNRT(
      _months: BigNumberish[],
      _rewardType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claim(
      month: BigNumberish | null,
      amount: null,
      rewardType: null
    ): EventFilter;

    Delegate(
      month: BigNumberish | null,
      platform: string | null,
      extraData: null
    ): EventFilter;

    Destroy(destroyReason: null): EventFilter;

    IssTimeIncrease(amount: null, benefactor: null): EventFilter;

    Topup(amount: null, benefactor: null): EventFilter;
  };

  estimateGas: {
    SECONDS_IN_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Delegation gives the platform address to take control of the staking.
     * Delegates the staking to a platform.
     * @param _extraData : Any extra data that the platform requires to link delegation.
     * @param _months : Number of months for which delegation is done.
     * @param _platform : Smart contract of the platform.
     */
    delegate(
      _platform: string,
      _extraData: BytesLike,
      _months: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Temporary end month for staking. Can be atmost `defaultMonths` far from         current NRT month to have less gas for split & merge, keeping user convenience.
     */
    endMonth(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Increases the endMonth to next 12 months.
     * Extends the staking.
     */
    extend(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Get delegation for a month.
     * @param _month : NRT Month.
     */
    getDelegation(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets live IssTime Interest amount.
     */
    getIssTimeInterest(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the amount monthly reward of NRT.
     * @param _month : NRT Month.
     */
    getMonthlyReward(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Calculates the principal amount based on topups.
     * Gets the principal amount.
     * @param _month : NRT Month.
     */
    getPrincipalAmount(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets split fees based on staking age.
     * @param _month : NRT Month.
     * @param _value : Amount to be split.
     */
    getSplitFee(
      _value: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets allowed IssTime Limit for this staking.
     * @param _destroy : Whether exit mode is selected.
     */
    getTotalIssTime(
      _destroy: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if staking has any delegation in present of future.
     */
    hasDelegations(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Called by TimeAllyManager contract when processing NRT reward.
     * Increases IssTime limit value.
     * @param _increaseValue : Amount of IssTimeLimit to increase.
     */
    increaseIssTime(
      _increaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
     */
    init(
      _owner: string,
      _defaultMonths: BigNumberish,
      _initialIssTimeLimit: BigNumberish,
      _kycDapp: string,
      _nrtManager: string,
      _claimedMonths: boolean[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Gets claim status of NRT reward for a month.
     * @param _month : NRT Month.
     */
    isMonthClaimed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets delegation status of a month.
     * @param _month : NRT month.
     */
    isMonthDelegated(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Maximum amount of loan that can be taken or exit. Restaking increases this.
     */
    issTimeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Amount of loan taken.
     */
    issTimeTakenValue(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Timestmap when IssTime was started. If zero means IssTime isn't active
     */
    issTimeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * KycDapp contract reference.
     */
    kycDapp(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * NRT month in which last IssTime was taken.
     */
    lastIssTimeMonth(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This action destroys any unclaimed NRT benefits of this staking.
     * Merge the staking into a master staking.
     * @param _masterStaking : Address of master staking contract
     */
    mergeIn(_masterStaking: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Gets principal amount for next month, can be treated to get staking's principal.
     */
    nextMonthPrincipalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * NRT Manager contract reference.
     */
    nrtManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * ERC-173 Contract Ownership
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Used for topup using Prepaid ES.
     * Called by Prepaid contract then transfer done to this contract.
     * @param _value : Amount of prepaid ES tokens transferred.
     */
    prepaidFallback(
      arg0: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Gets principal amount for next month, can be treated to get staking's principal.
     */
    principal(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Processes a merge request from other staking contract.
     * @param _childIssTimeLimit : IssTime of child smart contract.
     * @param _childOwner : Owner address in the child smart contract.
     */
    receiveMerge(
      _childOwner: string,
      _childIssTimeLimit: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Allows anyone after deadline to report IssTime not paid and earn incentive.
     */
    reportIssTime(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Splits the staking creating a new staking contract.
     * @param _value : Amount of tokens to seperate from this staking to create new.
     */
    split(
      _value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Starts IssTime in Loan mode or Exit mode the staking.
     * @param _destroy : Whether Exit mode is selected or not.
     * @param _value : Amount of IssTime to be taken.
     */
    startIssTime(
      _value: BigNumberish,
      _destroy: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * NRT month from which the staking receives rewards.
     */
    startMonth(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Interest need to be passed along the value
     * Used to finish IssTime and bring staking back to normal form.
     */
    submitIssTime(overrides?: PayableOverrides): Promise<BigNumber>;

    /**
     * TimeAlly Manager contract reference.
     */
    timeallyManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Timestamp of staking creation
     */
    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers staking ownership to other wallet address.
     * @param _newOwner : Address of the new owner.
     */
    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Withdraws monthly NRT rewards from TimeAlly Manager.
     * @param _months : NRT Months for which rewards to be withdrawn.
     * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
     */
    withdrawMonthlyNRT(
      _months: BigNumberish[],
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SECONDS_IN_MONTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Delegation gives the platform address to take control of the staking.
     * Delegates the staking to a platform.
     * @param _extraData : Any extra data that the platform requires to link delegation.
     * @param _months : Number of months for which delegation is done.
     * @param _platform : Smart contract of the platform.
     */
    delegate(
      _platform: string,
      _extraData: BytesLike,
      _months: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Temporary end month for staking. Can be atmost `defaultMonths` far from         current NRT month to have less gas for split & merge, keeping user convenience.
     */
    endMonth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Increases the endMonth to next 12 months.
     * Extends the staking.
     */
    extend(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Get delegation for a month.
     * @param _month : NRT Month.
     */
    getDelegation(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets live IssTime Interest amount.
     */
    getIssTimeInterest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the amount monthly reward of NRT.
     * @param _month : NRT Month.
     */
    getMonthlyReward(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Calculates the principal amount based on topups.
     * Gets the principal amount.
     * @param _month : NRT Month.
     */
    getPrincipalAmount(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets split fees based on staking age.
     * @param _month : NRT Month.
     * @param _value : Amount to be split.
     */
    getSplitFee(
      _value: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets allowed IssTime Limit for this staking.
     * @param _destroy : Whether exit mode is selected.
     */
    getTotalIssTime(
      _destroy: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if staking has any delegation in present of future.
     */
    hasDelegations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Called by TimeAllyManager contract when processing NRT reward.
     * Increases IssTime limit value.
     * @param _increaseValue : Amount of IssTimeLimit to increase.
     */
    increaseIssTime(
      _increaseValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _claimedMonths : Markings for claimed months in previous TimeAlly ETH contract.
     */
    init(
      _owner: string,
      _defaultMonths: BigNumberish,
      _initialIssTimeLimit: BigNumberish,
      _kycDapp: string,
      _nrtManager: string,
      _claimedMonths: boolean[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets claim status of NRT reward for a month.
     * @param _month : NRT Month.
     */
    isMonthClaimed(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets delegation status of a month.
     * @param _month : NRT month.
     */
    isMonthDelegated(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Maximum amount of loan that can be taken or exit. Restaking increases this.
     */
    issTimeLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Amount of loan taken.
     */
    issTimeTakenValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Timestmap when IssTime was started. If zero means IssTime isn't active
     */
    issTimeTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * KycDapp contract reference.
     */
    kycDapp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * NRT month in which last IssTime was taken.
     */
    lastIssTimeMonth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This action destroys any unclaimed NRT benefits of this staking.
     * Merge the staking into a master staking.
     * @param _masterStaking : Address of master staking contract
     */
    mergeIn(
      _masterStaking: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets principal amount for next month, can be treated to get staking's principal.
     */
    nextMonthPrincipalAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * NRT Manager contract reference.
     */
    nrtManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * ERC-173 Contract Ownership
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Used for topup using Prepaid ES.
     * Called by Prepaid contract then transfer done to this contract.
     * @param _value : Amount of prepaid ES tokens transferred.
     */
    prepaidFallback(
      arg0: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets principal amount for next month, can be treated to get staking's principal.
     */
    principal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Processes a merge request from other staking contract.
     * @param _childIssTimeLimit : IssTime of child smart contract.
     * @param _childOwner : Owner address in the child smart contract.
     */
    receiveMerge(
      _childOwner: string,
      _childIssTimeLimit: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows anyone after deadline to report IssTime not paid and earn incentive.
     */
    reportIssTime(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Splits the staking creating a new staking contract.
     * @param _value : Amount of tokens to seperate from this staking to create new.
     */
    split(
      _value: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Starts IssTime in Loan mode or Exit mode the staking.
     * @param _destroy : Whether Exit mode is selected or not.
     * @param _value : Amount of IssTime to be taken.
     */
    startIssTime(
      _value: BigNumberish,
      _destroy: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * NRT month from which the staking receives rewards.
     */
    startMonth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Interest need to be passed along the value
     * Used to finish IssTime and bring staking back to normal form.
     */
    submitIssTime(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    /**
     * TimeAlly Manager contract reference.
     */
    timeallyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Timestamp of staking creation
     */
    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers staking ownership to other wallet address.
     * @param _newOwner : Address of the new owner.
     */
    transferOwnership(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws monthly NRT rewards from TimeAlly Manager.
     * @param _months : NRT Months for which rewards to be withdrawn.
     * @param _rewardType : 0 => Liquid, 1 => Prepaid, 2 => Staked.
     */
    withdrawMonthlyNRT(
      _months: BigNumberish[],
      _rewardType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
