/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from 'ethers';
import { Contract, ContractTransaction, Overrides, CallOverrides } from '@ethersproject/contracts';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';

interface ValidatorManagerInterface extends ethers.utils.Interface {
  functions: {
    'addDelegation(uint256,uint256,uint256)': FunctionFragment;
    'blockRewardContract()': FunctionFragment;
    'deployer()': FunctionFragment;
    'getAdjustedAmount(uint256,uint256,uint256)': FunctionFragment;
    'getBlockRewardsMonthlyNRT(uint256)': FunctionFragment;
    'getLuckyValidatorAddress()': FunctionFragment;
    'getTotalAdjustedStakings(uint256)': FunctionFragment;
    'getTotalBlockReward(uint256)': FunctionFragment;
    'getValidatorEarning(uint256,uint256)': FunctionFragment;
    'getValidatorStaking(uint256,uint256)': FunctionFragment;
    'getValidatorStakingDelegator(uint256,uint256,uint256)': FunctionFragment;
    'getValidatorStakingDelegators(uint256,uint256)': FunctionFragment;
    'getValidatorStakings(uint256)': FunctionFragment;
    'nrtManager()': FunctionFragment;
    'pickValidator(uint256,uint256)': FunctionFragment;
    'randomnessManager()': FunctionFragment;
    'registerBlock(address)': FunctionFragment;
    'setCommission(uint256,uint256,uint256)': FunctionFragment;
    'setInitialValues(address,address,address,address,address)': FunctionFragment;
    'timeally()': FunctionFragment;
    'validatorSet()': FunctionFragment;
    'withdrawBlockReward(uint256,uint256,uint256)': FunctionFragment;
    'withdrawCommission(uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addDelegation',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'blockRewardContract', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deployer', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAdjustedAmount',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getBlockRewardsMonthlyNRT', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getLuckyValidatorAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getTotalAdjustedStakings', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTotalBlockReward', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'getValidatorEarning',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getValidatorStaking',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getValidatorStakingDelegator',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getValidatorStakingDelegators',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'getValidatorStakings', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'nrtManager', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pickValidator',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'randomnessManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'registerBlock', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setCommission',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setInitialValues',
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: 'timeally', values?: undefined): string;
  encodeFunctionData(functionFragment: 'validatorSet', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdrawBlockReward',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawCommission',
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: 'addDelegation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'blockRewardContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deployer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAdjustedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBlockRewardsMonthlyNRT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLuckyValidatorAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalAdjustedStakings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalBlockReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidatorEarning', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidatorStaking', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidatorStakingDelegator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidatorStakingDelegators', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getValidatorStakings', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nrtManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pickValidator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'randomnessManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registerBlock', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCommission', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInitialValues', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'timeally', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validatorSet', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawBlockReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawCommission', data: BytesLike): Result;

  events: {};
}

export class ValidatorManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ValidatorManagerInterface;

  functions: {
    addDelegation(
      _month: BigNumberish,
      _stakerDelegationIndex: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    blockRewardContract(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    deployer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getBlockRewardsMonthlyNRT(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getLuckyValidatorAddress(overrides?: Overrides): Promise<ContractTransaction>;

    getTotalAdjustedStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getTotalBlockReward(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getValidatorEarning(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getValidatorStaking(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        validator: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blockRewards: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          delegationIndex: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          delegationIndex: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      };
    }>;

    getValidatorStakingDelegator(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        stakingContract: string;
        delegationIndex: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      };
    }>;

    getValidatorStakingDelegators(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        stakingContract: string;
        delegationIndex: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }>;

    getValidatorStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        validator: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blockRewards: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          delegationIndex: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          delegationIndex: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      }[];
    }>;

    nrtManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    randomnessManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    registerBlock(_miner: string, overrides?: Overrides): Promise<ContractTransaction>;

    setCommission(
      _validatorIndex: BigNumberish,
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialValues(
      _validatorSet: string,
      _nrtManager: string,
      _timeally: string,
      _randomnessManager: string,
      _blockRewardContract: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    timeally(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    validatorSet(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    withdrawBlockReward(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawCommission(
      _validatorIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addDelegation(
    _month: BigNumberish,
    _stakerDelegationIndex: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  blockRewardContract(overrides?: CallOverrides): Promise<string>;

  deployer(overrides?: CallOverrides): Promise<string>;

  getAdjustedAmount(
    _amount: BigNumberish,
    _base: BigNumberish,
    _premiumFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlockRewardsMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getLuckyValidatorAddress(overrides?: Overrides): Promise<ContractTransaction>;

  getTotalAdjustedStakings(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBlockReward(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getValidatorEarning(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValidatorStaking(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    validator: string;
    amount: BigNumber;
    adjustedAmount: BigNumber;
    perThousandCommission: BigNumber;
    blockRewards: BigNumber;
    withdrawn: boolean;
    delegators: {
      stakingContract: string;
      delegationIndex: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: boolean;
    6: {
      stakingContract: string;
      delegationIndex: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[];
  }>;

  getValidatorStakingDelegator(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    _delegatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    stakingContract: string;
    delegationIndex: BigNumber;
    withdrawn: boolean;
    0: string;
    1: BigNumber;
    2: boolean;
  }>;

  getValidatorStakingDelegators(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      stakingContract: string;
      delegationIndex: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }[]
  >;

  getValidatorStakings(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      validator: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blockRewards: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        delegationIndex: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        delegationIndex: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }[]
  >;

  nrtManager(overrides?: CallOverrides): Promise<string>;

  pickValidator(
    _month: BigNumberish,
    _seed: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  randomnessManager(overrides?: CallOverrides): Promise<string>;

  registerBlock(_miner: string, overrides?: Overrides): Promise<ContractTransaction>;

  setCommission(
    _validatorIndex: BigNumberish,
    _month: BigNumberish,
    _perThousandCommission: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialValues(
    _validatorSet: string,
    _nrtManager: string,
    _timeally: string,
    _randomnessManager: string,
    _blockRewardContract: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  timeally(overrides?: CallOverrides): Promise<string>;

  validatorSet(overrides?: CallOverrides): Promise<string>;

  withdrawBlockReward(
    _month: BigNumberish,
    _validatorIndex: BigNumberish,
    _delegatorIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawCommission(
    _validatorIndex: BigNumberish,
    _month: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addDelegation(
      _month: BigNumberish,
      _stakerDelegationIndex: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    blockRewardContract(overrides?: CallOverrides): Promise<string>;

    deployer(overrides?: CallOverrides): Promise<string>;

    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockRewardsMonthlyNRT(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getLuckyValidatorAddress(overrides?: CallOverrides): Promise<string>;

    getTotalAdjustedStakings(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlockReward(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorEarning(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorStaking(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      validator: string;
      amount: BigNumber;
      adjustedAmount: BigNumber;
      perThousandCommission: BigNumber;
      blockRewards: BigNumber;
      withdrawn: boolean;
      delegators: {
        stakingContract: string;
        delegationIndex: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: boolean;
      6: {
        stakingContract: string;
        delegationIndex: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[];
    }>;

    getValidatorStakingDelegator(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      stakingContract: string;
      delegationIndex: BigNumber;
      withdrawn: boolean;
      0: string;
      1: BigNumber;
      2: boolean;
    }>;

    getValidatorStakingDelegators(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        stakingContract: string;
        delegationIndex: BigNumber;
        withdrawn: boolean;
        0: string;
        1: BigNumber;
        2: boolean;
      }[]
    >;

    getValidatorStakings(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        validator: string;
        amount: BigNumber;
        adjustedAmount: BigNumber;
        perThousandCommission: BigNumber;
        blockRewards: BigNumber;
        withdrawn: boolean;
        delegators: {
          stakingContract: string;
          delegationIndex: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: {
          stakingContract: string;
          delegationIndex: BigNumber;
          withdrawn: boolean;
          0: string;
          1: BigNumber;
          2: boolean;
        }[];
      }[]
    >;

    nrtManager(overrides?: CallOverrides): Promise<string>;

    pickValidator(
      _month: BigNumberish,
      _seed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomnessManager(overrides?: CallOverrides): Promise<string>;

    registerBlock(_miner: string, overrides?: CallOverrides): Promise<void>;

    setCommission(
      _validatorIndex: BigNumberish,
      _month: BigNumberish,
      _perThousandCommission: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialValues(
      _validatorSet: string,
      _nrtManager: string,
      _timeally: string,
      _randomnessManager: string,
      _blockRewardContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    timeally(overrides?: CallOverrides): Promise<string>;

    validatorSet(overrides?: CallOverrides): Promise<string>;

    withdrawBlockReward(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCommission(
      _validatorIndex: BigNumberish,
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addDelegation(
      _month: BigNumberish,
      _stakerDelegationIndex: BigNumberish,
      _amount: BigNumberish
    ): Promise<BigNumber>;
    blockRewardContract(): Promise<BigNumber>;
    deployer(): Promise<BigNumber>;
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish
    ): Promise<BigNumber>;
    getBlockRewardsMonthlyNRT(_month: BigNumberish): Promise<BigNumber>;
    getLuckyValidatorAddress(): Promise<BigNumber>;
    getTotalAdjustedStakings(_month: BigNumberish): Promise<BigNumber>;
    getTotalBlockReward(_month: BigNumberish): Promise<BigNumber>;
    getValidatorEarning(_month: BigNumberish, _validatorIndex: BigNumberish): Promise<BigNumber>;
    getValidatorStaking(_month: BigNumberish, _validatorIndex: BigNumberish): Promise<BigNumber>;
    getValidatorStakingDelegator(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish
    ): Promise<BigNumber>;
    getValidatorStakingDelegators(
      _month: BigNumberish,
      _validatorIndex: BigNumberish
    ): Promise<BigNumber>;
    getValidatorStakings(_month: BigNumberish): Promise<BigNumber>;
    nrtManager(): Promise<BigNumber>;
    pickValidator(_month: BigNumberish, _seed: BigNumberish): Promise<BigNumber>;
    randomnessManager(): Promise<BigNumber>;
    registerBlock(_miner: string): Promise<BigNumber>;
    setCommission(
      _validatorIndex: BigNumberish,
      _month: BigNumberish,
      _perThousandCommission: BigNumberish
    ): Promise<BigNumber>;
    setInitialValues(
      _validatorSet: string,
      _nrtManager: string,
      _timeally: string,
      _randomnessManager: string,
      _blockRewardContract: string
    ): Promise<BigNumber>;
    timeally(): Promise<BigNumber>;
    validatorSet(): Promise<BigNumber>;
    withdrawBlockReward(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish
    ): Promise<BigNumber>;
    withdrawCommission(_validatorIndex: BigNumberish, _month: BigNumberish): Promise<BigNumber>;
  };

  populateTransaction: {
    addDelegation(
      _month: BigNumberish,
      _stakerDelegationIndex: BigNumberish,
      _amount: BigNumberish
    ): Promise<PopulatedTransaction>;
    blockRewardContract(): Promise<PopulatedTransaction>;
    deployer(): Promise<PopulatedTransaction>;
    getAdjustedAmount(
      _amount: BigNumberish,
      _base: BigNumberish,
      _premiumFactor: BigNumberish
    ): Promise<PopulatedTransaction>;
    getBlockRewardsMonthlyNRT(_month: BigNumberish): Promise<PopulatedTransaction>;
    getLuckyValidatorAddress(): Promise<PopulatedTransaction>;
    getTotalAdjustedStakings(_month: BigNumberish): Promise<PopulatedTransaction>;
    getTotalBlockReward(_month: BigNumberish): Promise<PopulatedTransaction>;
    getValidatorEarning(
      _month: BigNumberish,
      _validatorIndex: BigNumberish
    ): Promise<PopulatedTransaction>;
    getValidatorStaking(
      _month: BigNumberish,
      _validatorIndex: BigNumberish
    ): Promise<PopulatedTransaction>;
    getValidatorStakingDelegator(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish
    ): Promise<PopulatedTransaction>;
    getValidatorStakingDelegators(
      _month: BigNumberish,
      _validatorIndex: BigNumberish
    ): Promise<PopulatedTransaction>;
    getValidatorStakings(_month: BigNumberish): Promise<PopulatedTransaction>;
    nrtManager(): Promise<PopulatedTransaction>;
    pickValidator(_month: BigNumberish, _seed: BigNumberish): Promise<PopulatedTransaction>;
    randomnessManager(): Promise<PopulatedTransaction>;
    registerBlock(_miner: string): Promise<PopulatedTransaction>;
    setCommission(
      _validatorIndex: BigNumberish,
      _month: BigNumberish,
      _perThousandCommission: BigNumberish
    ): Promise<PopulatedTransaction>;
    setInitialValues(
      _validatorSet: string,
      _nrtManager: string,
      _timeally: string,
      _randomnessManager: string,
      _blockRewardContract: string
    ): Promise<PopulatedTransaction>;
    timeally(): Promise<PopulatedTransaction>;
    validatorSet(): Promise<PopulatedTransaction>;
    withdrawBlockReward(
      _month: BigNumberish,
      _validatorIndex: BigNumberish,
      _delegatorIndex: BigNumberish
    ): Promise<PopulatedTransaction>;
    withdrawCommission(
      _validatorIndex: BigNumberish,
      _month: BigNumberish
    ): Promise<PopulatedTransaction>;
  };
}
